<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>部署双节点X86OpenStack集群</title>
    <link href="/2023/08/10/%E9%83%A8%E7%BD%B2%E5%8F%8C%E8%8A%82%E7%82%B9X86OpenStack%E9%9B%86%E7%BE%A4/"/>
    <url>/2023/08/10/%E9%83%A8%E7%BD%B2%E5%8F%8C%E8%8A%82%E7%82%B9X86OpenStack%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="配置基础环境"><a href="#配置基础环境" class="headerlink" title="配置基础环境"></a>配置基础环境</h1><p>以下步骤在主机侧部署，控制节点和计算节点环境均在Ubuntu 22.04。</p><p><strong>节点拓扑图</strong></p><p><img src="/../image/%E8%8A%82%E7%82%B9%E6%8B%93%E6%89%91%E5%9B%BE.png" alt="节点拓扑图"></p><p><strong>网络拓扑</strong></p><table><thead><tr><th align="center">序号</th><th align="center">主机</th><th align="center">接口</th><th align="center">网卡名</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">controller：10.100.192.79</td><td align="center">内部接口</td><td align="center">enp2s0</td></tr><tr><td align="center">1</td><td align="center">controller：10.100.192.92</td><td align="center">外部接口</td><td align="center">enxf8e43b63eb2f</td></tr><tr><td align="center">2</td><td align="center">compute2：10.100.192.94</td><td align="center">内部接口</td><td align="center">eno1</td></tr><tr><td align="center">2</td><td align="center">compute2：10.100.192.93</td><td align="center">外部接口</td><td align="center">enx00e04c680218</td></tr></tbody></table><h3 id="更新Ubuntu源"><a href="#更新Ubuntu源" class="headerlink" title="更新Ubuntu源"></a>更新Ubuntu源</h3><p>选择阿里云源22.04版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Bash">deb http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ jammy-security main restrcdicted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><h2 id="一、基础环境（2台高性能开发机）"><a href="#一、基础环境（2台高性能开发机）" class="headerlink" title="一、基础环境（2台高性能开发机）"></a>一、基础环境（2台高性能开发机）</h2><h3 id="1、关闭防火墙及修改内核"><a href="#1、关闭防火墙及修改内核" class="headerlink" title="1、关闭防火墙及修改内核"></a>1、关闭防火墙及修改内核</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo -i<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">ufw <span class="hljs-built_in">disable</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;net.bridge.bridge-nf-call-ip6tables = 1&#x27;</span> &gt;&gt; /etc/sysctl.d/99-sysctl.conf<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;net.bridge.bridge-nf-call-iptables = 1&#x27;</span> &gt;&gt; /etc/sysctl.d/99-sysctl.conf<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;net.ipv6.conf.all.disable_ipv6 = 1&#x27;</span> &gt;&gt; /etc/sysctl.d/99-sysctl.conf<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">modprobe br_netfilter<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sysctl --system<br></code></pre></td></tr></table></figure><h3 id="2、修改-etc-hosts"><a href="#2、修改-etc-hosts" class="headerlink" title="2、修改  /etc/hosts"></a>2、修改  <code>/etc/hosts</code></h3><p>各节点下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hostnamectl set-hostname controller<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;10.100.192.79  controller&#x27;</span>  &gt;&gt; /etc/hosts<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;10.100.192.94  compute2&#x27;</span>  &gt;&gt; /etc/hosts<br></code></pre></td></tr></table></figure><h3 id="3、安装软件包"><a href="#3、安装软件包" class="headerlink" title="3、安装软件包"></a>3、安装软件包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">apt update<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">apt install -y net-tools bash-completion python3-openstackclient wget chrony<br></code></pre></td></tr></table></figure><h3 id="4、配置时间同步"><a href="#4、配置时间同步" class="headerlink" title="4、配置时间同步"></a>4、配置时间同步</h3><p>集群环境时刻要求每个节点的时间一致，一般由时钟同步软件保证。本文使用<code>chrony</code>软件。步骤如下：</p><p><strong>controller</strong></p><p>1、 安装服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo apt update<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo apt install -y chrony<br></code></pre></td></tr></table></figure><p>2、修改 <code>/etc/chrony/chrony.conf</code> 配置文件，新增一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/chrony/chrony.conf<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 表示允许哪些IP从本节点同步时钟</span><br>allow 10.100.192.0/24<br></code></pre></td></tr></table></figure><p>3、重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo service chrony restart<br></code></pre></td></tr></table></figure><p><strong>compute2</strong></p><p>1、安装服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo apt update<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo apt install -y chrony<br></code></pre></td></tr></table></figure><p>2、修改 <code>/etc/chrony.conf</code> 配置文件，新增一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># NTP_SERVER 是controller IP，表示从这个机器获取时间，这里我们填 192.168.0.2，或者在`/etc/hosts`里配置好的 controller 名字即可。</span><br>server NTP_SERVER iburst<br></code></pre></td></tr></table></figure><blockquote><p>同时，要把<code>pool pool.ntp.org iburst</code>这一行注释掉，表示不从公网同步时钟。</p></blockquote><p>3、重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo service chrony restart<br></code></pre></td></tr></table></figure><p><strong>验证</strong></p><p>配置完成后，检查一下结果，在其他非controller节点执行<code>chronyc sources</code>，返回结果类似如下内容，表示成功从controller同步时钟。</p><h2 id="二、openstack安装（Controller）"><a href="#二、openstack安装（Controller）" class="headerlink" title="二、openstack安装（Controller）"></a>二、openstack安装（Controller）</h2><p>通过 <a href="https://docs.openstack.org/install-guide/environment-packages-ubuntu.html#archive-enablement">OpenStack packages for Ubuntu</a> 查看对应版本，22.04的默认版本为OpenStack Yoga。使用这个版本无需添加配置。如果其他版本自行修改。</p><h3 id="1、安装Mariadb数据库"><a href="#1、安装Mariadb数据库" class="headerlink" title="1、安装Mariadb数据库"></a>1、安装Mariadb数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">apt install mariadb-server python3-pymysql -y<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> &gt; /etc/mysql/mariadb.conf.d/99-openstack.cnf  &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">[mysqld]</span><br><span class="hljs-string">bind-address = 10.100.192.79</span><br><span class="hljs-string">default-storage-engine = innodb</span><br><span class="hljs-string">innodb_file_per_table = on</span><br><span class="hljs-string">max_connections = 4096</span><br><span class="hljs-string">collation-server = utf8_general_ci</span><br><span class="hljs-string">character-set-server = utf8</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">service mysql restart<br></code></pre></td></tr></table></figure><p>通过运行<code>mysql_secure_installation</code> 脚本来保护数据库服务。特别是，为数据库root帐户选择一个合适的密码 ：（设置数据库密码为<code>000000</code>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">mysql_secure_installation<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">netstat -antup | grep mariadb<br></code></pre></td></tr></table></figure><p>检查能否登录Mariadb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -u root -p<br></code></pre></td></tr></table></figure><h3 id="2、安装Rabbitmq消息队列"><a href="#2、安装Rabbitmq消息队列" class="headerlink" title="2、安装Rabbitmq消息队列"></a>2、安装Rabbitmq消息队列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">apt install rabbitmq-server -y<br></code></pre></td></tr></table></figure><p>添加OpenStack用户，用户密码设置为<code>000000</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">rabbitmqctl add_user openstack 000000<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">rabbitmqctl set_user_tags openstack administrator<br></code></pre></td></tr></table></figure><p>替换RABBIT_PASS为合适的密码。 允许用户的配置、写入和读取访问权限 OpenStack：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">rabbitmqctl set_permissions openstack <span class="hljs-string">&quot;.*&quot;</span> <span class="hljs-string">&quot;.*&quot;</span> <span class="hljs-string">&quot;.*&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">rabbitmqctl list_user_permissions openstack<br></code></pre></td></tr></table></figure><p>添加可视化插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">rabbitmq-plugins <span class="hljs-built_in">enable</span> rabbitmq_management<br></code></pre></td></tr></table></figure><p>登录<code>rabbitmq</code>,登录地址：<a href="http://ip:15672/">http://localhost:15672</a></p><p>可通过<code>guest</code>登录，密码：<code>guest</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">netstat  -antup | grep 5672<br></code></pre></td></tr></table></figure><p>重启消息队列服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">service rabbitmq-server restart<br></code></pre></td></tr></table></figure><h3 id="3、安装MemCached内存缓存处理"><a href="#3、安装MemCached内存缓存处理" class="headerlink" title="3、安装MemCached内存缓存处理"></a>3、安装MemCached内存缓存处理</h3><p>服务的身份服务认证机制使用 Memcached 来缓存令牌。memcached 服务通常在控制器节点上运行。对于生产部署，我们建议启用防火墙、身份验证和加密的组合来保护它。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">apt install -y memcached python3-memcache<br></code></pre></td></tr></table></figure><blockquote><p>编辑 <code>/etc/memcached.conf</code> 文件并将服务配置为使用控制器节点的管理 IP 地址。这是为了允许其他节点通过管理网络进行访问修改：将 <code>-l</code> 后面的IP改为如下 <code>-l IP</code> 地址。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sed -i <span class="hljs-string">&#x27;s/-l 127.0.0.1/-l 10.100.192.79/g&#x27;</span> /etc/memcached.conf<br></code></pre></td></tr></table></figure><p>重启 Memcached 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">service memcached restart<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">netstat -antup | grep memcached<br></code></pre></td></tr></table></figure><h3 id="4、安装etcd分布式键值存储"><a href="#4、安装etcd分布式键值存储" class="headerlink" title="4、安装etcd分布式键值存储"></a>4、安装etcd分布式键值存储</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">apt install etcd -y<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> &gt;  /etc/default/etcd  &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">ETCD_NAME=&quot;controller&quot;</span><br><span class="hljs-string">ETCD_DATA_DIR=&quot;/var/lib/etcd&quot;</span><br><span class="hljs-string">ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;</span><br><span class="hljs-string">ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster-01&quot;</span><br><span class="hljs-string">ETCD_INITIAL_CLUSTER=&quot;controller=http://10.100.192.79:2380&quot;</span><br><span class="hljs-string">ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;http://10.100.192.79:2380&quot;</span><br><span class="hljs-string">ETCD_ADVERTISE_CLIENT_URLS=&quot;http://10.100.192.79:2379&quot;</span><br><span class="hljs-string">ETCD_LISTEN_PEER_URLS=&quot;http://0.0.0.0:2380&quot;</span><br><span class="hljs-string">ETCD_LISTEN_CLIENT_URLS=&quot;http://10.100.192.79:2379&quot;</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">service etcd restart<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">netstat -antup | grep etcd<br></code></pre></td></tr></table></figure><h3 id="5、安装keystone"><a href="#5、安装keystone" class="headerlink" title="5、安装keystone"></a>5、安装keystone</h3><p>以root用户身份连接数据库服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo su<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">mysql<br></code></pre></td></tr></table></figure><p>以下步骤在root数据库环境执行</p><p>创建keystone数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">CREATE DATABASE keystone;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">GRANT ALL PRIVILEGES ON keystone.* TO <span class="hljs-string">&#x27;keystone&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;000000&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">GRANT ALL PRIVILEGES ON keystone.* TO <span class="hljs-string">&#x27;keystone&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;000000&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>退出数据库访问客户端。</p><p>运行以下命令来安装软件包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">apt install keystone libapache2-mod-wsgi-py3 -y<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">vi /etc/keystone/keystone.conf<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 修改如下</span><br>[database]<br>connection = mysql+pymysql://keystone:000000@controller/keystone<br><br>[token]<br>provider = fernet<br></code></pre></td></tr></table></figure><p>填充身份服务数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">su -s /bin/sh -c <span class="hljs-string">&quot;keystone-manage db_sync&quot;</span> keystone<br></code></pre></td></tr></table></figure><p>初始化 Fernet 密钥库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">keystone-manage credential_setup --keystone-user keystone --keystone-group keystone<br></code></pre></td></tr></table></figure><p>引导身份服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Bash">keystone-manage bootstrap --bootstrap-password 000000 \<br>  --bootstrap-admin-url http://controller:5000/v3/ \<br>  --bootstrap-internal-url http://controller:5000/v3/ \<br>  --bootstrap-public-url http://controller:5000/v3/ \<br>  --bootstrap-region-id RegionOne<br></code></pre></td></tr></table></figure><p>配置 Apache HTTP 服务器</p><p>编辑 <code>/etc/apache2/apache2.conf</code> 文件并配置 <code>ServerName</code> 选项以引用控制器节点：如果该 <code>ServerName</code> 条目尚不存在，则需要添加该条目。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;ServerName controller&#x27;</span> &gt;&gt;  /etc/apache2/apache2.conf<br></code></pre></td></tr></table></figure><p>安全部署应将 Web 服务器配置为使用 SSL 或在 SSL 终结器后面运行。<br>重启Apache服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">service apache2 restart<br></code></pre></td></tr></table></figure><p>检查状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">service apache2 status<br></code></pre></td></tr></table></figure><p>后续所有service都可通过status命令检查重启状态，后面不再重复，请自行检查配置的服务是否重启成功。</p><p>配置keystone管理员的环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">export</span> OS_USERNAME=admin<br><span class="hljs-built_in">export</span> OS_PASSWORD=000000<br><span class="hljs-built_in">export</span> OS_PROJECT_NAME=admin<br><span class="hljs-built_in">export</span> OS_USER_DOMAIN_NAME=Default<br><span class="hljs-built_in">export</span> OS_PROJECT_DOMAIN_NAME=Default<br><span class="hljs-built_in">export</span> OS_AUTH_URL=http://controller:5000/v3<br><span class="hljs-built_in">export</span> OS_IDENTITY_API_VERSION=3<br></code></pre></td></tr></table></figure><p>创建域、项目、keystone用户和角色</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack domain create --description <span class="hljs-string">&quot;An Example Domain&quot;</span> example<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack project create --domain default --description <span class="hljs-string">&quot;Service Project&quot;</span> service<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack project create --domain default --description <span class="hljs-string">&quot;Demo Project&quot;</span> demo<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack user create --domain default --password-prompt demo<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack role create user<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack role add --project demo --user demo user<br></code></pre></td></tr></table></figure><p>验证keystone</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">unset</span> OS_AUTH_URL OS_PASSWORD<br></code></pre></td></tr></table></figure><p>获取keystone管理员的令牌</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack --os-auth-url http://controller:5000/v3 \<br>  --os-project-domain-name Default --os-user-domain-name Default \<br>  --os-project-name admin --os-username admin token issue<br></code></pre></td></tr></table></figure><p>输入Password：<code>000000</code></p><p>获取令牌，keystone正常</p><p>获取keystone普通用户demo的令牌</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack --os-auth-url http://controller:5000/v3 \<br>  --os-project-domain-name Default --os-user-domain-name Default \<br>  --os-project-name demo --os-username demo token issue<br></code></pre></td></tr></table></figure><p>创建openstack客户端环境变量脚本文件</p><p>前面的部分使用环境变量和命令选项的组合通过openstack客户端与身份服务进行交互 。为了提高客户端操作的效率，OpenStack支持简单的客户端环境脚本，也称为 OpenRC 文件。这些脚本通常包含所有客户端的通用选项，但也支持独特的选项。创建客户端环境的脚本admin和demo 项目和用户。本指南的后续部分将参考这些脚本来加载客户端操作的适当凭据。</p><p>admin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> &gt; admin-openrc  &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">export OS_PROJECT_DOMAIN_NAME=Default</span><br><span class="hljs-string">export OS_USER_DOMAIN_NAME=Default</span><br><span class="hljs-string">export OS_PROJECT_NAME=admin</span><br><span class="hljs-string">export OS_USERNAME=admin</span><br><span class="hljs-string">export OS_PASSWORD=000000</span><br><span class="hljs-string">export OS_AUTH_URL=http://controller:5000/v3</span><br><span class="hljs-string">export OS_IDENTITY_API_VERSION=3</span><br><span class="hljs-string">export OS_IMAGE_API_VERSION=2</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>demo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> &gt; demo-openrc  &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">export OS_PROJECT_DOMAIN_NAME=Default</span><br><span class="hljs-string">export OS_USER_DOMAIN_NAME=Default</span><br><span class="hljs-string">export OS_PROJECT_NAME=demo</span><br><span class="hljs-string">export OS_USERNAME=demo</span><br><span class="hljs-string">export OS_PASSWORD=000000</span><br><span class="hljs-string">export OS_AUTH_URL=http://controller:5000/v3</span><br><span class="hljs-string">export OS_IDENTITY_API_VERSION=3</span><br><span class="hljs-string">export OS_IMAGE_API_VERSION=2</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">source</span> admin-openrc<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack token issue<br></code></pre></td></tr></table></figure><h3 id="6、安装glance"><a href="#6、安装glance" class="headerlink" title="6、安装glance"></a>6、安装glance</h3><p>创建数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">mysql<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">CREATE DATABASE glance;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">GRANT ALL PRIVILEGES ON glance.* TO <span class="hljs-string">&#x27;glance&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;000000&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">GRANT ALL PRIVILEGES ON glance.* TO <span class="hljs-string">&#x27;glance&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;000000&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>退出数据库访问客户端</p><p>创建用户并授权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">. admin-openrc<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack user create --domain default --password-prompt glance<br></code></pre></td></tr></table></figure><p>在server项目中给用户glance授予管理员权限admin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack role add --project service --user glance admin<br></code></pre></td></tr></table></figure><p>创建服务类型为image的实体glance</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack service create --name glance  --description <span class="hljs-string">&quot;OpenStack Image&quot;</span> image<br></code></pre></td></tr></table></figure><p>创建镜像服务的调用端点</p><p>为image服务类型创建公开（public）的调用端点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack endpoint create --region RegionOne image public http://controller:9292<br></code></pre></td></tr></table></figure><p>为image服务类型创建内部（internal）的调用端点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack endpoint create --region RegionOne image internal http://controller:9292<br></code></pre></td></tr></table></figure><p>为image服务类型创建管理（admin）的调用端点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack endpoint create --region RegionOne image admin http://controller:9292<br></code></pre></td></tr></table></figure><p>安装并配置相关软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">apt install glance -y<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">vi /etc/glance/glance-api.conf<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 修改如下</span><br>[database]<br>connection = mysql+pymysql://glance:000000@controller/glance<br><br>[keystone_authtoken]<br>www_authenticate_uri = http://controller:5000<br>auth_url = http://controller:5000<br>memcached_servers = controller:11211<br>auth_type = password<br>project_domain_name = Default<br>user_domain_name = Default<br>project_name = service<br>username = glance<br>password = 000000<br><br>[paste_deploy]<br>flavor = keystone<br><br>[glance_store]<br>stores = file,http<br>default_store = file<br>filesystem_store_datadir = /var/lib/glance/images/<br></code></pre></td></tr></table></figure><p>向数据库中导入glance的数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">su -s /bin/sh -c <span class="hljs-string">&quot;glance-manage db_sync&quot;</span> glance<br></code></pre></td></tr></table></figure><p>启动glance服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">service glance-api restart<br></code></pre></td></tr></table></figure><p>验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">. admin-openrc<br></code></pre></td></tr></table></figure><p>下载镜像到<code>/root</code>目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">wget http://download.cirros-cloud.net/0.4.0/cirros-0.4.0-x86_64-disk.img<br></code></pre></td></tr></table></figure><p>使用QCOW2磁盘格式、裸容器格式和公开可见性将镜像上传到 Image 服务 ，以便所有项目都可以访问它：执行成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">glance image-create --name <span class="hljs-string">&quot;cirros&quot;</span> --file cirros-0.4.0-x86_64-disk.img \<br>--disk-format qcow2 --container-format bare  --visibility=public<br></code></pre></td></tr></table></figure><p>OpenStack 动态生成 ID，因此您将在示例命令输出中看到不同的值。</p><p>确认上传镜像并验证属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">glance image-list<br></code></pre></td></tr></table></figure><h3 id="7、安装placement"><a href="#7、安装placement" class="headerlink" title="7、安装placement"></a>7、安装placement</h3><p>创建数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">mysql<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">CREATE DATABASE placement;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">GRANT ALL PRIVILEGES ON placement.* TO <span class="hljs-string">&#x27;placement&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;000000&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">GRANT ALL PRIVILEGES ON placement.* TO <span class="hljs-string">&#x27;placement&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;000000&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>创建用户并授权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">. admin-openrc<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack user create --domain default --password-prompt placement<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack role add --project service --user placement admin<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack service create --name placement --description <span class="hljs-string">&quot;Placement API&quot;</span> placement<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack endpoint create --region RegionOne placement public http://controller:8778<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack endpoint create --region RegionOne placement internal http://controller:8778<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack endpoint create --region RegionOne placement admin http://controller:8778<br></code></pre></td></tr></table></figure><p>安装并配置相关软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">apt install placement-api -y<br></code></pre></td></tr></table></figure><p>编辑 <code>/etc/placement/placement.conf</code> 文件并完成以下操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">vi /etc/placement/placement.conf<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 增加如下</span><br>[placement_database]<br>connection = mysql+pymysql://placement:000000@controller/placement<br><br>[api]<br>auth_strategy = keystone<br><br>[keystone_authtoken]<br>auth_url = http://controller:5000/v3<br>memcached_servers = controller:11211<br>auth_type = password<br>project_domain_name = Default<br>user_domain_name = Default<br>project_name = service<br>username = placement<br>password = 000000<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">su -s /bin/sh -c <span class="hljs-string">&quot;placement-manage db sync&quot;</span> placement<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">service apache2 restart<br></code></pre></td></tr></table></figure><p>验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">. admin-openrc<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">placement-status upgrade check<br></code></pre></td></tr></table></figure><h3 id="安装osc-placement插件"><a href="#安装osc-placement插件" class="headerlink" title="安装osc-placement插件"></a>安装osc-placement插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">pip3 install osc-placement<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack --os-placement-api-version 1.2 resource class list --sort-column name<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack --os-placement-api-version 1.6 trait list --sort-column name<br></code></pre></td></tr></table></figure><h3 id="8、安装-nova"><a href="#8、安装-nova" class="headerlink" title="8、安装 nova"></a>8、安装 nova</h3><p><strong>controller</strong></p><p>创建数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">mysql<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">CREATE DATABASE nova_api;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">CREATE DATABASE nova;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">CREATE DATABASE nova_cell0;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">GRANT ALL PRIVILEGES ON nova_api.* TO <span class="hljs-string">&#x27;nova&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;000000&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">GRANT ALL PRIVILEGES ON nova_api.* TO <span class="hljs-string">&#x27;nova&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;000000&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">GRANT ALL PRIVILEGES ON nova.* TO <span class="hljs-string">&#x27;nova&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;000000&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">GRANT ALL PRIVILEGES ON nova.* TO <span class="hljs-string">&#x27;nova&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;000000&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">GRANT ALL PRIVILEGES ON nova_cell0.* TO <span class="hljs-string">&#x27;nova&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;000000&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">GRANT ALL PRIVILEGES ON nova_cell0.* TO <span class="hljs-string">&#x27;nova&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;000000&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">. admin-openrc<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack user create --domain default --password-prompt nova<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack role add --project service --user nova admin<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack service create --name nova --description <span class="hljs-string">&quot;OpenStack Compute&quot;</span> compute<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack endpoint create --region RegionOne compute public http://controller:8774/v2.1<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack endpoint create --region RegionOne compute internal http://controller:8774/v2.1<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack endpoint create --region RegionOne compute admin http://controller:8774/v2.1<br></code></pre></td></tr></table></figure><p>安装并配置相关软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">apt install nova-api nova-conductor nova-novncproxy nova-scheduler -y<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">vi /etc/nova/nova.conf<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 增加内容</span><br>[DEFAULT]<br>transport_url = rabbit://openstack:000000@controller:5672/<br>my_ip = 10.100.192.79<br><br>[api_database]<br>connection = mysql+pymysql://nova:000000@controller/nova_api<br><br>[database]<br>connection = mysql+pymysql://nova:000000@controller/nova<br><br>[api]<br>auth_strategy = keystone<br><br>[keystone_authtoken]<br>www_authenticate_uri = http://controller:5000/<br>auth_url = http://controller:5000/<br>memcached_servers = controller:11211<br>auth_type = password<br>project_domain_name = Default<br>user_domain_name = Default<br>project_name = service<br>username = nova<br>password = 000000<br><br>[vnc]<br>enabled = <span class="hljs-literal">true</span><br>server_listen = <span class="hljs-variable">$my_ip</span><br>server_proxyclient_address = <span class="hljs-variable">$my_ip</span><br><br>[glance]<br>api_servers = http://controller:9292<br><br>[oslo_concurrency]<br>lock_path = /var/lib/nova/tmp<br><br>[placement]<br>region_name = RegionOne<br>project_domain_name = Default<br>project_name = service<br>auth_type = password<br>user_domain_name = Default<br>auth_url = http://controller:5000/v3<br>username = placement<br>password = 000000<br><br>[scheduler]<br>discover_hosts_in_cells_interval = 300<br><br></code></pre></td></tr></table></figure><p>向数据库中导入nova，nova-api，nova-cell0的数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">su -s /bin/sh -c <span class="hljs-string">&quot;nova-manage api_db sync&quot;</span> nova<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">su -s /bin/sh -c <span class="hljs-string">&quot;nova-manage cell_v2 map_cell0&quot;</span> nova<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">su -s /bin/sh -c <span class="hljs-string">&quot;nova-manage cell_v2 create_cell --name=cell1 --verbose&quot;</span> nova<br></code></pre></td></tr></table></figure><p>检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">su -s /bin/sh -c <span class="hljs-string">&quot;nova-manage db sync&quot;</span> nova<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">su -s /bin/sh -c <span class="hljs-string">&quot;nova-manage cell_v2 list_cells&quot;</span> nova<br></code></pre></td></tr></table></figure><p>重启所有服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">service nova-api restart<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">service nova-scheduler restart<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">service nova-conductor restart<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">service nova-novncproxy restart<br></code></pre></td></tr></table></figure><p>查看所有状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">service nova-api status &amp;&amp; service nova-scheduler status &amp;&amp; service nova-conductor status &amp;&amp; service nova-novncproxy status<br></code></pre></td></tr></table></figure><p><strong>compute1(OpenEuler X86)</strong></p><p>1、安装软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf install openstack-nova-compute<br></code></pre></td></tr></table></figure><p>2、编辑<code>/etc/nova/nova.conf</code>配置文件</p><p>在[default]部分，启用计算和元数据的API，配置RabbitMQ消息队列入口，使用Compute节点管理IP配置my_ip，显式定义compute_driver、instances_path、log_dir：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[DEFAULT]<br>enabled_apis = osapi_compute,metadata<br>transport_url = rabbit://openstack:000000@controller:5672/<br>my_ip = 10.12.193.53<br>compute_driver = libvirt.LibvirtDriver<br>instances_path = /var/lib/nova/instances<br>log_dir = /var/log/nova<br></code></pre></td></tr></table></figure><p>在[api]和[keystone_authtoken]部分，配置身份认证服务入口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[api]<br>auth_strategy = keystone<br><br>[keystone_authtoken]<br>auth_url = http://controller:5000/v3<br>memcached_servers = controller:11211<br>auth_type = password<br>project_domain_name = Default<br>user_domain_name = Default<br>project_name = service<br>username = nova<br>password = 000000<br></code></pre></td></tr></table></figure><p>在[vnc]部分，启用并配置远程控制台入口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[vnc]<br>enabled = <span class="hljs-literal">true</span><br>server_listen = <span class="hljs-variable">$my_ip</span><br>server_proxyclient_address = <span class="hljs-variable">$my_ip</span><br>novncproxy_base_url = http://controller:6080/vnc_auto.html<br></code></pre></td></tr></table></figure><p>在[glance]部分，配置镜像服务API的地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[glance]<br>api_servers = http://controller:9292<br></code></pre></td></tr></table></figure><p>在[oslo_concurrency]部分，配置lock path：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[oslo_concurrency]<br>lock_path = /var/lib/nova/tmp<br></code></pre></td></tr></table></figure><p>[placement]部分，配置placement服务的入口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[placement]<br>region_name = RegionOne<br>project_domain_name = Default<br>project_name = service<br>auth_type = password<br>user_domain_name = Default<br>auth_url = http://controller:5000/v3<br>username = placement<br>password = 000000<br></code></pre></td></tr></table></figure><p>3、确认计算节点是否支持虚拟机硬件加速（x86_64）</p><p>处理器为x86_64架构时，可通过运行如下命令确认是否支持硬件加速：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">egrep -c <span class="hljs-string">&#x27;(vmx|svm)&#x27;</span> /proc/cpuinfo<br></code></pre></td></tr></table></figure><p>如果返回值为0则不支持硬件加速，需要配置libvirt使用QEMU而不是默认的KVM。编辑&#x2F;etc&#x2F;nova&#x2F;nova.conf的[libvirt]部分：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[libvirt]<br>virt_type = qemu<br>如果返回值为1或更大的值，则支持硬件加速，不需要进行额外的配置。<br></code></pre></td></tr></table></figure><p>4、启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x /etc/rc.d/rc.local<br>systemctl <span class="hljs-built_in">enable</span> libvirtd.service openstack-nova-compute.service<br>systemctl start libvirtd.service openstack-nova-compute.service<br></code></pre></td></tr></table></figure><p><strong>compute2（Ubuntu）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">apt install nova-compute -y<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">vi /etc/nova/nova.conf<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 增加内容</span><br>[DEFAULT]<br>transport_url = rabbit://openstack:000000@controller<br>my_ip = 10.100.192.94<br><br>[api]<br>auth_strategy = keystone<br><br>[keystone_authtoken]<br>www_authenticate_uri = http://controller:5000/<br>auth_url = http://controller:5000/<br>memcached_servers = controller:11211<br>auth_type = password<br>project_domain_name = Default<br>user_domain_name = Default<br>project_name = service<br>username = nova<br>password = 000000<br><br>[vnc]<br>enabled = <span class="hljs-literal">true</span><br>server_listen = <span class="hljs-variable">$my_ip</span><br>server_proxyclient_address = <span class="hljs-variable">$my_ip</span><br>novncproxy_base_url = http://controller:6080/vnc_auto.html<br><br>[glance]<br>api_servers = http://controller:9292<br><br>[oslo_concurrency]<br>lock_path = /var/lib/nova/tmp<br><br>[placement]<br>region_name = RegionOne<br>project_domain_name = Default<br>project_name = service<br>auth_type = password<br>user_domain_name = Default<br>auth_url = http://controller:5000/v3<br>username = placement<br>password = 000000<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">service nova-compute restart<br></code></pre></td></tr></table></figure><p><strong>controller</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">. admin-openrc<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack compute service list --service nova-compute<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">su -s /bin/sh -c <span class="hljs-string">&quot;nova-manage cell_v2 discover_hosts --verbose&quot;</span> nova<br></code></pre></td></tr></table></figure><p>验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack compute service list<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack catalog list<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack image list<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">nova-status upgrade check<br></code></pre></td></tr></table></figure><h3 id="9、安装neutron"><a href="#9、安装neutron" class="headerlink" title="9、安装neutron"></a>9、安装neutron</h3><p><strong>controller</strong></p><p>创建数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">mysql<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">CREATE DATABASE neutron;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">GRANT ALL PRIVILEGES ON neutron.* TO <span class="hljs-string">&#x27;neutron&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>  IDENTIFIED BY <span class="hljs-string">&#x27;000000&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">GRANT ALL PRIVILEGES ON neutron.* TO <span class="hljs-string">&#x27;neutron&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;000000&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">. admin-openrc<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack user create --domain default --password-prompt neutron<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack role add --project service --user neutron admin<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack service create --name neutron --description <span class="hljs-string">&quot;OpenStack Networking&quot;</span> network<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack endpoint create --region RegionOne network public http://controller:9696<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack endpoint create --region RegionOne network internal http://controller:9696<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack endpoint create --region RegionOne network admin http://controller:9696<br></code></pre></td></tr></table></figure><p>安装并配置相关软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Bash">apt install neutron-server neutron-plugin-ml2 \<br>  neutron-linuxbridge-agent neutron-l3-agent neutron-dhcp-agent \<br>  neutron-metadata-agent -y<br></code></pre></td></tr></table></figure><p>配置服务器组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">vi /etc/neutron/neutron.conf<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 修改内容</span><br>[DEFAULT]<br>core_plugin = ml2<br>service_plugins = router<br>allow_overlapping_ips = <span class="hljs-literal">true</span><br>transport_url = rabbit://openstack:000000@controller<br>auth_strategy = keystone<br>notify_nova_on_port_status_changes = <span class="hljs-literal">true</span><br>notify_nova_on_port_data_changes = <span class="hljs-literal">true</span><br><br>[database]<br>connection = mysql+pymysql://neutron:000000@controller/neutron<br><br>[keystone_authtoken]<br>www_authenticate_uri = http://controller:5000<br>auth_url = http://controller:5000<br>memcached_servers = controller:11211<br>auth_type = password<br>project_domain_name = default<br>user_domain_name = default<br>project_name = service<br>username = neutron<br>password = 000000<br><br>[nova]<br>auth_url = http://controller:5000<br>auth_type = password<br>project_domain_name = default<br>user_domain_name = default<br>region_name = RegionOne<br>project_name = service<br>username = nova<br>password = 000000<br><br>[oslo_concurrency]<br>lock_path = /var/lib/neutron/tmp<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">vi /etc/neutron/plugins/ml2/ml2_conf.ini<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 修改内容</span><br>[ml2]<br>type_drivers = flat,vlan,vxlan<br>tenant_network_types = flat<br>mechanism_drivers = linuxbridge,l2population<br>extension_drivers = port_security<br><br>[ml2_type_flat]<br>flat_networks = provider<br><br>[ml2_type_vxlan]<br>vni_ranges = 1:1000<br><br>[securitygroup]<br>enable_ipset = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">vi /etc/neutron/plugins/ml2/linuxbridge_agent.ini<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 修改内容</span><br>[linux_bridge]<br>physical_interface_mappings = provider:enxf8e43b63eb2f<br><br>[vxlan]<br>enable_vxlan = <span class="hljs-literal">false</span><br>local_ip = 10.100.192.79<br>l2_population = <span class="hljs-literal">true</span><br><br>[securitygroup]<br>enable_security_group = <span class="hljs-literal">true</span><br>firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">vi /etc/neutron/l3_agent.ini<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 修改内容</span><br>[DEFAULT]<br>interface_driver = linuxbridge<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">vi /etc/neutron/dhcp_agent.ini<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 修改内容</span><br>[DEFAULT]<br>interface_driver = linuxbridge<br>dhcp_driver = neutron.agent.linux.dhcp.Dnsmasq<br>enable_isolated_metadata = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">vi /etc/neutron/metadata_agent.ini<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 修改内容</span><br>[DEFAULT]<br>nova_metadata_host = controller<br>metadata_proxy_shared_secret = 000000<br></code></pre></td></tr></table></figure><p>配置Compute 服务以使用Networking 服务</p><p>必须安装 Nova 计算服务才能完成此步骤。</p><p>编辑<code>/etc/nova/nova.conf</code>文件并执行以下操作：</p><p>在该[neutron]部分中，配置访问参数，启用元数据代理，并配置密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">vi /etc/nova/nova.conf<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 修改内容</span><br><br>[neutron]<br>auth_url = http://controller:5000<br>auth_type = password<br>project_domain_name = default<br>user_domain_name = default<br>region_name = RegionOne<br>project_name = service<br>username = neutron<br>password = 000000<br>service_metadata_proxy = <span class="hljs-literal">true</span><br>metadata_proxy_shared_secret = 000000<br></code></pre></td></tr></table></figure><p>向数据库中导入neutron的数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">su -s /bin/sh -c <span class="hljs-string">&quot;neutron-db-manage --config-file /etc/neutron/neutron.conf \</span><br><span class="hljs-string">--config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head&quot;</span> neutron<br></code></pre></td></tr></table></figure><p>由于脚本需要完整的服务器和插件配置文件，因此 Networking 的数据库填充发生在</p><p>重启计算 API 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">service nova-api restart<br></code></pre></td></tr></table></figure><p>重新启动网络服务。<br>对于两个网络选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">service neutron-server restart<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">service neutron-linuxbridge-agent restart<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">service neutron-dhcp-agent restart<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">service neutron-metadata-agent restart<br></code></pre></td></tr></table></figure><p>对于网络选项 2，还要重新启动第 3 层服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">service neutron-l3-agent restart<br></code></pre></td></tr></table></figure><p>执行命令查看neutron安装是否成功 -无结果，没有成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack network agent list<br></code></pre></td></tr></table></figure><p><strong>compute1(OpenEuler X86)</strong></p><ol><li>安装软件包</li></ol> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf install openstack-neutron-linuxbridge ebtables ipset -y<br></code></pre></td></tr></table></figure><ol start="2"><li>配置Neutron</li></ol><p>修改<code>/etc/neutron/neutron.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">[DEFAULT]<br>transport_url = rabbit://openstack:000000@controller<br>auth_strategy = keystone<br><br>[keystone_authtoken]<br>www_authenticate_uri = http://controller:5000<br>auth_url = http://controller:5000<br>memcached_servers = controller:11211<br>auth_type = password<br>project_domain_name = Default<br>user_domain_name = Default<br>project_name = service<br>username = neutron<br>password = 000000<br><br>[oslo_concurrency]<br>lock_path = /var/lib/neutron/tmp<br></code></pre></td></tr></table></figure><p>修改 <code>/etc/neutron/plugins/ml2/linuxbridge_agent.ini</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[linux_bridge]<br>physical_interface_mappings = provider:ens3<br><br>[vxlan]<br>enable_vxlan = <span class="hljs-literal">true</span><br>local_ip = 10.12.193.53<br>l2_population = <span class="hljs-literal">true</span><br><br>[securitygroup]<br>enable_security_group = <span class="hljs-literal">true</span><br>firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver<br></code></pre></td></tr></table></figure><p>配置nova compute服务使用neutron，修改<code>/etc/nova/nova.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[neutron]<br>auth_url = http://controller:5000<br>auth_type = password<br>project_domain_name = default<br>user_domain_name = default<br>region_name = RegionOne<br>project_name = service<br>username = neutron<br>password = 000000<br></code></pre></td></tr></table></figure><p>重启nova-compute服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart openstack-nova-compute.service<br></code></pre></td></tr></table></figure><p>启动Neutron linuxbridge agent服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> neutron-linuxbridge-agent<br>systemctl start neutron-linuxbridge-agent<br></code></pre></td></tr></table></figure><p><strong>compute2</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">apt install neutron-linuxbridge-agent -y<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">vim /etc/neutron/neutron.conf<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 修改内容</span><br>[DEFAULT]<br>core_plugin = ml2<br>transport_url = rabbit://openstack:000000@controller<br>auth_strategy = keystone<br><br>[keystone_authtoken]<br>www_authenticate_uri = http://controller:5000<br>auth_url = http://controller:5000<br>memcached_servers = controller:11211<br>auth_type = password<br>project_domain_name = default<br>user_domain_name = default<br>project_name = service<br>username = neutron<br>password = 000000<br><br>[oslo_concurrency]<br>lock_path = /var/lib/neutron/tmp<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">vi /etc/neutron/plugins/ml2/linuxbridge_agent.ini<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 修改内容</span><br>[linux_bridge]<br>physical_interface_mappings = provider:enx00e04c680218<br><br>[vxlan]<br>enable_vxlan = <span class="hljs-literal">false</span><br>local_ip = 10.100.192.94<br>l2_population = <span class="hljs-literal">true</span><br><br>[securitygroup]<br>enable_security_group = <span class="hljs-literal">true</span><br>firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">vi /etc/nova/nova.conf<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 修改内容</span><br>[neutron]<br>auth_url = http://controller:5000<br>auth_type = password<br>project_domain_name = default<br>user_domain_name = default<br>region_name = RegionOne<br>project_name = service<br>username = neutron<br>password = 000000<br></code></pre></td></tr></table></figure><p>重启计算服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">service nova-compute restart<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">service neutron-linuxbridge-agent restart<br></code></pre></td></tr></table></figure><p>验证</p><p><strong>controller</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">. admin-openrc<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack network agent list<br></code></pre></td></tr></table></figure><h3 id="10、安装dashboard"><a href="#10、安装dashboard" class="headerlink" title="10、安装dashboard"></a>10、安装dashboard</h3><p>安装并配置相关软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">apt install openstack-dashboard -y<br></code></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">vi /etc/openstack-dashboard/local_settings.py<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 搜索&#x27;OPENSTACK_HOST&#x27;并修改如下</span><br>OPENSTACK_HOST = <span class="hljs-string">&quot;10.100.192.92&quot;</span><br><br><span class="hljs-comment"># 搜索&#x27;LOCATION&#x27;并修改如下</span><br><span class="hljs-string">&#x27;LOCATION&#x27;</span>: <span class="hljs-string">&#x27;controller:11211&#x27;</span>,<br><br><span class="hljs-comment"># 搜索&#x27;TIME_ZONE&#x27;并修改如下 </span><br>TIME_ZONE = <span class="hljs-string">&quot;Asia/Shanghai&quot;</span><br><br>OPENSTACK_KEYSTONE_URL = <span class="hljs-string">&quot;http://%s:5000/v3&quot;</span> % OPENSTACK_HOST<br><br>OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = True<br>OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = <span class="hljs-string">&quot;Default&quot;</span><br>OPENSTACK_KEYSTONE_DEFAULT_ROLE = <span class="hljs-string">&quot;user&quot;</span><br>SESSION_ENGINE = <span class="hljs-string">&#x27;django.contrib.sessions.backends.file&#x27;</span><br>OPENSTACK_API_VERSIONS = &#123;<br>    <span class="hljs-string">&quot;identity&quot;</span>: 3,<br>    <span class="hljs-string">&quot;image&quot;</span>: 2,<br>    <span class="hljs-string">&quot;volume&quot;</span>: 3,<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">systemctl reload apache2.service<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">service apache2 restart<br></code></pre></td></tr></table></figure><h3 id="11、-创建实例"><a href="#11、-创建实例" class="headerlink" title="11、 创建实例"></a>11、 创建实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">source</span> admin-openrc<br></code></pre></td></tr></table></figure><p>创建一个虚拟机类型：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack flavor create --<span class="hljs-built_in">id</span> 0 --vcpus 1 --ram 64 --disk 1 m1.nano<br></code></pre></td></tr></table></figure><p>ssh远程登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">. demo-openrc<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">ssh-keygen -q -N <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><ul><li><code>-q</code> 选项表示静默模式，即在生成密钥对的过程中不会输出任何提示信息或警告。</li><li><code>-N</code> 选项后面可以跟一个密码作为参数。该密码将用于保护生成的私钥文件。如果不指定 <code>-N</code> 参数，则私钥文件将不受密码保护。</li></ul><p>创建秘钥对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack keypair create --public-key ~/.ssh/id_rsa.pub mykey<br></code></pre></td></tr></table></figure><p>查看秘钥对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack keypair list<br></code></pre></td></tr></table></figure><p>创建类型为<code>provider</code>，名字为<code>public</code>的网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">source</span> admin-openrc<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack network create  --share --external \<br>  --provider-physical-network provider \<br>  --provider-network-type flat provider<br></code></pre></td></tr></table></figure><p>在<code>public</code>上创建一个子网<code>public_net</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack subnet create --network provider \<br>  --allocation-pool start=10.100.192.50,end=10.100.192.100 \<br>  --dns-nameserver 8.8.8.8 --gateway 10.100.192.1 \<br>  --subnet-range 10.100.192.0/24 provider<br></code></pre></td></tr></table></figure><p>添加安全组规则，允许ping和ssh到虚拟机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">source</span> demo-openrc<br></code></pre></td></tr></table></figure><p>添加icmp协议</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack security group rule create --proto icmp default<br></code></pre></td></tr></table></figure><p>添加tcp协议</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack security group rule create --proto tcp --dst-port 22 default<br></code></pre></td></tr></table></figure><p>创建内部网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack network create selfservice<br></code></pre></td></tr></table></figure><p>创建内部网络子网</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack subnet create --network selfservice \<br>  --dns-nameserver 192.168.3.1 --gateway 192.168.10.1 \<br>  --subnet-range 192.168.10.0/24 selfservice<br></code></pre></td></tr></table></figure><p>创建实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">openstack server create --flavor m1.nano --image cirros --nic net-id=3d4fdcc0-25a1-49e8-8f11-4b20bd1fe52e --security-group default vm<br></code></pre></td></tr></table></figure><p>修改实例的 Mac 地址并查看 ID 地址的 Port ID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">neutron port-list<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@controller:~<span class="hljs-comment"># neutron port-list</span><br>neutron CLI is deprecated and will be removed <span class="hljs-keyword">in</span> the Z cycle. Use openstack CLI instead.<br>+--------------------------------------+------+----------------------------------+-------------------+--------------------------------------------------------------------------------------+<br>| <span class="hljs-built_in">id</span>                                   | name | tenant_id                        | mac_address       | fixed_ips                                                                            |<br>+--------------------------------------+------+----------------------------------+-------------------+--------------------------------------------------------------------------------------+<br>| 3a9268d0-56e5-4d30-b81c-6692c50f7648 |      | b9f9c436ebb04a42a9d764e0eab068b5 | fa:16:3e:74:4f:b7 | &#123;<span class="hljs-string">&quot;subnet_id&quot;</span>: <span class="hljs-string">&quot;2326cbde-c3d2-4982-8b00-c29bfe8b11b1&quot;</span>, <span class="hljs-string">&quot;ip_address&quot;</span>: <span class="hljs-string">&quot;10.100.192.88&quot;</span>&#125; |<br>| 638e755f-5bb9-404a-ad7a-8e75ee0c92b9 |      | b9f9c436ebb04a42a9d764e0eab068b5 | fa:16:3e:ff:a0:2e | &#123;<span class="hljs-string">&quot;subnet_id&quot;</span>: <span class="hljs-string">&quot;2326cbde-c3d2-4982-8b00-c29bfe8b11b1&quot;</span>, <span class="hljs-string">&quot;ip_address&quot;</span>: <span class="hljs-string">&quot;10.100.192.50&quot;</span>&#125; |<br>| bfc91685-c9ee-41f9-af5a-d725a944d1b0 |      | b9f9c436ebb04a42a9d764e0eab068b5 | e0:be:03:88:54:e8 | &#123;<span class="hljs-string">&quot;subnet_id&quot;</span>: <span class="hljs-string">&quot;2326cbde-c3d2-4982-8b00-c29bfe8b11b1&quot;</span>, <span class="hljs-string">&quot;ip_address&quot;</span>: <span class="hljs-string">&quot;10.100.192.53&quot;</span>&#125; |<br>| cb90cb52-e95a-4c6e-8e9e-c9afaa700b28 |      | b9f9c436ebb04a42a9d764e0eab068b5 | fa:16:3e:be:42:cf | &#123;<span class="hljs-string">&quot;subnet_id&quot;</span>: <span class="hljs-string">&quot;2326cbde-c3d2-4982-8b00-c29bfe8b11b1&quot;</span>, <span class="hljs-string">&quot;ip_address&quot;</span>: <span class="hljs-string">&quot;10.100.192.96&quot;</span>&#125; |<br>+--------------------------------------+------+----------------------------------+-------------------+--------------------------------------------------------------------------------------+<br></code></pre></td></tr></table></figure><p>查看虚拟机 ID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nova list<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@controller:~<span class="hljs-comment"># nova list</span><br>+--------------------------------------+---------------+--------+------------+-------------+----------------------+<br>| ID                                   | Name          | Status | Task State | Power State | Networks             |<br>+--------------------------------------+---------------+--------+------------+-------------+----------------------+<br>| d5257795-5ff2-4cce-b430-e7a2b29a62fe | openeuler2209 | ACTIVE | -          | Running     | public=10.100.192.96 |<br>| 8381931e-5114-442d-ba28-a693516f1c4c | vm10          | ACTIVE | -          | Running     | public=10.100.192.53 |<br>| 714588ac-862d-495a-aef1-9d36301fcae7 | vm11          | ACTIVE | -          | Running     | public=10.100.192.88 |<br>+--------------------------------------+---------------+--------+------------+-------------+----------------------+<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nova interface-list <span class="hljs-string">&quot;ID&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@controller:~<span class="hljs-comment"># nova interface-list d5257795-5ff2-4cce-b430-e7a2b29a62fe</span><br>+------------+--------------------------------------+--------------------------------------+---------------+-------------------+-----+<br>| Port State | Port ID                              | Net ID                               | IP addresses  | MAC Addr          | Tag |<br>+------------+--------------------------------------+--------------------------------------+---------------+-------------------+-----+<br>| BUILD      | cb90cb52-e95a-4c6e-8e9e-c9afaa700b28 | 8d3c368e-9b36-4f73-91bc-b0b2d3b6cd14 | 10.100.192.96 | fa:16:3e:be:42:cf | -   |<br>+------------+--------------------------------------+--------------------------------------+---------------+-------------------+-----+<br></code></pre></td></tr></table></figure><p>解绑当前 IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nova interface-detach <span class="hljs-string">&quot;ID&quot;</span> <span class="hljs-string">&quot;Port ID&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@controller:~<span class="hljs-comment"># nova interface-detach 8381931e-5114-442d-ba28-a693516f1c4c bfc91685-c9ee-41f9-af5a-d725a944d1b0</span><br></code></pre></td></tr></table></figure><p>查看网络 Net-list 和子网 Subnet-list</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">neutron net-list<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">neutron subnet-list<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@controller:~<span class="hljs-comment"># neutron subnet-list</span><br>neutron CLI is deprecated and will be removed <span class="hljs-keyword">in</span> the Z cycle. Use openstack CLI instead.<br>+--------------------------------------+---------------+----------------------------------+-----------------+-----------------------------------------------------+<br>| <span class="hljs-built_in">id</span>                                   | name          | tenant_id                        | cidr            | allocation_pools                                    |<br>+--------------------------------------+---------------+----------------------------------+-----------------+-----------------------------------------------------+<br>| 2326cbde-c3d2-4982-8b00-c29bfe8b11b1 | public_subnet | b9f9c436ebb04a42a9d764e0eab068b5 | 10.100.192.0/24 | &#123;<span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;10.100.192.50&quot;</span>, <span class="hljs-string">&quot;end&quot;</span>: <span class="hljs-string">&quot;10.100.192.100&quot;</span>&#125; |<br>+--------------------------------------+---------------+----------------------------------+-----------------+-----------------------------------------------------+<br></code></pre></td></tr></table></figure><p>创建一个 Port 指定 MAC 地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">neutron port-create --fixed-ip subnet_id=2326cbde-c3d2-4982-8b00-c29bfe8b11b1(subnet),ip_address=10.100.192.96 --mac-address e0:be:03:88:54:e9 8d3c368e-9b36-4f73-91bc-b0b2d3b6cd14(net)<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">+-----------------------+--------------------------------------------------------------------------------------+<br>| Field                 | Value                                                                                |<br>+-----------------------+--------------------------------------------------------------------------------------+<br>| admin_state_up        | True                                                                                 |<br>| allowed_address_pairs |                                                                                      |<br>| binding:host_id       |                                                                                      |<br>| binding:profile       | &#123;&#125;                                                                                   |<br>| binding:vif_details   | &#123;&#125;                                                                                   |<br>| binding:vif_type      | unbound                                                                              |<br>| binding:vnic_type     | normal                                                                               |<br>| created_at            | 2023-08-10T05:38:47Z                                                                 |<br>| description           |                                                                                      |<br>| device_id             |                                                                                      |<br>| device_owner          |                                                                                      |<br>| extra_dhcp_opts       |                                                                                      |<br>| fixed_ips             | &#123;<span class="hljs-string">&quot;subnet_id&quot;</span>: <span class="hljs-string">&quot;2326cbde-c3d2-4982-8b00-c29bfe8b11b1&quot;</span>, <span class="hljs-string">&quot;ip_address&quot;</span>: <span class="hljs-string">&quot;10.100.192.96&quot;</span>&#125; |<br>| <span class="hljs-built_in">id</span>                    | 66365266-0487-4898-a39c-25640fd6b5dc                                                 |<br>| mac_address           | e0:be:03:88:54:e9                                                                    |<br>| name                  |                                                                                      |<br>| network_id            | 8d3c368e-9b36-4f73-91bc-b0b2d3b6cd14                                                 |<br>| port_security_enabled | True                                                                                 |<br>| project_id            | b9f9c436ebb04a42a9d764e0eab068b5                                                     |<br>| revision_number       | 1                                                                                    |<br>| security_groups       | e852881b-50fb-4648-8e44-35c2f6d12af3                                                 |<br>| status                | DOWN                                                                                 |<br>| tags                  |                                                                                      |<br>| tenant_id             | b9f9c436ebb04a42a9d764e0eab068b5                                                     |<br>| updated_at            | 2023-08-10T05:38:48Z                                                                 |<br>+-----------------------+--------------------------------------------------------------------------------------+<br></code></pre></td></tr></table></figure><p>把 Port Attach 到虚拟机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nova interface-attach d5257795-5ff2-4cce-b430-e7a2b29a62fe --port-id 66365266-0487-4898-a39c-25640fd6b5dc<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">+------------+--------------------------------------+<br>| Property   | Value                                |<br>+------------+--------------------------------------+<br>| ip_address | 10.100.192.96                        |<br>| mac_addr   | e0:be:03:88:54:e9                    |<br>| net_id     | 8d3c368e-9b36-4f73-91bc-b0b2d3b6cd14 |<br>| port_id    | 66365266-0487-4898-a39c-25640fd6b5dc |<br>| port_state | DOWN                                 |<br>| tag        | -                                    |<br>+------------+--------------------------------------+<br></code></pre></td></tr></table></figure><p>Controller</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@controller:~<span class="hljs-comment"># ifconfig </span><br>brq8d3c368e-9b: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 10.100.192.92  netmask 255.255.254.0  broadcast 10.100.193.255<br>        ether f8:e4:3b:63:eb:2f  txqueuelen 1000  (Ethernet)<br>        RX packets 5915428  bytes 6997533910 (6.9 GB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 5405890  bytes 10408992759 (10.4 GB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br>docker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500<br>        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255<br>        ether 02:42:1d:8e:3c:d1  txqueuelen 0  (Ethernet)<br>        RX packets 0  bytes 0 (0.0 B)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 0  bytes 0 (0.0 B)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br>enp2s0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 10.100.192.79  netmask 255.255.254.0  broadcast 10.100.193.255<br>        inet6 fe80::2bc8:6996:aabc:b44  prefixlen 64  scopeid 0x20&lt;<span class="hljs-built_in">link</span>&gt;<br>        ether e0:be:03:88:ee:cb  txqueuelen 1000  (Ethernet)<br>        RX packets 4983510  bytes 1342995804 (1.3 GB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 432797  bytes 347422676 (347.4 MB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br>enxf8e43b63eb2f: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 10.100.192.92  netmask 255.255.254.0  broadcast 10.100.193.255<br>        inet6 fe80::759b:702c:b49a:39ae  prefixlen 64  scopeid 0x20&lt;<span class="hljs-built_in">link</span>&gt;<br>        ether f8:e4:3b:63:eb:2f  txqueuelen 1000  (Ethernet)<br>        RX packets 2513156  bytes 2952978665 (2.9 GB)<br>        RX errors 0  dropped 917  overruns 0  frame 0<br>        TX packets 1819723  bytes 1557298439 (1.5 GB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br>lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536<br>        inet 127.0.0.1  netmask 255.0.0.0<br>        loop  txqueuelen 1000  (Local Loopback)<br>        RX packets 16803159  bytes 10055108231 (10.0 GB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 16803159  bytes 10055108231 (10.0 GB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br>tap638e755f-5b: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        ether d2:a8:e4:03:71:4e  txqueuelen 1000  (Ethernet)<br>        RX packets 129  bytes 10944 (10.9 KB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 62611  bytes 4787883 (4.7 MB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br></code></pre></td></tr></table></figure><p>Compute</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@compute2:~<span class="hljs-comment"># ifconfig </span><br>brq8d3c368e-9b: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 10.100.192.93  netmask 255.255.254.0  broadcast 10.100.193.255<br>        ether 00:e0:4c:68:02:18  txqueuelen 1000  (Ethernet)<br>        RX packets 1710244  bytes 1636482655 (1.6 GB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 1325319  bytes 251080446 (251.0 MB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br>eno1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 10.100.192.94  netmask 255.255.254.0  broadcast 10.100.193.255<br>        inet6 fe80::1dfe:2a01:4237:a169  prefixlen 64  scopeid 0x20&lt;<span class="hljs-built_in">link</span>&gt;<br>        ether 80:e8:2c:ca:49:7e  txqueuelen 1000  (Ethernet)<br>        RX packets 492369  bytes 38557253 (38.5 MB)<br>        RX errors 0  dropped 5  overruns 0  frame 0<br>        TX packets 7092  bytes 647907 (647.9 KB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br>        device interrupt 16  memory 0xf1100000-f1120000  <br><br>enx00e04c680218: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 10.100.192.93  netmask 255.255.254.0  broadcast 10.100.193.255<br>        inet6 fe80::d7c4:b50:8ffa:b171  prefixlen 64  scopeid 0x20&lt;<span class="hljs-built_in">link</span>&gt;<br>        ether 00:e0:4c:68:02:18  txqueuelen 1000  (Ethernet)<br>        RX packets 1869249  bytes 1668190374 (1.6 GB)<br>        RX errors 0  dropped 3135  overruns 0  frame 0<br>        TX packets 1462894  bytes 240742887 (240.7 MB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br>lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536<br>        inet 127.0.0.1  netmask 255.0.0.0<br>        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;<br>        loop  txqueuelen 1000  (Local Loopback)<br>        RX packets 595201  bytes 46392915 (46.3 MB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 595201  bytes 46392915 (46.3 MB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br>tap3a9268d0-56: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet6 fe80::fc16:3eff:fe74:4fb7  prefixlen 64  scopeid 0x20&lt;<span class="hljs-built_in">link</span>&gt;<br>        ether fe:16:3e:74:4f:b7  txqueuelen 1000  (Ethernet)<br>        RX packets 1186  bytes 102252 (102.2 KB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 233618  bytes 14976194 (14.9 MB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br>tap66365266-04: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet6 fe80::fcbe:3ff:fe88:54e9  prefixlen 64  scopeid 0x20&lt;<span class="hljs-built_in">link</span>&gt;<br>        ether fe:be:03:88:54:e9  txqueuelen 1000  (Ethernet)<br>        RX packets 3737  bytes 271987 (271.9 KB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 38787  bytes 33210607 (33.2 MB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br>virbr0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500<br>        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255<br>        ether 52:54:00:5c:40:e6  txqueuelen 1000  (Ethernet)<br>        RX packets 0  bytes 0 (0.0 B)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 0  bytes 0 (0.0 B)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br></code></pre></td></tr></table></figure><h3 id="Bug-总结"><a href="#Bug-总结" class="headerlink" title="Bug 总结"></a>Bug 总结</h3><p><code>subprocess installed post-installation script returned error exit status 10</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">rm</span> /var/lib/dpkg/info/r-base-core*<br>sudo dpkg --configure -D 777 r-base-core<br>sudo apt -f install<br></code></pre></td></tr></table></figure><p><code>openstack通过dashboard云主机控制台访问时异常</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/nova/nova.conf<br><br><br>[vnc] <br>enabled = True <br>vncserver_listen = 0.0.0.0 <br>vncserver_proxyclient_address = <span class="hljs-variable">$my_ip</span> <br>novncproxy_base_url = http://controller:6080/vnc_auto.html<br><br><span class="hljs-comment"># controller 修改为具体的 IP</span><br></code></pre></td></tr></table></figure><p><code>Openstack Nova Failed to allocate network(s)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/nova/nova.conf<br><br><span class="hljs-comment">#Fail instance boot if vif plugging fails  </span><br>vif_plugging_is_fatal = False  <br><br><span class="hljs-comment">#Number of seconds to wait for neutron vif  </span><br><span class="hljs-comment">#plugging events to arrive before continuing or failing  </span><br><span class="hljs-comment">#(see vif_plugging_is_fatal). If this is set to zero and  </span><br><span class="hljs-comment">#vif_plugging_is_fatal is False, events should not be expected to arrive at all.  </span><br>vif_plugging_timeout = 0  <br></code></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/hhsh/p/16414025.html#openstack_125">https://www.cnblogs.com/hhsh/p/16414025.html#openstack_125</a></p><p><a href="https://blog.csdn.net/w975121565/article/details/127460218">https://blog.csdn.net/w975121565/article/details/127460218</a></p><p><a href="https://blog.csdn.net/zuopiezia/article/details/118972094">https://blog.csdn.net/zuopiezia/article/details/118972094</a></p><p><a href="https://www.cnblogs.com/omgasw/p/12023433.html">https://www.cnblogs.com/omgasw/p/12023433.html</a></p><p><a href="https://blog.csdn.net/weiqing1995/article/details/81908023">https://blog.csdn.net/weiqing1995/article/details/81908023</a></p>]]></content>
    
    
    <categories>
      
      <category>OpenStack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IasS、PasS、SasS 云服务区别</title>
    <link href="/2023/05/31/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    <url>/2023/05/31/%E4%BA%91%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="1-什么是云计算？"><a href="#1-什么是云计算？" class="headerlink" title="1. 什么是云计算？"></a>1. 什么是云计算？</h2><h3 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h3><p><a href="https://zh.wikipedia.org/wiki/%E9%9B%B2%E7%AB%AF%E9%81%8B%E7%AE%97">云计算</a>（Cloud Computing），是一种基于互联网的计算方式，通过这种方式，共享的软硬件资源和信息可以按需求提供给计算机各种终端和其他设备，使用服务商提供的电脑基建作计算和资源。云计算能够体验到每秒10万亿次的运算能力，拥有强大的算力可以模拟核爆、预测气候变化和市场发展趋势。用户通过电脑、手机、笔记本等方式接入数据中心，按自己的需求进行运算。同时数据中心根据用户需求，从资源池中为其动态分配计算资源。换句话说，云计算是以前服务器计算的升级版，其主要有扩展性强、廉价、虚拟化、计算能力强等特点。</p><h3 id="1-2-基本特征"><a href="#1-2-基本特征" class="headerlink" title="1.2 基本特征"></a>1.2 基本特征</h3><p>云是网络、互联网的一种比喻说法。互联网上的云计算服务特征和自然界的云、水循环具有一定的相似性，因此云是一个相当贴切的比喻。根据美国国家标准和技术研究院的定义，云计算服务应该具有以下几条特征：</p><ul><li>随需应变自助服务；</li><li>随时随地用任何网络设备访问；</li><li>多人共享资源池；</li><li>快速重新部署灵活度；</li><li>可被监控与量测的服务；<br>一般认为还有如下特征：</li><li>基于虚拟化技术快速部署资源或获得服务；</li><li>减少用户终端的处理负担；</li><li>降低了用户对于IT专业知识的依赖。</li></ul><h2 id="2-服务模式"><a href="#2-服务模式" class="headerlink" title="2. 服务模式"></a>2. 服务模式</h2><p>美国国家标准和技术研究院的云计算定义中明确了三种服务模式：</p><ul><li><p>基础设施即服务（<strong>IaaS</strong>）：消费者使用“基础计算资源”，如处理能力、存储空间、网络组件或中间件。消费者能掌控操作系统、存储空间、已部署的应用程序及网络组件（如防火墙、负载平衡器等），但并不掌控云基础架构。例如：Amazon AWS、Rackspace；</p></li><li><p>平台即服务（<strong>PaaS</strong>）：消费者使用主机操作应用程序。消费者掌控运作应用程序的环境（也拥有主机部分掌控权），但并不掌控操作系统、硬件或运作的网络基础架构。平台通常是应用程序基础架构。例如：Google App Engine；</p></li><li><p>软件即服务（<strong>SaaS</strong>）：消费者使用应用程序，但并不掌控操作系统、硬件或运作的网络基础架构。是一种服务观念的基础，软件服务供应商，以租赁的概念提供客户服务，而非购买，比较常见的模式是提供一组账号密码。例如：Adobe Creative Cloud，Microsoft CRM与 Salesforce.com。</p></li></ul><p><img src="/../image/IaaS_PaaS_SaaS_1.png" alt="IaaS/PaaS/SaaS"></p><p>首先，可以将云计算理解成一栋大楼，而这栋楼又可以分为顶层、中层、底层三大块，如上图所示，可以把 <strong>IaaS</strong>（基础设施）、<strong>PaaS</strong>（平台）、<strong>SaaS</strong>（软件）理解为这栋楼的三大块。基础设施在底层，平台在中层，软件在顶层。</p><p><img src="/../image/IaaS_PaaS_SaaS_2.png" alt="IaaS/PaaS/SaaS"></p><h3 id="IaaS"><a href="#IaaS" class="headerlink" title="IaaS"></a>IaaS</h3><p><a href="https://en.wikipedia.org/wiki/Infrastructure_as_a_service">IaaS</a>是一种云计算服务模型，通过该模型，计算资源由云服务提供商提供。IaaS 供应商提供存储、网络、服务器和虚拟化等，此服务使用户能够摆脱维护本地数据中心&#x2F;数据库的负担。</p><p>举个栗子：如果 A 公司想在办公室或者公司网站上运行一些企业应用，需要去买服务器或高昂的硬件来控制本地应用，才能让业务能够正常运行。但现在可以租用 IaaS 公司提供的场外服务器、存储和网络硬件，这样便可以大大节省服务器的维护成本和办公场地。</p><h3 id="PaaS"><a href="#PaaS" class="headerlink" title="PaaS"></a>PaaS</h3><p><a href="https://en.wikipedia.org/wiki/Platform_as_a_service">PssS</a>允许客户配置、实例化、运行和管理由计算平台和一个或多个应用程序组成的模块化捆绑包，无需构建和维护通常与开发和启动应用程序相关的基础架构，并允许开发人员创建、开发和打包此类软件包。</p><p>举个栗子：如果 B 公司在网上提供各种开发和分发应用的解决方案，比如虚拟服务器、操作系统、网页应用管理、应用设计、应用虚拟主机、存储、安全以及应用开发协同工具等。A 公司接洽评估后，觉得可以节省在硬件上的费用，同时也能让分散的工作室之间的协同合作变得更加容易。</p><h3 id="SaaS"><a href="#SaaS" class="headerlink" title="SaaS"></a>SaaS</h3><p><a href="https://en.wikipedia.org/wiki/Software_as_a_service">SaaS</a>应用程序通常由 Web 浏览器的用户访问，因此成为许多业务应用程序的通用交付模型，包括办公软件、消息传递软件、工资单处理软件、DBMS 软件、管理软件、CAD 软件、开发软件、游戏化、虚拟化、会计、协作、客户关系管理（CRM）、管理信息系统（MIS）、企业资源规划（ERP）、发票、现场服务管理、人力资源管理（HRM）、人才招聘、学习管理系统、内容管理（CM）、地理信息系统（GIS）和服务台管理等。</p><p>举个栗子：生活中，几乎每天都在接触 SaaS 云服务，比如：我们平时使用的苹果手机服务、网页中的一些云服务等。</p><h3 id="IaaS-和-PaaS-对比"><a href="#IaaS-和-PaaS-对比" class="headerlink" title="IaaS 和 PaaS 对比"></a>IaaS 和 PaaS 对比</h3><p>IaaS 主要作用是提供虚拟机或者其他资源作为服务提供给用户，PaaS 主要作用是将一个开发和运行平台作为服务提供给用户。</p><ol><li><p>开发环境<br>IaaS 方面主要还是沿用之前比较熟悉那套开发环境，但因为之前那套开发环境在和云的整合方面比较欠缺，使用起来不是很方便。PaaS 方面基本都会给开发者提供一整套包括 IDE 在内的开发和测试环境。</p></li><li><p>支持应用<br>因为 IaaS 主要是提供虚拟机，而且普通的虚拟机能支持多种操作系统，所以IaaS支持的应用的范围是比较广泛。但如果要让一个应用能跑在某个 PaaS 平台不是一件轻松的事，因为不仅需要确保这个应用是基于这个平台所支持的语言，而且也要确保这个应用只能调用这个平台所支持的 API，如果这个应用调用了平台所不支持的 API，那么就需要对这个应用进行修改。</p></li><li><p>整合率和经济性<br>PaaS 平台整合率是非常高，比如 PaaS 的代表 Google App Engine 能在一台服务器上承载成千上万的应用，而普通的IaaS平台的整合率最多也不会超过 100，而且普遍在 10 左右，使得 IaaS 的经济性不如 PaaS。</p></li><li><p>开放标准<br>虽然很多 IaaS 平台都存在一定的私有功能，但是由于 OVF 等协议的存在，使得 IaaS 在跨平台和避免被供应商锁定这两面是稳步前进的。而 PaaS 平台的情况则不容乐观，因为不论是 Google 的 App Engine，还是Salesforce 的 Force.com 都存在一定的私有 API。</p></li><li><p>可伸缩性<br>PaaS 平台会自动调整资源来帮助运行于其上的应用更好地应对突发流量。而 IaaS 平台则需要开发人员手动对资源进行调整才能应对。</p></li><li><p>计费和监督<br>PaaS 平台在计费和监管这两方面不仅达到了 IaaS 平台所能企及的操作系统层面，比如，CPU 和内存的使用量等，而且还能做到应用层面，比如，应用的反应时间（Response Time）或者应用所消耗的事务多少等，这将提高计费和管理的精确性。</p></li><li><p>学习难度<br>IaaS 上开发和管理应用和现有的方式比较接近，而 PaaS 上开发则有可能需要学一门新的语言或者新的框架，所以IaaS学习难度更低。</p></li></ol><h2 id="部署模型"><a href="#部署模型" class="headerlink" title="部署模型"></a>部署模型</h2><p>美国国家标准和技术研究院的云计算定义中也涉及了关于云计算的部署模型：</p><ul><li>公用云</li></ul><p>简而言之，公用云（Public Cloud）服务可透过网络及第三方服务供应者，开放给客户使用，“公用”一词并不一定代表“免费”，但也可能代表免费或相当廉价，公用云并不表示用户资料可供任何人查看，公用云供应者通常会对用户实施使用存取控制机制，公用云作为解决方案，既有弹性，又具备成本效益。</p><ul><li>私有云</li></ul><p>私有云（Private Cloud）具备许多公用云环境的优点，例如弹性、适合提供服务，两者差别在于私有云服务中，资料与程序皆在组织内管理，且与公用云服务不同，不会受到网络带宽、安全疑虑、法规限制影响；此外，私有云服务让供应者及用户更能掌控云基础架构、改善安全与弹性，因为用户与网络都受到特殊限制。</p><ul><li>社群云</li></ul><p>社群云（Community Cloud）由众多利益相仿的组织掌控及使用，例如特定安全要求、共同宗旨等。社群成员共同使用云资料及应用程序。</p><ul><li>混合云</li></ul><p>混合云（Hybrid Cloud）结合公用云及私有云，这个模式中，用户通常将非企业关键信息外包，并在公用云上处理，但同时掌控企业关键服务及资料。</p><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul><li>IaaS（Infrastructure as a Service）：基础设施即服务</li><li>PaaS（Platform as a Service）：平台即服务</li><li>SaaS（Software as a Service）：软件即服务</li><li>CaaS（Communications as a Service）：通讯即服务</li><li>MaaS（Machine as a Service）：物联网即服务</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zh.wikipedia.org/wiki/%E9%9B%B2%E7%AB%AF%E9%81%8B%E7%AE%97">https://zh.wikipedia.org/wiki/%E9%9B%B2%E7%AB%AF%E9%81%8B%E7%AE%97</a></p><p><a href="https://blog.csdn.net/yipala/article/details/120076350">https://blog.csdn.net/yipala/article/details/120076350</a></p><p><a href="https://www.sohu.com/a/577767035_121369651">https://www.sohu.com/a/577767035_121369651</a></p>]]></content>
    
    
    <categories>
      
      <category>云服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenStack 单机部署 —— DevStack</title>
    <link href="/2023/05/30/OpenStack%20%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2%20%E2%80%94%E2%80%94%20DevStack/"/>
    <url>/2023/05/30/OpenStack%20%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2%20%E2%80%94%E2%80%94%20DevStack/</url>
    
    <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>DevStack 是一系列可扩展的脚本，用于基于 git master 的最新版本快速构建完整的 OpenStack 环境。它以交互方式用作开发环境，并作为大部分 OpenStack 项目功能测试的基础。</p><h2 id="1-更换-pip-源"><a href="#1-更换-pip-源" class="headerlink" title="1. 更换 pip 源"></a>1. 更换 pip 源</h2><p>在用户根目录创建文件夹 <code>.pip</code> ，添加配置文件 <code>pip.conf</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 创建文件夹</span><br><span class="hljs-built_in">cd</span> &amp;&amp; <span class="hljs-built_in">mkdir</span> .pip &amp;&amp; <span class="hljs-built_in">cd</span> .pip<br><span class="hljs-comment"># 创建并编辑配置文件</span><br>sudo vim pip.conf<br></code></pre></td></tr></table></figure><p>pip 源配置如下。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">[global]<br>timeout = 6000<br>index-url = http://mirrors.aliyun.com/pypi/simple/<br>trusted-host = mirrors.aliyun.com<br></code></pre></td></tr></table></figure><h2 id="2-更换-Ubuntu-源"><a href="#2-更换-Ubuntu-源" class="headerlink" title="2. 更换 Ubuntu 源"></a>2. 更换 Ubuntu 源</h2><p>备份源文件，再替换成阿里云的镜像源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 备份</span><br>sudo <span class="hljs-built_in">mv</span> /etc/apt/sources.list /etc/apt/sources.list.bk<br><span class="hljs-comment"># 设置镜像源</span><br>sudo vim /etc/apt/sources.list<br></code></pre></td></tr></table></figure><p>镜像源设置如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><p>更新镜像源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 更新</span><br>sudo apt update<br></code></pre></td></tr></table></figure><h2 id="3-添加用户"><a href="#3-添加用户" class="headerlink" title="3. 添加用户"></a>3. 添加用户</h2><p>DevStack 应该以非 root 用户（但拥有 <code>sudo</code> 权限）执行，手动添加 <code>stack</code> 用户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 添加 stack 用户</span><br>sudo useradd -s /bin/bash -d /opt/stack -m stack<br><span class="hljs-comment"># 授予 stack 用户的主目录权限</span><br>sudo <span class="hljs-built_in">chmod</span> +x /opt/stack<br><span class="hljs-comment"># 授予 sudo 权限</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;stack ALL=(ALL) NOPASSWD: ALL&quot;</span> | sudo <span class="hljs-built_in">tee</span> /etc/sudoers.d/stack<br>sudo -u stack -i<br><span class="hljs-comment"># 以 stack 用户登录</span><br>sudo su - stack<br></code></pre></td></tr></table></figure><h1 id="4-DevStack-部署-OpenStack"><a href="#4-DevStack-部署-OpenStack" class="headerlink" title="4. DevStack 部署 OpenStack"></a>4. DevStack 部署 OpenStack</h1><h3 id="下载DevStack"><a href="#下载DevStack" class="headerlink" title="下载DevStack"></a>下载DevStack</h3><p>建议在 <code>/opt/stack</code>目录下下载 <code>DevStack</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 下载 DevStack</span><br>git <span class="hljs-built_in">clone</span> https://github.com/openstack/devstack<br><span class="hljs-comment"># 进入文件夹</span><br><span class="hljs-built_in">cd</span> devstack<br></code></pre></td></tr></table></figure><h2 id="5-创建配置文件-local-conf"><a href="#5-创建配置文件-local-conf" class="headerlink" title="5. 创建配置文件 local.conf"></a>5. 创建配置文件 <code>local.conf</code></h2><p>在 devstack 的根目录下创建一个带有四个预设密码的 <code>local.conf</code> 文件，这是开始使用 DevStack 所需的最低配置，详细配置见 <a href="https://docs.openstack.org/devstack/latest/">devstack&#x2F;latest</a>。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">[[local|localrc]]<br>// HOST_IP=10.12.97.185<br>// GIT_BASE=https://github.com/<br>ADMIN_PASSWORD=secret<br>DATABASE_PASSWORD=$ADMIN_PASSWORD<br>RABBIT_PASSWORD=$ADMIN_PASSWORD<br>SERVICE_PASSWORD=$ADMIN_PASSWORD<br></code></pre></td></tr></table></figure><ul><li><code>ADMIN_PASSWORD</code>：OpenStack 用户 <code>admin</code> 和 <code>demo</code> 的密码；</li><li><code>DATABASE_PASSWORD</code>：MySQL 管理员用户密码；</li><li><code>RABBIT_PASSWORD</code>：RabbitMQ 密码；</li><li><code>SERVICE_PASSWORD</code>：服务组件和 KeyStone 交互的密码；</li><li><code>GIT_BASE</code>：源代码托管服务器；</li><li><code>HOST_IP</code>：绑定的 IP 地址。</li></ul><h2 id="6-开始安装"><a href="#6-开始安装" class="headerlink" title="6. 开始安装"></a>6. 开始安装</h2><p>执行目录下的脚本开始自动安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 安装</span><br>./stack.sh<br><span class="hljs-comment"># 停止 DevStack</span><br>./unstack.sh<br><span class="hljs-comment"># 停止 DevStack 并删除配置文件等</span><br>./clean.sh<br></code></pre></td></tr></table></figure><p>安装过程中受网速影响比较大，安装了将近2个小时才安装完成。以下是成功安装后的打印信息。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs text">=========================<br>DevStack Component Timing<br> (times are in seconds)  <br>=========================<br>wait_for_service      10<br>async_wait           129<br>osc                  114<br>apt-get              1414<br>test_with_retry        3<br>dbsync                 2<br>pip_install          403<br>apt-get-update         2<br>run_process           21<br>git_timed            3661<br>-------------------------<br>Unaccounted time     814<br>=========================<br>Total runtime        6573<br><br>=================<br> Async summary<br>=================<br> Time spent in the background minus waits: 555 sec<br> Elapsed time: 6573 sec<br> Time if we did everything serially: 7128 sec<br> Speedup:  1.08444<br><br><br>Post-stack database query stats:<br>+------------+-----------+-------+<br>| db         | op        | count |<br>+------------+-----------+-------+<br>| keystone   | SELECT    | 41619 |<br>| keystone   | INSERT    |    93 |<br>| glance     | SELECT    |  1001 |<br>| glance     | CREATE    |    65 |<br>| glance     | INSERT    |   255 |<br>| glance     | SHOW      |     8 |<br>| glance     | UPDATE    |    17 |<br>| glance     | ALTER     |     9 |<br>| glance     | DROP      |     1 |<br>| cinder     | SELECT    |   403 |<br>| cinder     | CREATE    |    74 |<br>| cinder     | SET       |     1 |<br>| cinder     | ALTER     |    21 |<br>| neutron    | SELECT    |  5263 |<br>| neutron    | SHOW      |    35 |<br>| neutron    | CREATE    |   318 |<br>| neutron    | INSERT    |  1310 |<br>| neutron    | UPDATE    |   246 |<br>| neutron    | ALTER     |   150 |<br>| neutron    | DROP      |    52 |<br>| neutron    | DELETE    |    29 |<br>| nova_cell1 | SELECT    |   647 |<br>| nova_cell1 | CREATE    |   211 |<br>| nova_cell0 | SELECT    |   845 |<br>| nova_cell0 | CREATE    |   211 |<br>| nova_cell1 | ALTER     |     3 |<br>| nova_cell1 | SHOW      |    59 |<br>| nova_cell0 | ALTER     |     3 |<br>| nova_cell0 | SHOW      |    59 |<br>| nova_cell1 | INSERT    |     7 |<br>| nova_cell0 | INSERT    |    12 |<br>| placement  | SELECT    |   116 |<br>| placement  | INSERT    |    59 |<br>| placement  | SET       |     3 |<br>| nova_api   | SELECT    |   120 |<br>| placement  | UPDATE    |     3 |<br>| cinder     | INSERT    |     5 |<br>| nova_cell0 | UPDATE    |   194 |<br>| nova_cell1 | UPDATE    |   205 |<br>| cinder     | UPDATE    |    87 |<br>| cinder     | DELETE    |     1 |<br>| nova_cell1 | DELETE    |     1 |<br>| nova_api   | INSERT    |    20 |<br>| nova_api   | SAVEPOINT |    10 |<br>| nova_api   | RELEASE   |    10 |<br>+------------+-----------+-------+<br><br>This is your host IP address: 10.12.97.185<br>This is your host IPv6 address: ::1<br>Horizon is now available at http://10.12.97.185/dashboard<br>Keystone is serving at http://10.12.97.185/identity/<br>The default users are: admin and demo<br>The password: secret<br><br>Services are running under systemd unit files.<br>For more information see: <br>https://docs.openstack.org/devstack/latest/systemd.html<br><br>DevStack Version: 2023.2<br>Change: c424a7a299e37004d318107648bb18e157344985 Merge &quot;Use RDO official CloudSIG mirrors for C9S deployments&quot; 2023-05-29 13:14:36 +0000<br>OS Version: Ubuntu 22.04 jammy<br><br>2023-05-30 09:23:05.918 | stack.sh completed in 6573 seconds.<br></code></pre></td></tr></table></figure><p><img src="/../image/OpenStack%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2.png" alt="OpenStack登录界面"></p><p><img src="/../image/OpenStack%E6%93%8D%E4%BD%9C%E7%95%8C%E9%9D%A2.png" alt="OpenStack操作界面"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>  安装过程极为坎坷，经过换开发机（无公开网络）、换源（无相关软件包）、软件包版本未满足依赖关系等。</p><ol><li><p>更新镜像源时报错。</p><p> <img src="/../image/Ubuntu%E9%95%9C%E5%83%8F%E6%BA%90%E6%97%A0%E5%85%AC%E9%92%A5.png" alt="Ubuntu镜像源无公钥"></p><p> 解决方案为添加对应公钥。</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3B4FE6ACC0B21F32<br></code></pre></td></tr></table></figure></li><li><p>软件包未满足依赖条件。</p><p> <img src="/../image/%E8%BD%AF%E4%BB%B6%E5%8C%85%E6%9C%AA%E6%BB%A1%E8%B6%B3%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB.png" alt="软件包未满足依赖关系"></p><p> 解决方案：使用 <code>aptitude</code>手动执行安装。</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 安装 aptitude</span><br>sudo apt-get install aptitude<br><span class="hljs-comment"># 使用 aptitude 手动执行安装</span><br>sudo aptitude install xxx<br><span class="hljs-comment"># 运行后，不接受未安装方案，接收降级方案</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://jckling.github.io/2021/02/07/OpenStack/OpenStack%20%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2%20%E2%80%94%E2%80%94%20DevStack/">https://jckling.github.io/2021/02/07/OpenStack/OpenStack%20%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2%20%E2%80%94%E2%80%94%20DevStack/</a></p><p><a href="https://blog.51cto.com/zhangxueliang/3057866">https://blog.51cto.com/zhangxueliang/3057866</a></p><p><a href="https://www.88888889.xyz/?thread-40.htm">https://www.88888889.xyz/?thread-40.htm</a></p><p><a href="https://developer.aliyun.com/article/704603">https://developer.aliyun.com/article/704603</a></p><p><a href="https://blog.csdn.net/zhuyong006/article/details/85258748">https://blog.csdn.net/zhuyong006/article/details/85258748</a></p>]]></content>
    
    
    <categories>
      
      <category>OpenStack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 命令</title>
    <link href="/2023/05/29/Linux%20%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/05/29/Linux%20%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux-常用命令"><a href="#Linux-常用命令" class="headerlink" title="Linux 常用命令"></a>Linux 常用命令</h2><h3 id="系统监视器"><a href="#系统监视器" class="headerlink" title="系统监视器"></a>系统监视器</h3><p>启动 Linux 资源管理器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">gnome-system-monitor<br><span class="hljs-comment"># 若没有安装，则使用下面命令安装</span><br>sudo apt-get install gnome-system-monitor<br></code></pre></td></tr></table></figure><h3 id="pip-安装"><a href="#pip-安装" class="headerlink" title="pip 安装"></a>pip 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install python3-pip<br></code></pre></td></tr></table></figure><h3 id="useradd-命令"><a href="#useradd-命令" class="headerlink" title="useradd 命令"></a>useradd 命令</h3><p><strong>useradd</strong> 命令用于建立用户帐号。帐号建好之后，再用 <strong>passwd</strong> 设定帐号的密码。而可用 <strong>userdel</strong> 删除帐号。使用 <strong>useradd</strong> 指令所建立的帐号，实际上是保存在 <code>/etc/passwd</code> 文本文件中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 语法</span><br>useradd [-mMnr][-c &lt;备注&gt;][-d &lt;登入目录&gt;][-e &lt;有效期限&gt;][-f &lt;缓冲天数&gt;][-g &lt;群组&gt;][-G &lt;群组&gt;][-s &lt;shell&gt;][-u &lt;uid&gt;][用户帐号]<br></code></pre></td></tr></table></figure><ul><li><code>-c&lt;备注&gt;</code>:加上备注文字。备注文字会保存在passwd的备注栏位中。</li><li><code>-d&lt;登入目录&gt;</code>:指定用户登入时的起始目录。</li><li><code>-D</code>:变更预设值．</li><li><code>-e&lt;有效期限&gt;</code>:指定帐号的有效期限。</li><li><code>-f&lt;缓冲天数&gt;</code>:指定在密码过期后多少天即关闭该帐号。</li><li><code>-g&lt;群组&gt;</code>:指定用户所属的群组。</li><li><code>-G&lt;群组&gt;</code>:指定用户所属的附加群组。</li><li><code>-m</code>:制定用户的登入目录。</li><li><code>-M</code>:不要自动建立用户的登入目录。</li><li><code>-n</code>:取消建立以用户名称为名的群组．</li><li><code>-r</code>:建立系统帐号。</li><li><code>-s&lt;shell&gt;</code>:指定用户登入后所使用的shell。</li><li><code>-u&lt;uid&gt;</code>:指定用户ID。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 举个栗子</span><br>sudo useradd -s /bin/bash -d /opt/stack -m stack<br><span class="hljs-comment"># 使用 bash 作为 shell，指定 /opt/stack 作为起始目录，指定登入目录为 stack</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 新建用户</span><br>sudo useradd zzz<br><span class="hljs-comment"># 将 zzz 添加到 fw 组</span><br>sudo usermod -aG fw zzz<br><span class="hljs-comment"># 设置密码</span><br>sudo passwd zzz<br><span class="hljs-comment"># 添加家目录</span><br><span class="hljs-built_in">mkdir</span> /home/zzz<br><span class="hljs-built_in">chown</span> zzz -R /home/zzz<br>usermod -d /home/zzz zzz<br><span class="hljs-comment"># 修改 zhaozhaozhao 为 zzz</span><br>sudo usermod -l zzz zhapzhaozhao<br><span class="hljs-comment"># 查看用户属于的用户组</span><br><span class="hljs-built_in">groups</span> zzz<br><span class="hljs-comment"># 删除 zhaozhaozhao 这个用户组</span><br>sudo groupdel zhaozhaozhao<br><span class="hljs-comment"># 查看所有用户及其家目录,  确认自己的家目录是否正确</span><br><span class="hljs-built_in">cat</span> /etc/passwd<br></code></pre></td></tr></table></figure><h3 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h3><p>查看 Linux 系统是 X86 架构还是 ARM 架构。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -m<br><span class="hljs-comment"># x86_64</span><br><span class="hljs-comment"># (base) </span><br><span class="hljs-built_in">uname</span> -a<br><span class="hljs-comment"># Linux user-QiTianM437-A631 5.19.0-41-generic #42~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Tue Apr 18 17:40:00 UTC 2 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="hljs-comment"># (base) </span><br></code></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/u011068702/article/details/70244713">https://blog.csdn.net/u011068702/article/details/70244713</a></p><p><a href="https://www.runoob.com/linux/linux-comm-useradd.html">https://www.runoob.com/linux/linux-comm-useradd.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS解构赋值</title>
    <link href="/2023/05/11/JS%20%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    <url>/2023/05/11/JS%20%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>JavaScript 中最常见的两种数据结构是 Object 和 Array。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS 箭头函数</title>
    <link href="/2023/05/10/JS%20%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    <url>/2023/05/10/JS%20%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>创建函数还有另一种非常简单的语法————箭头函数，并且这种方法通常比函数表达式更好。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> func = <span class="hljs-keyword">function</span>(<span class="hljs-params">arg1, arg2,...,argN</span>) &#123;<br>    <span class="hljs-keyword">return</span>  expression;<br>&#125;<br>---------------------------------------------- <span class="hljs-comment">// 两种等同</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">func</span> = (<span class="hljs-params">arg1, arg2,...,argN</span>) =&gt; expression;<br></code></pre></td></tr></table></figure><p>这里创建一个函数 <code>func</code>，接受参数 <code>arg1...argN</code>，然后使用参数对右侧的 expression 求值并返回其结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> <span class="hljs-title function_">sum</span> = (<span class="hljs-params">a, b</span>) =&gt; a + b;<br>---------------------------- <span class="hljs-comment">// 两者等同</span><br><span class="hljs-keyword">let</span> sum  = <span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;；<br><br><span class="hljs-title function_">alert</span>( <span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) );         <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p>可以看到 <code>(a, b) =&gt; a + b</code> 表示一个函数接受两个名为 <code>a</code> 和 <code>b</code> 的参数，在执行时，将对表达式 <code>a + b</code> 求值，并返回计算结果。</p><ul><li>若只有一个参数，则可以省略外面的圆括号，使代码更短。  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> <span class="hljs-title function_">double</span> = n =&gt; n * <span class="hljs-number">2</span>;<br><span class="hljs-title function_">alert</span>( <span class="hljs-title function_">double</span>(<span class="hljs-number">3</span>) );     <span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure></li><li>若没有参数，括号则是空的（但括号必须保留）。  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> <span class="hljs-title function_">sayHi</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello!&quot;</span>);<br><span class="hljs-title function_">sayHi</span>();<br></code></pre></td></tr></table></figure></li></ul><p>箭头函数可以像函数表达式一样使用。例如动态创建一个函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> age = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;What&#x27;s your age?&quot;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-keyword">let</span>  welocme = (age &lt; <span class="hljs-number">18</span>) ?<br>    <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello!&quot;</span>) :<br>    <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Greeting!&quot;</span>);<br><br><span class="hljs-title function_">welocme</span>();<br></code></pre></td></tr></table></figure><h2 id="多行的箭头函数"><a href="#多行的箭头函数" class="headerlink" title="多行的箭头函数"></a>多行的箭头函数</h2><p>单行的箭头函数较为简单，它们从 <code>=&gt;</code> 的左侧获取参数，计算并返回右侧表达式的计算结果。</p><p>有时需要更复杂点的函数，比如带有多行的表达式或语句，在这种情况下，可以使用花括号将他们括起来。主要区别在于，用花括号括起来后，需要包含 <code>return</code> 才能返回值（与常规函数一样）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> <span class="hljs-title function_">sum</span> = (<span class="hljs-params">a, b</span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> result = a + b;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;;<br><span class="hljs-title function_">alert</span>( <span class="hljs-title function_">sum</span>( <span class="hljs-number">1</span> + <span class="hljs-number">2</span>) );      <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>箭头函数对于简单的操作很方便，特别是单行的函数。具体有两种形式：</p><ol><li>不带花括号：<code>(...args) =&gt; expression</code>————右侧是一个表达式：函数计算表达式并返回其结果，若只有一个参数，则可以省略括号；</li><li>带花括号：<code>(...args) =&gt; &#123; body &#125;</code>————花括号允许在函数中编写多个语句，但需要 <code>return</code> 返回一些内容。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zh.javascript.info/arrow-functions-basics">https://zh.javascript.info/arrow-functions-basics</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Map and Set（映射和集合）</title>
    <link href="/2023/05/08/Map%20and%20Set%EF%BC%88%E6%98%A0%E5%B0%84%E5%92%8C%E9%9B%86%E5%90%88%EF%BC%89/"/>
    <url>/2023/05/08/Map%20and%20Set%EF%BC%88%E6%98%A0%E5%B0%84%E5%92%8C%E9%9B%86%E5%90%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map">Map</a> 是一个带键的数据项的集合，就像一个 <code>Object</code> 一样，但它们最大的区别是 <code>Map</code> 允许任何类型的键（Key）。</p><p>方法和属性如下：</p><ul><li><code>new Map()</code>————创建 <code>map</code>；</li><li><code>map.set(key, value)</code>————根据键存储值；</li><li><code>map.get(key)</code>————根据键来返回值，如果 <code>map</code> 中不存在对应的 <code>key</code>，则返回 <code>undefined</code>；</li><li><code>map.has(key)</code>————如果 <code>key</code> 存在则返回 <code>true</code>，否则返回 <code>false</code>；</li><li><code>map.delete(key)</code>————删除指定键的值；</li><li><code>map.clear()</code>————清空 <code>map</code>；</li><li><code>map.size</code>————返回当前元素的个数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br><br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;str1&#x27;</span>);   <span class="hljs-comment">// 字符串键</span><br>map.<span class="hljs-title function_">set</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;num1&#x27;</span>);     <span class="hljs-comment">// 数字键</span><br>map.<span class="hljs-title function_">set</span>(<span class="hljs-literal">true</span>, <span class="hljs-string">&#x27;bool1&#x27;</span>); <span class="hljs-comment">// 布尔值键</span><br><br><span class="hljs-comment">// Map 会保留键的类型，所以下面这两个结果不同。</span><br><span class="hljs-title function_">alert</span>( map.<span class="hljs-title function_">get</span>(<span class="hljs-number">1</span>) );        <span class="hljs-comment">// &#x27;num1&#x27;</span><br><span class="hljs-title function_">alert</span>( map.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;1&#x27;</span>) );      <span class="hljs-comment">// &#x27;str1&#x27;</span><br><span class="hljs-title function_">alert</span>( map.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;bool1&#x27;</span>) );  <span class="hljs-comment">// &#x27;bool1&#x27;</span><br><span class="hljs-title function_">alert</span>( map.<span class="hljs-property">size</span> );          <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p>与对象不同，键不会被转换成字符串，可以是任何类型。</p><p><code>Map</code> 还可以使用对象作为键。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> john = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Jojn&quot;</span> &#125;;<br><span class="hljs-keyword">let</span> visitsCountMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();     <span class="hljs-comment">// 存储每个用户的来访次数</span><br><br>visitsCountMap.<span class="hljs-title function_">set</span>(john, <span class="hljs-number">123</span>);      <span class="hljs-comment">// john 是 Map 中的键</span><br><span class="hljs-title function_">alert</span>( visitsCountMap.<span class="hljs-title function_">get</span>(john) );  <span class="hljs-comment">// 123</span><br></code></pre></td></tr></table></figure><p>使用对象作为键是 <code>Map</code> 最值得注意和重要的功能之一。在 <code>Object</code> 中，我们无法使用对象作为键，在 <code>Object</code> 中使用字符串作为键是可以的，但无法使用另一个 <code>Object</code> 作为 <code>Object</code> 中的键。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> john = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span> &#125;;<br><span class="hljs-keyword">let</span> ben = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Ben&quot;</span> &#125;;<br><br><span class="hljs-keyword">let</span> visitsCountObj = &#123;&#125;;        <span class="hljs-comment">// 尝试使用对象</span><br>visitsCountObj[ben] = <span class="hljs-number">234</span>;      <span class="hljs-comment">// 尝试将对象 ben 用作键</span><br>visitsCountObj[john] = <span class="hljs-number">123</span>;     <span class="hljs-comment">// 尝试将对象 john 作用键，但我们会发现使用对象 ben 作为键存下的值会被替换掉</span><br><span class="hljs-title function_">alert</span>( visitsCountObj )[<span class="hljs-string">&quot;[object object]&quot;</span>]; <span class="hljs-comment">// 123</span><br></code></pre></td></tr></table></figure><p>因为 <code>visitsCountObj</code> 是一个对象，它会将所有的 <code>Object</code> 键例如上面的 <code>john</code> 和 <code>ben</code> 转换为字符串 <code>&quot;[object object]&quot;</code>。</p><h3 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h3><p>每一次 map.set 调用都会返回 map 本身，可以进行 “链式”调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;str1&#x27;</span>)<br>    .<span class="hljs-title function_">set</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;num1&#x27;</span>)<br>    .<span class="hljs-title function_">set</span>(<span class="hljs-literal">true</span>, <span class="hljs-string">&#x27;bool1&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="Map-迭代"><a href="#Map-迭代" class="headerlink" title="Map 迭代"></a>Map 迭代</h2><p>如果要在 <code>map</code> 里使用循环，可以使用以下三个方法：</p><ul><li><code>map.keys()</code>————遍历并返回一个包含所有键的可迭代对象；</li><li><code>map.values()</code>————遍历并返回一个包含所有值得可迭代对象；</li><li><code>map.entries()</code>————遍历并返回一个包含所有实体 <code>[key, value]</code> 的可迭代对象，<code>for...of</code> 在默认情况下使用的就是这个。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> recipeMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>    [<span class="hljs-string">&#x27;cucumber&#x27;</span>, <span class="hljs-number">500</span>],<br>    [<span class="hljs-string">&#x27;tomatoes&#x27;</span>, <span class="hljs-number">350</span>],<br>    [<span class="hljs-string">&#x27;onion&#x27;</span>, <span class="hljs-number">50</span>]<br>]);<br><br><span class="hljs-comment">// 遍历所有的键（vegetable）</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> vegetable <span class="hljs-keyword">of</span> recipeMap.<span class="hljs-title function_">keys</span>())&#123;<br>    <span class="hljs-title function_">alert</span>(vegetable);       <span class="hljs-comment">// cucumber, tomatoes, onion</span><br>&#125;<br><br><span class="hljs-comment">// 遍历所有的值（amounts）</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> amount <span class="hljs-keyword">of</span> recipeMap.<span class="hljs-title function_">value</span>())&#123;<br>    <span class="hljs-title function_">alert</span>(amount);          <span class="hljs-comment">// 500, 350, 50</span><br>&#125;<br><br><span class="hljs-comment">// 遍历所有的实体[key, value]</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> entry <span class="hljs-keyword">of</span> recipeMap)&#123;<br>    <span class="hljs-title function_">alert</span>(entry);           <span class="hljs-comment">// cucumber, 500...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用插入顺序"><a href="#使用插入顺序" class="headerlink" title="使用插入顺序"></a>使用插入顺序</h3><p>迭代的顺序与插入值的顺序相同，与普通的 Object 不同，Map 保留了此顺序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 每个键值对（key, value）运行 forEach 函数</span><br>recipeMap.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">value, key, map</span>)=&gt;</span>&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>:<span class="hljs-subst">$&#123;value&#125;</span>`</span>);   <span class="hljs-comment">// cucumber: 500 ...</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="Object-fromEntries-从-Map-创建对象"><a href="#Object-fromEntries-从-Map-创建对象" class="headerlink" title="Object.fromEntries: 从 Map 创建对象"></a>Object.fromEntries: 从 Map 创建对象</h2><p><code>Object.fromEntries</code> 方法与 <code>Object.entries(obj)</code> 从普通对象（<code>plain object</code>）创建 <code>Map</code> 方法相反，<code>Object.fromEntries</code> 为给定一个具有 <code>[key, value]</code> 键值对的数组，它会根据给定数组创建一个对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> prices = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">fromEntries</span>([<br>    [<span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-number">1</span>],<br>    [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-number">2</span>],<br>    [<span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-number">3</span>]<br>]);<br><br><span class="hljs-comment">// 现在 prices = &#123;banana: 1, apple: 2, orange: 3&#125;</span><br><span class="hljs-title function_">alert</span>(prices.<span class="hljs-property">orange</span>);   <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p>我们可以使用 <code>Object.fromEntries</code> 从 <code>Map</code> 得到一个普通对象（plain object）。</p><p>例如，我们在 Map 中存储了一些数据，但需要将这些数据传给需要普通对象（plain object）的第三方代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-number">1</span>);<br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-number">2</span>);<br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-number">3</span>)<br><br><span class="hljs-keyword">let</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">fromEntries</span>(map.<span class="hljs-title function_">entries</span>());    <span class="hljs-comment">// 创建一个普通对象（plain object）</span><br><span class="hljs-comment">// object = &#123;banana: 1, apple: 2, orange: 3&#125;</span><br><span class="hljs-title function_">alert</span>(obj.<span class="hljs-property">orange</span>);      <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>调用 <code>map.entries()</code> 将返回一个可迭代的键&#x2F;值对，这刚好是 <code>Object.fromEntries</code> 所需要的格式，可以省掉 <code>.entries</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">fromEntries</span>(map);      <span class="hljs-comment">// 省掉 .entries</span><br></code></pre></td></tr></table></figure><p>上面的代码作用也是一样的，因为 <code>Object.fromEntries</code> 期望得到一个可迭代对象作为参数，而不一定是数组。并且 <code>map</code> 的标准迭代会返回跟 <code>map.entries()</code> 一样的键&#x2F;值对。因此可以获得一个普通对象（plain object），其键&#x2F;值对与 <code>map</code> 相同。</p><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set 是一个特殊的类型集合————“值的集合”（没有键），它的每个值只能出现一次。其主要方法如下：</p><ul><li><code>new Set(iterable)</code>————创建一个 <code>set</code>，如果提供了一个 <code>iterable</code> 对象（通常是数组），将会从数组里面复制值到 <code>set</code> 中；</li><li><code>set.add(value)</code>————添加一个值，返回 <code>set</code> 本身；</li><li><code>set.delete(value)</code>————删除值，如果 <code>value</code> 在这个方法调用的时候存在，则返回 <code>true</code>，否则返回 <code>false</code>；</li><li><code>set.has(value)</code>————如果 <code>value</code> 在 <code>set</code> 中，返回 <code>true</code>，否则返回 <code>false</code>；</li><li><code>set.clear()</code>————清空 <code>set</code>；</li><li><code>set.size</code>————返回元素个数。</li></ul><p><code>Set</code> 的主要特点是，重复使用同一个值调用 <code>set.add(value)</code> 并不会发生什么改变，这就是 <code>Set</code> 里面的每个值只出现一次的原因。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br><br><span class="hljs-keyword">let</span> john = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span> &#125;;<br><span class="hljs-keyword">let</span> pete = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Pete&quot;</span>&#125;;<br><span class="hljs-keyword">let</span> pete = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Mary&quot;</span>&#125;;<br><br><span class="hljs-comment">// 一些访客来访好几次</span><br>set.<span class="hljs-title function_">add</span>(john);<br>set.<span class="hljs-title function_">add</span>(pete);<br>set.<span class="hljs-title function_">add</span>(mary);<br>set.<span class="hljs-title function_">add</span>(john);      <br>set.<span class="hljs-title function_">add</span>(mary);<br><br><span class="hljs-comment">// set 只保留不重复的值</span><br><span class="hljs-title function_">alert</span>( set.<span class="hljs-property">size</span> );  <span class="hljs-comment">// 3</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> user <span class="hljs-keyword">of</span> set)&#123;<br>    <span class="hljs-title function_">alert</span>(user.<span class="hljs-property">name</span>);   <span class="hljs-comment">// John, Pete, Mary</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Set</code> 的替代方法可以是一个用户数组，用 <code>arr.find</code> 在每次插入值时检查是否重复，但性能很差，因为这个方法会遍历整个数组来检查每个元素，<code>Set</code> 内部对唯一性检查进行了更好的优化。</p><h3 id="Set-迭代（iteration）"><a href="#Set-迭代（iteration）" class="headerlink" title="Set 迭代（iteration）"></a>Set 迭代（iteration）</h3><p>可以使用 <code>for...of</code> 或 <code>forEach</code> 来遍历 <code>Set</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;orange&quot;</span>, <span class="hljs-string">&quot;pear&quot;</span>])<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> set)&#123;<br>    <span class="hljs-title function_">alert</span>(value);<br>&#125;;<br><br>set.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">value, valueAgain, set</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">alert</span>(value);<br>&#125;);<br></code></pre></td></tr></table></figure><p><code>forEach</code> 的回调函数有三个参数：一个 <code>value</code>，然后是同一个值 <code>valueAgain</code>，最后是目标对象，同一个值在参数里出现了两次。主要原因是为了与 <code>Map</code> 兼容。</p><p><code>Map</code> 中用于迭代的方法在 <code>set</code> 中也同样支持：</p><ul><li><code>set.keys()</code>————遍历并返回一个包含所有值的可迭代对象；</li><li><code>set.values</code>————与 <code>set.keys()</code> 作用相同，为了兼容 <code>Map</code>；</li><li><code>set.entries</code>————遍历并返回一个包含所有的实体 <code>[value, value]</code> 的可迭代对象，也是为了兼容 <code>Map</code>。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>Map</code> 是一个带键的数据项的集合。</p><p>方法和属性如下：</p><ul><li><code>new Map([iterable])</code>————创建 <code>map</code>，可选择带有 <code>[key, value]</code> 对的 <code>iterable</code>（例如数组）来进行初始化；</li><li><code>map.set(key, value)</code>————根据键存储值，返回 <code>map</code> 本身；</li><li><code>map.get(key)</code>————根据键来返回值，如果 <code>map</code> 中不存在对应的 <code>key</code>，则返回 <code>undefined</code>；</li><li><code>map.has(key)</code>————如果 <code>key</code> 存在，则返回 true，否则返回 <code>false</code>；</li><li><code>map.delete(key)</code>————删除指定键对应的值，如果在调用时 <code>key</code> 存在，则返回 <code>true</code>，否则返回 <code>false</code>；</li><li><code>map.clear()</code>————清空 <code>map</code>；</li><li><code>map.size</code>————返回当前元素个数。</li></ul><p>与普通对象 <code>Object</code> 的不同点：</p><ul><li>任何键、对象都可以作为键；</li><li>有其他的便捷方法，如 <code>size</code> 属性。</li></ul><p>Set 是一组唯一值的集合。</p><p>方法和属性如下：</p><ul><li><code>new Set([iterable])</code>————创建 <code>set</code>，可选择带有 <code>iterable</code>（例如数组）来进行初始化；</li><li><code>set.add(value)</code>————添加一个值（如何 <code>value</code> 存在则不做任何修改），返回 <code>set</code> 本身；</li><li><code>set.delete(value)</code>————删除值，如果 <code>value</code> 在这个方法调用的时候存在则返回 <code>true</code>，否则返回 <code>false</code>；</li><li><code>set.has(value)</code>————如果 <code>value</code> 在 <code>set</code> 中，返回 <code>true</code>，否则返回 <code>false</code>；</li><li><code>set.clear()</code>————清空 <code>set</code>；</li><li><code>set.size</code>————元素的个数。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zh.javascript.info/map-set">https://zh.javascript.info/map-set</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS 数组方法</title>
    <link href="/2023/05/04/JS%20%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
    <url>/2023/05/04/JS%20%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><h3 id="添加-x2F-移除数组元素"><a href="#添加-x2F-移除数组元素" class="headerlink" title="添加&#x2F;移除数组元素"></a>添加&#x2F;移除数组元素</h3><p>数组的首端或尾端添加和删除元素的方法。</p><ul><li><code>arr.push(...item)</code>————从尾端添加元素；</li><li><code>arr.pop()</code>————从尾端提取元素；</li><li><code>arr.shift()</code>————从首端提取元素；</li><li><code>arr.unshift(...item)</code>————从首端添加元素。</li></ul><h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-string">&quot;go&quot;</span>, <span class="hljs-string">&quot;home&quot;</span>];<br><span class="hljs-keyword">delete</span> arr[<span class="hljs-number">1</span>];                  <span class="hljs-comment">// remove &quot;go&quot;</span><br><span class="hljs-title function_">alert</span>( arr[<span class="hljs-number">1</span>] );                <span class="hljs-comment">// undefined</span><br><span class="hljs-comment">// now arr = [&quot;I&quot;,  , &quot;home&quot;];</span><br><span class="hljs-title function_">alert</span>( arr.<span class="hljs-property">length</span> );            <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p><code>delete</code> 会将元素删除，<code>delete obj.key</code> 是通过 <code>key</code> 来移除对应的值，但仍会保留一个元素位置，因此 <code>arr.length == 3</code>，</p><h4 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice">arr.splice</a> 意为“拼接”。对于数组，希望删除后的元素能够移动并占据被释放的位置，可以实现数组添加、删除和插入元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">arr.<span class="hljs-title function_">splice</span>(start[, deleteCount, elem1, ..., elemN]);<br></code></pre></td></tr></table></figure><p>从索引 <code>start</code> 开始修改 <code>arr</code>：删除 <code>deleteCount</code> 个元素并在当前位置插入 <code>elem1, ..., elemN</code>。最后返回被删除的元素所组成的数组。</p><p>从索引 <code>1</code> 开始删除 <code>1</code> 个元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-string">&quot;study&quot;</span>, <span class="hljs-string">&quot;JavaScript&quot;</span>];<br>arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);               <span class="hljs-comment">// 从索引 1 开始删除 1 个元素</span><br><span class="hljs-title function_">alert</span>( arr );                   <span class="hljs-comment">// [&quot;I&quot;, &quot;JavaScript&quot;]</span><br></code></pre></td></tr></table></figure><p>从索引 <code>0</code> 开始删除 <code>3</code> 个元素并用另外 <code>2</code> 个元素替换。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-string">&quot;study&quot;</span>, <span class="hljs-string">&quot;JavaScript&quot;</span>, <span class="hljs-string">&quot;right&quot;</span>, <span class="hljs-string">&quot;now&quot;</span>];<br>arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;let,s&quot;</span>, <span class="hljs-string">&quot;dance&quot;</span>);<br><span class="hljs-title function_">alert</span>( arr );                   <span class="hljs-comment">// [&quot;Let&#x27;s&quot;, &quot;dance&quot;, &quot;right&quot;, &quot;now&quot;]</span><br></code></pre></td></tr></table></figure><p><code>splice</code> 删除元素所组成的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-string">&quot;study&quot;</span>, <span class="hljs-string">&quot;JavaScript&quot;</span>, <span class="hljs-string">&quot;right&quot;</span>, <span class="hljs-string">&quot;now&quot;</span>];<br><span class="hljs-keyword">let</span> removed = arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br><span class="hljs-title function_">alert</span>( removed );               <span class="hljs-comment">// &quot;I&quot;, &quot;study&quot; 数组中删除了的元素</span><br></code></pre></td></tr></table></figure><p><code>splice</code> 添加元素，将 <code>deleteCount</code> 设置为 <code>0</code>，<code>splice</code> 方法能够插入元素而不用删除任何元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-string">&quot;study&quot;</span>, <span class="hljs-string">&quot;JavaScript&quot;</span>];<br>arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;complex&quot;</span>, <span class="hljs-string">&quot;language&quot;</span>);    <span class="hljs-comment">// 从索引 2 开始，删除 0 个元素，插入 2 个元素</span><br><span class="hljs-title function_">alert</span>( arr );                               <span class="hljs-comment">// &quot;I&quot;, &quot;study&quot;, &quot;complex&quot;, &quot;language&quot;, &quot;JavaScript&quot;</span><br></code></pre></td></tr></table></figure><p><code>splice</code> 允许负向索引，可以从数组末尾计算位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>];<br>arr.<span class="hljs-title function_">splice</span>(-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);    <span class="hljs-comment">// 从索引 -1（尾端前一位），删除 0 个元素，然后插入 3 和 4</span><br><span class="hljs-title function_">alert</span>( arr );               <span class="hljs-comment">// 1,2,3,4,5</span><br></code></pre></td></tr></table></figure><h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice">arr.slice</a> 意为“片、切片”。返回一个新数组，将所有从索引的 <code>start</code> 和 <code>end</code>（不包括 <code>end</code>）的数组项复制到一个新的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">arr.<span class="hljs-title function_">slice</span>([start], [end]);<br></code></pre></td></tr></table></figure><p><code>start</code> 和 <code>end</code> 都可以是负数，将从末尾计算索引。它和字符串的 <code>str.slice</code> 方法有点像，就是把子字符串替换成子数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot;t&quot;</span>];<br><span class="hljs-title function_">alert</span>( arr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>) );   <span class="hljs-comment">// e,s（复制从位置 1 到位置 3 的元素）</span><br><span class="hljs-title function_">alert</span>( arr.<span class="hljs-title function_">slice</span>(-<span class="hljs-number">2</span>) );     <span class="hljs-comment">// s,t（复制从位置 -2 到尾端的元素）</span><br></code></pre></td></tr></table></figure><p>可以不带参数的调用：<code>arr.slice()</code> 会创建一个 <code>arr</code> 的副本，其常用于获取副本，以进行不影响原始数组的进一步转换。</p><h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat">arr.concat</a> 创建一个新数组，其中包含来自于其他数组和其他项的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">arr.<span class="hljs-title function_">concat</span>(arg1, arg2...);<br></code></pre></td></tr></table></figure><p>它接收任何数量的参数————数组或值都可以。结果是一个包含来自于 <code>arr</code>，然后 <code>arg1，arg2</code> 的元素的新数组。</p><p>如果参数 <code>argN</code> 是一个数组，那么其中的所有元素都会被复制，否则，将复制参数本身。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br><span class="hljs-comment">// 从 arr 和 [3, 4] 创建一个新数组</span><br><span class="hljs-title function_">alert</span>( arr.<span class="hljs-title function_">concat</span>([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]) );            <span class="hljs-comment">// 1,2,3,4</span><br><span class="hljs-comment">// 从 arr、[3,4] 和 [5,6] 创建一个新数组</span><br><span class="hljs-title function_">alert</span>( arr.<span class="hljs-title function_">concat</span>([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>]));     <span class="hljs-comment">// 1,2,3,4,5,6</span><br><span class="hljs-comment">// 从 arr、[3,4]、5 和 6 创建一个新数组</span><br><span class="hljs-title function_">alert</span>( arr.<span class="hljs-title function_">concat</span>([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>], <span class="hljs-number">5</span>, <span class="hljs-number">6</span>) );      <span class="hljs-comment">// 1,2,3,4,5,6</span><br></code></pre></td></tr></table></figure><p>通常，它只复制数组中的元素，对于其他对象，即使看起来像数组一样，但也仍然会被作为一个整体添加。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br><span class="hljs-keyword">let</span> arrayLike = &#123;<br>    <span class="hljs-number">0</span>: <span class="hljs-string">&quot;something&quot;</span>，<br>    <span class="hljs-attr">length</span>: <span class="hljs-number">1</span><br>&#125;;<br><span class="hljs-title function_">alert</span>( arr.<span class="hljs-title function_">concat</span>(arrayLike) );         <span class="hljs-comment">// 1,2,[object object]</span><br></code></pre></td></tr></table></figure><p>但如果类数组对象具有 <code>Symbol.isConcatSpreadable</code> 属性，那么它就会被 <code>concat</code> 当做一个数组来处理：此对象中的元素将会被添加。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br><span class="hljs-keyword">let</span> arrayLike = &#123;<br>    <span class="hljs-number">0</span>: <span class="hljs-string">&quot;something&quot;</span>,<br>    <span class="hljs-number">1</span>: <span class="hljs-string">&quot;else&quot;</span><br>    [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">isConcatSpreadable</span>]: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">length</span>: <span class="hljs-number">2</span><br>&#125;;<br><span class="hljs-title function_">alert</span>( arr.<span class="hljs-title function_">concat</span>(arrayLike) );     <span class="hljs-comment">// 1,2,something.else</span><br></code></pre></td></tr></table></figure><h2 id="遍历-forEach"><a href="#遍历-forEach" class="headerlink" title="遍历 forEach"></a>遍历 forEach</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach">arr.forEach</a> 方法允许为数组的每个元素都运行一个函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, array</span>) &#123;<br>    <span class="hljs-comment">// do something with item</span><br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">forEach</span>(alert);   <span class="hljs-comment">// 1,2,3</span><br></code></pre></td></tr></table></figure><h2 id="在数组中搜索"><a href="#在数组中搜索" class="headerlink" title="在数组中搜索"></a>在数组中搜索</h2><p>数组中进行搜索的方法。</p><h3 id="indexOf-x2F-lastIndexOf-x2F-includes"><a href="#indexOf-x2F-lastIndexOf-x2F-includes" class="headerlink" title="indexOf&#x2F;lastIndexOf&#x2F;includes"></a>indexOf&#x2F;lastIndexOf&#x2F;includes</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf">arr.indexOf</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes">arr.includes</a> 语法类似，并且作用基本上也与字符串方法相同，只不过这里是对数组元素而不是字符进行操作。</p><ul><li><code>arr.indexOf(item, from)</code>————从索引 <code>from</code> 开始搜索 <code>item</code>，如果找到则返回索引，否则返回 <code>-1</code>；</li><li><code>arr.includes(item, from)</code>————从索引 <code>from</code> 开始搜索 <code>item</code>，如果找到则返回 <code>true</code>，否则返回 <code>false</code>；</li></ul><p>通常使用这些方法时只会传入一个参数：传入 item 开始搜索，默认从头开始。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">false</span>];<br><br><span class="hljs-title function_">alert</span>( arr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">0</span>) );        <span class="hljs-comment">// 1</span><br><span class="hljs-title function_">alert</span>( arr.<span class="hljs-title function_">idnexOf</span>(<span class="hljs-literal">false</span>) );    <span class="hljs-comment">// 2</span><br><span class="hljs-title function_">alert</span>( arr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-literal">null</span>) );     <span class="hljs-comment">// -1</span><br><span class="hljs-title function_">alert</span>( arr.<span class="hljs-title function_">includes</span>(<span class="hljs-number">1</span>) );       <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p><code>indexOf</code> 和 <code>includes</code> 使用严格相等的 <code>===</code> 进行比较，如果搜索 <code>false</code>，则会准确找到 <code>false</code>，而不是数字 <code>0</code>。</p><p>若想检查数组中是否包含元素 item，并且不需要知道其确切的索引，那么 arr.includes 是首选。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf">arr.lastIndexOf</a> 与 <code>indexOf</code> 相同，但从右向左查找。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> fruits = [<span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-string">&#x27;Orange&#x27;</span>, <span class="hljs-string">&#x27;Apple&#x27;</span>];<br><br><span class="hljs-title function_">alert</span>( fruits.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;Apple&#x27;</span>) );       <span class="hljs-comment">// 0（第一个 Apple）</span><br><span class="hljs-title function_">alert</span>( fruits.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;Apple&#x27;</span>) );   <span class="hljs-comment">// 2（最后一个 Apple）</span><br></code></pre></td></tr></table></figure><h3 id="find-x2F-findIndex-x2F-findLastIndex"><a href="#find-x2F-findIndex-x2F-findLastIndex" class="headerlink" title="find&#x2F;findIndex&#x2F;findLastIndex"></a>find&#x2F;findIndex&#x2F;findLastIndex</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find">arr.find</a> 从对象数组中找到具有特定条件的对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> result = arr.<span class="hljs-title function_">find</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, array</span>) &#123;<br>    <span class="hljs-comment">// 如果返回 true，则返回 item 并停止迭代</span><br>    <span class="hljs-comment">// 如果返回 false，则返回 undefined</span><br>&#125;)；<br></code></pre></td></tr></table></figure><p>依次对数组中的每个元素调用该函数。</p><ul><li><code>item</code> 是元素；</li><li><code>index</code> 是它的索引；</li><li><code>array</code> 是数组本身。</li></ul><p>若它返回 <code>true</code>，则停止搜索，并返回 <code>item</code>；若没有搜索到，则返回 <code>undefined</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> users = [<br>    &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>&#125;,<br>    &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Pete&quot;</span>&#125;,<br>    &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Mary&quot;</span>&#125;<br>];<br><span class="hljs-keyword">let</span> user = users.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">id</span> == <span class="hljs-number">1</span>);    <span class="hljs-comment">// 传给了 find 一个单参数函数 item =&gt; item.id == 1</span><br><span class="hljs-title function_">alert</span>(user.<span class="hljs-property">name</span>);                               <span class="hljs-comment">// John</span><br></code></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex">arr.findIndex</a> 方法（与 <code>arr.find</code>）具有相同的语法，但它返回找到的元素的索引，而不是元素本身；若没找到，则返回 <code>-1</code>。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex">arr.findLastIndex</a>方法类似于 <code>findIndex</code>，但从右往左搜索，类似于 <code>lastIndexOf</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> users = [<br>    &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>&#125;,<br>    &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Pete&quot;</span>&#125;,<br>    &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Mary&quot;</span>&#125;,<br>    &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>&#125;<br>];<br><span class="hljs-comment">// 寻找第一个 John 的索引</span><br><span class="hljs-title function_">alert</span>(users.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function"><span class="hljs-params">user</span> =&gt;</span> user.<span class="hljs-property">name</span> == <span class="hljs-string">&#x27;John&#x27;</span>));        <span class="hljs-comment">// 0</span><br><span class="hljs-comment">// 寻找最后一个 John 的索引</span><br><span class="hljs-title function_">alert</span>(users.<span class="hljs-title function_">findLastIndex</span>(<span class="hljs-function"><span class="hljs-params">user</span> =&gt;</span> user.<span class="hljs-property">name</span> == <span class="hljs-string">&#x27;John&#x27;</span>));    <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">arr.filter(fn)</a> 意为“筛选”，返回的是所有匹配元素组成的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> results = arr.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, array</span>)&#123;<br>    <span class="hljs-comment">// 如果 true item 被 push 到 results，迭代继续</span><br>    <span class="hljs-comment">// 如果什么都没找到，则返回空数组</span><br>&#125;)；<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> users = [<br>    &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>&#125;,<br>    &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Pete&quot;</span>&#125;,<br>    &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Mary&quot;</span>&#125;<br>];<br><span class="hljs-keyword">let</span> someUsers = user.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">id</span> &lt; <span class="hljs-number">3</span>);<br><span class="hljs-title function_">alert</span>(someUsers.<span class="hljs-property">length</span>);    <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><h2 id="转换数组"><a href="#转换数组" class="headerlink" title="转换数组"></a>转换数组</h2><p>数组转换和重新排序。</p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map">arr.map</a> 意为“地图”，对数组的每个元素都调用函数，并返回结果数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> result = arr.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, array</span>)&#123;<br>    <span class="hljs-comment">// 返回新值而不是当前元素</span><br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> lengths = [<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;pear&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>].<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">length</span>);     <span class="hljs-comment">// 将每个元素转换为它的字符串长度</span><br><span class="hljs-title function_">alert</span>(lengths);                                                         <span class="hljs-comment">// 5, 4, 6</span><br></code></pre></td></tr></table></figure><h3 id="sort-fn"><a href="#sort-fn" class="headerlink" title="sort(fn)"></a>sort(fn)</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">arr.sort</a> 意为“分类”，对数组进行原位 <strong>（in-place）</strong> 排序，更改元素的顺序。（原位是指在此数组内，而非生成一个新数组）。它还返回排序后的数组，但是返回值通常会被忽略，因为修改了 <code>arr</code> 本身。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">15</span> ];<br>arr.<span class="hljs-title function_">sort</span>();                 <span class="hljs-comment">// 该方法重新排列 arr 的内容</span><br><span class="hljs-title function_">alert</span>( arr );               <span class="hljs-comment">// 1,15,2</span><br></code></pre></td></tr></table></figure><p>上面的顺序变成了 <code>1，15，2</code>。因为上面的<strong>元素在默认情况下被按字符串进行排序</strong>。从字面上看，所有元素都被转换为字符串，然后进行比较。对于字符串，按照字典顺序进行排序，实际上应该是 <code>&quot;2&quot;&gt;&quot;15&quot;</code>。</p><p>要使用我们自己的排序顺序，需要提供一个函数作为 <code>arr.sort()</code> 的参数。该函数应该比较两个任意值并返回。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">compare</span>(<span class="hljs-params">a, b</span>)&#123;<br>    <span class="hljs-keyword">if</span>(a &gt; b)   <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;       <span class="hljs-comment">// 若第一个值比第二个值大</span><br>    <span class="hljs-keyword">if</span>(a == b)  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;       <span class="hljs-comment">// 若两个值相等</span><br>    <span class="hljs-keyword">if</span>(a &lt; b)   <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;      <span class="hljs-comment">// 若第一个值比第二个值小</span><br>&#125;<br></code></pre></td></tr></table></figure><p>按照数字排序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">compareNumeric</span>(<span class="hljs-params">a, b</span>) &#123;<br>  <span class="hljs-keyword">if</span> (a &gt; b)    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> (a == b)   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (a &lt; b)    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">15</span>];<br>arr.<span class="hljs-title function_">sort</span>(compareNumeric);<br><span class="hljs-title function_">alert</span>( arr );   <span class="hljs-comment">// 1, 2, 15</span><br></code></pre></td></tr></table></figure><p>现在结果超过预期了，<code>arr</code> 可以是由任何内容组成的数组，可能包含数字、字符串、对象或其他任何内容。我们有一组<strong>一些元素</strong>，要对其排序，需要一个<strong>排序函数</strong>来确认如何比较这些元素。默认是按照字符串进行排序。</p><p><code>arr.sort(fn)</code>方法实现了通用的排序算法。不需要关心内部工作原理（大部分情况下都是经过 <a href="https://en.wikipedia.org/wiki/Quicksort">快速排序</a> 或 <a href="https://en.wikipedia.org/wiki/Timsort">Timsort</a> 算法优化）。它将遍历数组，使用提供的函数比较其元素并对其重新排序，需要提供执行比较函数 <code>fn</code>。</p><p><strong>比较函数可以返回任何数字</strong>，实际上，比较函数只需要返回一个正数表示“大于”，一个负数表示“小于”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">15</span>];<br>arr.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) &#123; <span class="hljs-keyword">return</span> a - b; &#125;);<br><span class="hljs-title function_">alert</span>(arr);     <span class="hljs-comment">// 1, 2, 15</span><br>-------------------------------------------<br>arr.<span class="hljs-title function_">sort</span>( <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b );    <span class="hljs-comment">// 可用箭头函数代替</span><br></code></pre></td></tr></table></figure><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse">arr.reverse</a> 意为“颠倒”，用于颠倒 <code>arr</code> 中元素的顺序，并返回颠倒后的数组 <code>arr</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>arr.<span class="hljs-title function_">reverse</span>();<br><span class="hljs-title function_">alert</span>( arr );       <span class="hljs-comment">// 5, 4, 3, 2, 1</span><br></code></pre></td></tr></table></figure><h3 id="split-x2F-join"><a href="#split-x2F-join" class="headerlink" title="split&#x2F;join"></a>split&#x2F;join</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split">str.split(delim)</a>意为“分裂、拆开”，通过给定的分隔符 <code>delim</code> 将字符串分割成一个数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> names = <span class="hljs-string">&#x27;Bilbo, Gandalf, Nazgul&#x27;</span>;<br><span class="hljs-keyword">let</span> arr = names.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;, &#x27;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> name <span class="hljs-keyword">of</span> arr)&#123;<br>    <span class="hljs-title function_">alert</span>( <span class="hljs-string">`A message tp <span class="hljs-subst">$&#123;name&#125;</span>.`</span> );   <span class="hljs-comment">// A message to Bilbo. / A message to Gandalf. / A message to Nazgul.</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>split</code> 方法有一个可选的第二个数字参数————对数组长度的限制。如果提供了，那么额外的元素就会被忽略。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = <span class="hljs-string">&#x27;Bilbo, Gandalf, Nazgul, Saruman&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;, &#x27;</span>, <span class="hljs-number">2</span>);<br><span class="hljs-title function_">alert</span>(arr);                             <span class="hljs-comment">// Bilbo, Gandalf</span><br></code></pre></td></tr></table></figure><p>拆分为字母，调用带有空参数 <code>s</code> 的 <code>split(s)</code>，会将字符串拆分为字母数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;test&quot;</span><br><span class="hljs-title function_">alert</span>( str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>) );     <span class="hljs-comment">// t,e,s,t</span><br></code></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join">arr.join(glue)</a>意为“加入”，与 <code>split</code> 相反，会在它们之间创建一串由 <code>glue</code> 粘合的 <code>arr</code> 项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;Bilbo&#x27;</span>, <span class="hljs-string">&#x27;Gandalf&#x27;</span>, <span class="hljs-string">&#x27;Nazgul&#x27;</span>];<br><span class="hljs-keyword">let</span> str = arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;,&#x27;</span>);    <span class="hljs-comment">// 使用分号 ; 将数组粘合成字符串</span><br><span class="hljs-title function_">alert</span>( str );               <span class="hljs-comment">// Bilbo;Gandalf;Nazgul</span><br></code></pre></td></tr></table></figure><h3 id="reduce-x2F-reduceRight"><a href="#reduce-x2F-reduceRight" class="headerlink" title="reduce&#x2F;reduceRight"></a>reduce&#x2F;reduceRight</h3><p>当我们需要遍历一个数组时，可以使用 <code>forEach</code>，<code>for</code> 或 <code>for...of</code>，当我们需要遍历并返回每个元素的数据时，可以使用 <code>map</code>。<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce">arr.reduce</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight">arr.reduceRight</a>意为“减少”，和上面的种类差不多，但稍微复杂些，用于根据数组计算单个值。<code>reduceRight</code> 与 <code>reduce</code> 方法功能一样，只是从右到左进行遍历。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> value = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">accumulator, item, index, array</span>)&#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;, [initial]);<br></code></pre></td></tr></table></figure><p>该函数一个接一个的应用于所有数组元素，并将其结果“搬运（carry on）”到下一个调用。</p><ul><li><code>accumulator</code>————是上一个函数调用的结果，第一次等于 <code>initial</code>（若提供了 <code>initial</code> 的话）；</li><li><code>item</code>————当前的数组元素；</li><li><code>index</code>————当前索引；</li><li><code>arr</code>————数组本身。</li></ul><p>应用函数时，上一个函数调用的结果将作为第一个参数传递到下一个函数。因此，第一个函数本质上是累加器，用于存储所有先前执行的组合结果，最后，成为 <code>reduce</code> 的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">let</span> result = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">sum, current</span>) =&gt;</span> sum + current, <span class="hljs-number">0</span>);<br><span class="hljs-title function_">alert</span>(result);      <span class="hljs-comment">// 15</span><br></code></pre></td></tr></table></figure><p>传递给 <code>reduce</code> 的函数仅使用了 2 个参数，看看到底发生哪些事情。</p><ol><li>第一次运行时，<code>sum</code> 的值为初始值 <code>initial</code>（<code>reduce</code> 的最后一个参数），等于 <code>0</code>，<code>current</code> 是第一个数组元素，等于 <code>1</code>。所以函数运行的结果是 <code>1</code>；</li><li>第二次运行时，<code>sum = 1</code>，将第二个数组元素（2）与其相加并返回；</li><li>第三次运行时，<code>sum = 3</code>，继续把下一个元素与其相加，以此内推…</li></ol><p><img src="/../image/%E8%BD%AC%E6%8D%A2%E6%95%B0%E7%BB%841.png" alt="转换数组计算流程"></p><p>同样，也可以省略初始值，reduce 会将数组的第一个元素作为初始值，并从第二个元素开始迭代。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">let</span> result = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">sum, current</span>) =&gt;</span> sum + current);   <span class="hljs-comment">// 删除 reduce 的初始值（没有 0）</span><br><span class="hljs-title function_">alert</span>( result );        <span class="hljs-comment">// 15</span><br></code></pre></td></tr></table></figure><h2 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray"></a>Array.isArray</h2><p>数组是基于对象的，不构成单独的语言类型，所以 typeof 不能从数组中区分出普通对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> &#123;&#125;);   <span class="hljs-comment">// object</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> []);   <span class="hljs-comment">// object</span><br></code></pre></td></tr></table></figure><p>使用一种特殊的方法用于判断：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray">Array.isArray(value)</a>，若 <code>value</code> 是一个数组，则返回 <code>true</code>，否则返回 <code>false</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(&#123;&#125;));   <span class="hljs-comment">// false</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>([]));   <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>数组方法：</p><ul><li>添加&#x2F;删除元素<ul><li><code>push(...items)</code>————向尾端添加元素；</li><li><code>pop()</code>————从尾端提取一个元素；</li><li><code>shift</code>————从首端提起一个元素；</li><li><code>unshift(...items)</code>————向首端添加元素；</li><li><code>splice(pos, deleteCount, ...items)</code>————从 <code>pos</code> 开始删除 <code>deleteCount</code> 个元素，并插入 <code>items</code>；</li><li><code>slice(start, end)</code>————创建一个新数组，将从索引 <code>start</code> 到索引 <code>end</code>（但不包括 <code>end</code>）的元素复制进去；</li><li><code>concat(...item)</code>————返回一个新数组：复制当前数组的所有元素，并向其中添加 <code>items</code>，若 <code>item</code> 中的任意一项是一个数组，那么取其元素；</li></ul></li><li>搜索元素<ul><li><code>indexOf/lastIndexOf(item, pos)</code>————从索引 <code>pos</code> 开始搜索 <code>item</code>，搜索到则返回该项的索引，否则返回 <code>-1</code>；</li><li><code>includes(value)</code>————如果数组有 <code>value</code>，则返回 <code>true</code>，否则返回 <code>false</code>；</li><li><code>find/filter(func)</code>————通过 <code>func</code> 过滤元素，返回使 <code>func</code> 返回 <code>true</code> 的第一个值&#x2F;所有值；</li><li><code>findIndex</code>————和 <code>find</code> 类似，但返回索引而不是值；</li></ul></li><li>遍历元素<ul><li><code>forEach(func)</code>————对每个元素都调用 <code>func</code>，不返回任何内容；</li></ul></li><li>转换数组<ul><li><code>map(func)</code>————根据对每个元素调用 <code>func</code> 的结果创建一个新数组；</li><li><code>sort(func)</code>————对数组进行原位（in-place）排序，然后返回它；</li><li><code>reverse()</code>————原位（in-place）反转数组，然后返回它；</li><li><code>split/join</code>————将字符串转换为数组并返回；</li><li><code>reduce/reduceRight(func, initial)</code>————通过对每个元素调用 <code>func</code> 计算数组上的单个值，并在调用之间传递中间结果；</li></ul></li><li>其他<ul><li><code>Array.isArray(value)</code>————检查 <code>value</code> 是否是一个数组，如果是则返回 <code>true</code>，否则返回 <code>false</code>。</li></ul></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zh.javascript.info/array-methods">https://zh.javascript.info/array-methods</a></p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>将 <code>&#39;my-long-word&#39;</code> 转换成 <code>&#39;myLongWord&#39;</code>，先删除所有短横线，再将除第一个字外的首字母大写，最后拼接起来成为驼峰。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">camelize</span>(<span class="hljs-params">str</span>) &#123;<br>  <span class="hljs-keyword">return</span> str<br>    .<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;-&#x27;</span>)   <span class="hljs-comment">// splits &#x27;my-long-word&#x27; into array [&#x27;my&#x27;, &#x27;long&#x27;, &#x27;word&#x27;]</span><br>    .<span class="hljs-title function_">map</span>(<br>                  <span class="hljs-comment">// capitalizes first letters of all array items except the first one</span><br>                  <span class="hljs-comment">// converts [&#x27;my&#x27;, &#x27;long&#x27;, &#x27;word&#x27;] into [&#x27;my&#x27;, &#x27;Long&#x27;, &#x27;Word&#x27;]</span><br>      <span class="hljs-function">(<span class="hljs-params">word, index</span>) =&gt;</span> index == <span class="hljs-number">0</span> ? word : word[<span class="hljs-number">0</span>].<span class="hljs-title function_">toUpperCase</span>() + word.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)<br>    )<br>    .<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);    <span class="hljs-comment">// joins [&#x27;my&#x27;, &#x27;Long&#x27;, &#x27;Word&#x27;] into &#x27;myLongWord&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>指令集和微架构</title>
    <link href="/2023/04/28/%E6%8C%87%E4%BB%A4%E9%9B%86%E5%92%8C%E5%BE%AE%E6%9E%B6%E6%9E%84/"/>
    <url>/2023/04/28/%E6%8C%87%E4%BB%A4%E9%9B%86%E5%92%8C%E5%BE%AE%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>指令集架构（<a href="https://en.wikipedia.org/wiki/Instruction_set_architecture">ISA</a>）是一款 CPU 处理指令及数据的规范，当我们输入指定格式的指令才能操作计算机，面向程序员和用户层面。</p><p>微架构（<a href="https://zh.wikipedia.org/zh-hans/%E5%BE%AE%E6%9E%B6%E6%A7%8B">MicroArchitecture</a>）通过设计处理器的指令执行单元，使得指令集架构（ISA）可以在处理器上被执行，面向 CPU 设计人员。</p><p>举个简单例子，小学老师教学一元二次方程，教学完成后，需要做很多一元二次方程题目，因此需要通过解题方法来解决实际问题，这里“解题方法”就是指令集，“具体题目”就是微架构。</p><h3 id="指令集分类"><a href="#指令集分类" class="headerlink" title="指令集分类"></a>指令集分类</h3><p>常见的指令集分类有两种，一种是复杂指令集（<a href="https://zh.wikipedia.org/zh-hans/%E8%A4%87%E9%9B%9C%E6%8C%87%E4%BB%A4%E9%9B%86%E9%9B%BB%E8%85%A6">CISC</a>），一种是精简指令集（<a href="https://zh.wikipedia.org/wiki/%E7%B2%BE%E7%AE%80%E6%8C%87%E4%BB%A4%E9%9B%86%E8%AE%A1%E7%AE%97%E6%9C%BA">RISC</a>），其中 X86 属于复杂指令集，ARM、RISC-V、MIPS 等属于精简指令集。目前主流的指令集有三种，分别为 X86、ARM、RISC-V，形成了三分天下的局面。 </p><h3 id="指令集和微架构的关系"><a href="#指令集和微架构的关系" class="headerlink" title="指令集和微架构的关系"></a>指令集和微架构的关系</h3><p>微架构是指 CPU 为实现功能，对内部进行模块划分和逻辑设计，同一个指令集可以被实现为各种微架构，同时指令集会影响微架构的设计。</p><p>微架构的复杂程度和先进程度决定了 CPU 的性能。</p><h2 id="微架构"><a href="#微架构" class="headerlink" title="微架构"></a>微架构</h2><p>CPU 架构是指 <strong>接受和处理信号</strong> 的方式，换句话说，CPU 是一个工厂，不断的接受到信号，并且处理（运算）这些信号，架构就是在工厂里如何布置那些机器，让机器快速处理上面的工序。</p><p>CPU 的基本组成单元即为核心（core），核心的实现方式即被称为微架构。微架构的设计影响核心可以达到的最高频率、核心在一定频率下能执行的运算量、一定工艺下核心的能耗水平。</p><h3 id="微架构的发展历程"><a href="#微架构的发展历程" class="headerlink" title="微架构的发展历程"></a>微架构的发展历程</h3><p>推动计算机性能提升的一个车轮是半导体的微型化，另一个车轮就是微架构的改进，使得单位时间内可以执行更多的指令。</p><h4 id="流水线处理"><a href="#流水线处理" class="headerlink" title="流水线处理"></a>流水线处理</h4><p>假设 CPU 每个 Cycle（时钟周期：一个上升沿和一个下降沿） 可以执行一条指令，传统上执行完上一个完整的指令才能执行下一个完整的指令，CPU 性能难以提升，若想要提高性能，只能加快 CPU 的运行速度。若将一个完整的指令切分成多个分指令，<strong>流水式</strong>执行，这样每个周期做的事情会更少，CPU 可以运行的更快。所以流水切分的越多，CPU 频率就能跑的越快。</p><blockquote><p>举个栗子，若厨房只有一个厨师，需要做洗菜、切菜、炒菜、上菜四个步骤，则他每做一道完整的菜都需要经历这四个步骤，若厨房有四位厨师，分别负责洗菜、切菜、炒菜、上菜四个步骤，则从第一道菜完成后，整条流水线就能顺利运转起来。</p></blockquote><p><img src="/../image/%E6%B5%81%E6%B0%B4%E7%BA%BF.png" alt="流水线"></p><h4 id="分支预测"><a href="#分支预测" class="headerlink" title="分支预测"></a>分支预测</h4><blockquote><p>在上述栗子中，若客人点菜没有接上，则会出现一个问题，洗菜师傅洗好菜后，空闲下来了，接着切菜师傅切好菜后，也空闲下来了，若此时菜单又进来，则洗菜师傅开始洗菜，切菜师傅等待切菜，流水线得以重新运转起来。若有分支预测器，预测没菜单进来后，调度洗菜师傅洗完菜后再准备其他的菜品（菜馆热销榜前三），这样能够改善流水线上的功能。</p></blockquote><p>在计算机体系结构中，<a href="https://zh.wikipedia.org/wiki/%E5%88%86%E6%94%AF%E9%A0%90%E6%B8%AC%E5%99%A8">分支预测器</a>是一种数字电路，在分支指令执行结束之前猜测哪一路分支将会被执行，已提高处理器的指令流水线的性能。</p><p>若没有分支预测器，处理器将会等待分支指令通过了指令流水线的执行阶段，才把下一条指令送入流水线的第一个阶段————取指令阶段（Fetch Stage），或者将后续流水线全部清空。这种技术叫做流水线停顿（Pipeline Stalled）或者流水线冒泡（Pipeline Bubbling）或者分支延迟间隙。</p><p><img src="/../image/%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B.png" alt="分支预测"></p><p>如果绿色指令是跳转指令，则绿色指令没有执行时，紫色指令不能开始译码，这时流水线产生了空泡。同样，流水线级数越多，则分支导致空泡带来的影响也会越大。</p><p>分支预测器对一个未执行的分支指令进行判断，预测其是否跳转，若预测为跳转还要预测跳转的目标，然后以预测的结果去取值执行，分支预测可以缓解由控制依赖导致的流水线空泡。</p><h4 id="超标量"><a href="#超标量" class="headerlink" title="超标量"></a>超标量</h4><p>超标量（Super Scalar）是指具有两条或两条以上并行的流水线结构，亦称为“超标量流水线”，与之相对，之前的流水线则称为“标量流水线”。使用超标量结构的处理器称为<strong>超标量处理器</strong>。</p><blockquote><p>举个栗子，之前构建的一条流水线为洗菜、切菜、炒菜、上菜，若仍觉得吞吐率还不够高，其中一个改进的方向就是加深流水线，与之相对另一个改进的方向就是拓宽流水线。拓宽流水线的方案称为超标量。为满足更多客人的需求，需要把这条做菜的流水线进行拓宽，首先洗菜池扩大一倍，可以同时洗两道菜，对应后续各个环节都进行加倍。</p></blockquote><p><img src="/../image/%E8%B6%85%E6%A0%87%E9%87%8F1.png" alt="超标量"></p><p>上述栗子中每一个环节都有两道菜在同时的并行向前，对于处理器，这也称为双发射的结构，如果照着这个方式再扩展一条流水线就变成三发射，以此内推…</p><p><img src="/../image/Corei7%E7%9A%84%E8%B6%85%E6%A0%87%E9%87%8F%E6%B5%81%E6%B0%B4%E7%BA%BF.png" alt="Corei7的超标量流水线"></p><p>Core i7 的超标量流水线为 4 发射 16 级流水线，指令高度缓存（L1 Instruction Cache）相当于指令存储器，每个周期从指令存储器当中取回 128 比特（16 字节）指令，因 x86 指令长度不固定，所以先经过一个指令长度的译码器（ILD），分解出到底哪几个字节是一条指令。在译码器当中通过硬件会将 x86 的指令转换为更简单的指令，这些指令被称为微操作。从指令译码器（ID）中可以看出有三个简单的译码器（simple），用于对那些比较简单的 x86 指令进行转换，每条指令对应一个微操作，而那些非常复杂的指令则会通过复杂的译码器（complex）转换成多条微操作，而这些微操作都是类似于 RISC 指令的格式，在流水线后半部分看到的都是 RISC 格式的简单指令。在图右侧，可以看到多条并行的流水线（Port 0~5），而且在这个流水线当中运行的是微操作，都采用 RISC 的编码风格，因此这里也可以充分运用大量面向 RISC 处理器研发的高级流水线技术。这也是现在经常所说的 x86 虽然是一个 CISC 的指令系统，实际上是用 RISC 的方式去实现。</p><p>标量流水线和超标量流水线：</p><ul><li>单周期-&gt;标量流水线：<strong>时间并行性</strong>的优化，主要是对现有硬件的切分；</li><li>标量流水线-&gt;超标量流水线：<strong>空间并行性</strong>的优化，需城北增加硬件资源。</li></ul><p>从单周期处理器到流水线处理器主要考虑的是<strong>时间并行性</strong>上的优化，通过对现有硬件进行切分，只是增加了少量流水线寄存器以及部分的控制信号的改动，原本串行执行的指令在一定程度上并行起来。而从标量流水线到超标量流水线则是考虑了<strong>空间并行性</strong>上的优化，这是让不同的指令同时在不同的流水线上运行，简单来看，每增加一个发射数就需要增加一条流水线的硬件资源。</p><p><img src="/../image/%E8%B6%85%E6%A0%87%E9%87%8F%E6%B5%81%E6%B0%B4%E7%BA%BF%E5%92%8C%E5%A4%9A%E6%A0%B8CPU.png" alt="超标量流水线和多核 CPU"></p><p>超标量流水线和多核 CPU 的关系从原理上来看，都是在空间并行性方面寻求的优化。处理器核除了上面的数据通路控制信号，还需要包含指令和数据的高度缓存（I-Cache 和 D-Cache），对应原理结构当中的指令存储器（Instruction Memory）和数据存储器（Data Memory），为了提高性能在处理器中还配备二级的高速缓存（L2 Cache）等，通常将这一部分称为一个处理器核。</p><p>上面的 4 发射 16 级流水线的结构图就是在一个处理器核内部的结构（图中最左边虚线内的框图），可以说一个处理器核就是一个超标量流水线的处理器核。在单核时代这部分结构会单独制造出一个芯片，称为单核 CPU。若将这样的结构复制多份，再加上一些共享的存储部件，就构成了一个多核的 CPU，这里面有四个核那就是一个四核的 CPU，每一个核内部就是一个超标量流水线的结构，因此这也是通常所说的多核 CPU 和超标量流水线之间的关系。</p><h3 id="乱序执行"><a href="#乱序执行" class="headerlink" title="乱序执行"></a>乱序执行</h3><p>乱序执行（Out-of-Order Execuction）是一种应用在高性能微处理器中来利用指令周期以避免特定类型的延迟消耗的范式，在这种范式中，处理器根据输入数据的可用性确定执行指令的顺序，而不是根据程序的原始数据决定。在这种方式下，可以避免因为获取下一条程序指令所引起的处理器等待，取而代之的处理下一条可以立即执行的指令。</p><p>在顺序 CPU 中，每条指令的流水都是一样长，先取值的指令先写回，这样可以保证程序的顺序性。但实际上，每条指令的执行复杂度是不一样的，有可能排在后面的指令先执行完，但先前执行的指令迟迟没有写回。</p><p>乱序执行是把结果先写入 ROB（Re Order Buffer）中，执行单元空出来提前执行后面的指令，乱序执行属于投机行为，更加依赖于分支预测的正确性，若分支预测失败导致流水线排空，会带来效率和能效上的浪费。</p><p><img src="/../image/%E4%B9%B1%E5%BA%8F%E6%89%A7%E8%A1%8C.png" alt="乱序执行"></p><h2 id="架构识别"><a href="#架构识别" class="headerlink" title="架构识别"></a>架构识别</h2><p><img src="/../image/ARM%20A75%20%E5%BE%AE%E6%9E%B6%E6%9E%84.png" alt="ARM A75 微架构"></p><p>11 级流水线、三发、乱序、超标量处理器。</p><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>ISA（Instruction Set Architecture）：指令集架构<br>CISC（Complex Instruction Set Computer）：复杂指令集<br>RISC（Reduced Instruction Set Computer）：精简指令集<br>Branch Predictor：分支预测器<br>ILD（Instruction Length Decoder）：指令长度译码器<br>OOE&#x2F;OoOE（Out of Order Execuction）：乱序执行</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p><a href="https://zh.wikipedia.org/zh-hans/%E8%A4%87%E9%9B%9C%E6%8C%87%E4%BB%A4%E9%9B%86%E9%9B%BB%E8%85%A6">https://zh.wikipedia.org/zh-hans/%E8%A4%87%E9%9B%9C%E6%8C%87%E4%BB%A4%E9%9B%86%E9%9B%BB%E8%85%A6</a></p><p><a href="https://zh.wikipedia.org/wiki/%E7%B2%BE%E7%AE%80%E6%8C%87%E4%BB%A4%E9%9B%86%E8%AE%A1%E7%AE%97%E6%9C%BA">https://zh.wikipedia.org/wiki/%E7%B2%BE%E7%AE%80%E6%8C%87%E4%BB%A4%E9%9B%86%E8%AE%A1%E7%AE%97%E6%9C%BA</a></p><p><a href="https://zh.wikipedia.org/zh-hans/%E5%BE%AE%E6%9E%B6%E6%A7%8B">https://zh.wikipedia.org/zh-hans/%E5%BE%AE%E6%9E%B6%E6%A7%8B</a></p><p><a href="https://en.wikipedia.org/wiki/Instruction_set_architecture">https://en.wikipedia.org/wiki/Instruction_set_architecture</a></p><p><a href="https://www.zhihu.com/question/21827164">https://www.zhihu.com/question/21827164</a></p><p><a href="https://www.jianshu.com/p/fa7e11321cd8">https://www.jianshu.com/p/fa7e11321cd8</a></p><p><a href="https://www.jianshu.com/p/be389eeba589">https://www.jianshu.com/p/be389eeba589</a></p>]]></content>
    
    
    <categories>
      
      <category>硬件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS 数组</title>
    <link href="/2023/04/25/JS%20%E6%95%B0%E7%BB%84/"/>
    <url>/2023/04/25/JS%20%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>很多时候需要存储一些列表，如用户、商品及 HTML 元素等信息，需要数据（<code>Array</code>）类型的数据结构，能够存储有序的集合。</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>创建一个空数组有两种语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br><span class="hljs-keyword">let</span> arr = [];<br></code></pre></td></tr></table></figure><p>大部分情况下使用第二种语法，并且可在方框号中添加初始元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Plum&quot;</span>];<br></code></pre></td></tr></table></figure><p>JS 与 C 语言或其他语言一样，数组元素从 0 开始编号，这使得我们可以通过方括号中的数字获取元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Plum&quot;</span>];<br><br><span class="hljs-title function_">alert</span>(fruits[<span class="hljs-number">0</span>]);   <span class="hljs-comment">// Apple</span><br><span class="hljs-title function_">alert</span>(fruits[<span class="hljs-number">1</span>]);   <span class="hljs-comment">// Orange</span><br><span class="hljs-title function_">alert</span>(fruits[<span class="hljs-number">2</span>]);   <span class="hljs-comment">// Plum</span><br></code></pre></td></tr></table></figure><p>同时还能通过元素写入的方式进行值替换。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">fruits[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;Peach&#x27;</span>;    <span class="hljs-comment">// [&quot;Apple&quot;, &quot;Orange&quot;, &quot;Peach&quot;]</span><br></code></pre></td></tr></table></figure><p>同时还能通过通过元素写入的方式进行值添加。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">fruits[<span class="hljs-number">3</span>] = <span class="hljs-string">&#x27;Lemon&#x27;</span>;    <span class="hljs-comment">// 现在变成 [&quot;Apple&quot;, &quot;Orange&quot;, &quot;Peach&quot;, &quot;Lemon&quot;]</span><br></code></pre></td></tr></table></figure><p><code>length</code> 属性的值是数组中元素的总个数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Peach&quot;</span>, <span class="hljs-string">&quot;Lemon&quot;</span>];<br><span class="hljs-title function_">alert</span>(fruits.<span class="hljs-property">length</span>);   <span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure><p>同时数组名还可以显示整个数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>(fruits);          <span class="hljs-comment">// [&quot;Apple&quot;, &quot;Orange&quot;, &quot;Peach&quot;, &quot;Lemon&quot;]</span><br></code></pre></td></tr></table></figure><p>数组可以存储任何类型的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 混合值</span><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;Apple&#x27;</span>, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;John&#x27;</span>&#125;, <span class="hljs-literal">true</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello&#x27;</span>); &#125; ]<br><span class="hljs-comment">// 获取索引为 1 的对象然后显示 name</span><br><span class="hljs-title function_">alert</span>( arr[<span class="hljs-number">1</span>].<span class="hljs-property">name</span> );   <span class="hljs-comment">// John</span><br><br><span class="hljs-comment">// 获取索引为 3 的函数并执行</span><br>arr[<span class="hljs-number">3</span>]();               <span class="hljs-comment">// hello</span><br></code></pre></td></tr></table></figure><p>数组与对象相似，可以以逗号结尾。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> fruits = [<br>    <span class="hljs-string">&quot;Apple&quot;</span>,<br>    <span class="hljs-string">&quot;Orange&quot;</span>,<br>    <span class="hljs-string">&quot;Plum&quot;</span>,<br>];<br></code></pre></td></tr></table></figure><h2 id="使用-“at”-获取最后一个元素"><a href="#使用-“at”-获取最后一个元素" class="headerlink" title="使用 “at” 获取最后一个元素"></a>使用 “at” 获取最后一个元素</h2><p>若想要数组中最后一个元素，其他语言允许使用负数索引来实现，如 <code>fruits[-1]</code>。对于 JavaScript 行不通，结果将会是 <code>undefined</code>，方括号中的索引会按照字面意思处理。</p><p>可以采取显示计算最后一个元素的索引，如 <code>fruits[fruits.length -1]</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Plum&quot;</span>];<br><span class="hljs-title function_">alert</span>( fruits[fruits.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>] );   <span class="hljs-comment">// Plum</span><br></code></pre></td></tr></table></figure><p>同样，可以采取更简短的语法 <code>fruits.at(-1)</code> 来实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Plum&quot;</span>];<br><br><span class="hljs-comment">// 与 fruits[fruits.length-1] 相同</span><br><span class="hljs-title function_">alert</span>( fruits.<span class="hljs-title function_">at</span>(-<span class="hljs-number">1</span>) );             <span class="hljs-comment">// Plum</span><br></code></pre></td></tr></table></figure><p>对于 <code>arr.at(i)</code> 来说，</p><ul><li>若 <code>i &gt;= 0</code> 时，则与 <code>arr[i]</code> 完全相同；</li><li>若 <code>i</code> 为负数，则从数组的尾部向前数。</li></ul><h2 id="pop-x2F-push-shift-x2F-unshift-方法"><a href="#pop-x2F-push-shift-x2F-unshift-方法" class="headerlink" title="pop&#x2F;push, shift&#x2F;unshift 方法"></a>pop&#x2F;push, shift&#x2F;unshift 方法</h2><p><a href="https://en.wikipedia.org/wiki/Queue_(abstract_data_type)">队列（queue）</a> 是最常用的使用数组的方法之一，表示支持两个操作的一个有序元素的集合。</p><ul><li><code>push</code> 在末端添加一个元素；</li><li><code>shift</code> 取出队列首端的一个元素，整个队列往前移，这样原先排在第二的元素现在排在了第一。</li></ul><p><img src="/../image/%E9%94%AE%E5%80%BC%E5%AF%B9%E6%AF%94%E5%96%BB%E5%9B%BE10.png" alt="键值对比喻图"></p><p>这两种操作数组都支持，队列的应用在实践中也经常会碰到，如在屏幕上显示消息队列。</p><p>同时数组还有另一个用例，就是数据结构 [栈]。(<a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type))%E3%80%82">https://en.wikipedia.org/wiki/Stack_(abstract_data_type))。</a></p><p>它支持两种操作：</p><ul><li><code>push</code> 在末端添加一个元素；</li><li><code>pop</code> 从末端取出一个元素。</li></ul><p>所以新元素的添加和取出都是从“末端”开始，栈通常被形容为一叠卡片，要么在最上面添加卡片，要么在最上面拿走卡片。</p><p><img src="/../image/%E9%94%AE%E5%80%BC%E5%AF%B9%E6%AF%94%E5%96%BB%E5%9B%BE11.png" alt="键值对比喻"></p><p>对于栈来说，最后放进去的内容最先接收，也叫作 LIFO（Last-In-First_Out），即后进先出法则。而队列对应的恰恰相反，叫做 FIFO（First-In-First-Out），即先进先出法则。</p><p>JS 中的数组既可以用作队列，也可以用作栈，允许从首端&#x2F;末端来添加&#x2F;删除元素。允许这样的操作的数据结构也被称为<a href="https://en.wikipedia.org/wiki/Double-ended_queue">双端队列</a>。</p><h3 id="作用在数组末端的方法"><a href="#作用在数组末端的方法" class="headerlink" title="作用在数组末端的方法"></a>作用在数组末端的方法</h3><h4 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h4><p><code>pop</code> 取出并返回数组的最后一个元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Pear&quot;</span>];<br><br><span class="hljs-title function_">alert</span>( fruits.<span class="hljs-title function_">pop</span>() );  <span class="hljs-comment">// 移除 &quot;Pear&quot;</span><br><span class="hljs-title function_">alert</span>( fruits );        <span class="hljs-comment">// Apple, Orange</span><br></code></pre></td></tr></table></figure><p><code>fruits.pop</code> 和 <code>fruits.at(-1)</code> 都返回数组的最后一个元素，但 <code>fruits.pop()</code> 同时也删除数组的最后一个元素，进而修改了原数组。</p><h4 id="push"><a href="#push" class="headerlink" title="push"></a>push</h4><p><code>push</code> 在数组末端添加元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>];<br>fruits.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;Pear&quot;</span>);<br><span class="hljs-title function_">alert</span>( fruits );        <span class="hljs-comment">// Apple, Orange, Pear</span><br></code></pre></td></tr></table></figure><p>调用 <code>fruits.push(...)</code> 和 <code>fruits[fruits.length] = ...</code> 是一样的。</p><h3 id="作用在数组首端的方法"><a href="#作用在数组首端的方法" class="headerlink" title="作用在数组首端的方法"></a>作用在数组首端的方法</h3><h4 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h4><p><code>shift</code> 取出数组的第一个元素并返回它。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Pear&quot;</span>];<br><br><span class="hljs-title function_">alert</span>( fruits.<span class="hljs-title function_">shift</span>() );    <span class="hljs-comment">// 移除 Apple</span><br><span class="hljs-title function_">alert</span>( fruits );            <span class="hljs-comment">// Orange, Pear</span><br></code></pre></td></tr></table></figure><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h4><p><code>unshift</code> 在数组的首端添加元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> fruits = [<span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Pear&quot;</span>];<br>fruits.<span class="hljs-title function_">unshift</span>(<span class="hljs-string">&#x27;Apple&#x27;</span>);    <br><span class="hljs-title function_">alert</span>( fruits );            <span class="hljs-comment">// Apple, Orange, Pear</span><br></code></pre></td></tr></table></figure><p><code>push</code> 和 <code>unshift</code> 方法都可以一次性添加多个元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> fruits = [<span class="hljs-string">&quot;Apple&quot;</span>];<br><br>fruits.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Peach&quot;</span>);<br>fruits.<span class="hljs-title function_">unshift</span>(<span class="hljs-string">&quot;Pineapple&quot;</span>, <span class="hljs-string">&quot;Lemon&quot;</span>);<br><span class="hljs-title function_">alert</span>( fruits );            <span class="hljs-comment">// [&quot;Pineapple&quot;, &quot;Lemon&quot;, &quot;Apple&quot;, &quot;Orange&quot;, &quot;Peach&quot;]</span><br></code></pre></td></tr></table></figure><h2 id="内部机制"><a href="#内部机制" class="headerlink" title="内部机制"></a>内部机制</h2><p>数组是一种特殊的对象，使用方括号来访问属性 <code>arr[0]</code> 实际上是来自于对象的语法，其实与 <code>obj[key]</code> 相同，其中 <code>arr</code> 是对象，而数字用作键（key）。其拓展了对象，提供了特殊的方法来处理有序的数据集合以及 <code>length</code> 属性，但从本质上讲，其仍然为一个对象。</p><p>数组是一个对象，其行为也像一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> fruits = [<span class="hljs-string">&quot;Banana&quot;</span>]<br><br><span class="hljs-keyword">let</span> arr = fruits;           <span class="hljs-comment">// 通过引用复制（两个变量引用的是相同的数组）</span><br><span class="hljs-title function_">alert</span>( arr === fruit );     <span class="hljs-comment">// true    </span><br>arr.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;Pear&quot;</span>);           <span class="hljs-comment">// 通过引用修改数组</span><br><span class="hljs-title function_">alert</span>( fruits );            <span class="hljs-comment">// Banana, Pear</span><br></code></pre></td></tr></table></figure><p>数组真正特殊的是内部实现，JS 尝试将这些元素一个接一个存储在连续的内存区域，而且还包含着一些其他的优化，使得数组运行的更快。</p><p>若不想“有序集合”那样使用数组，而像常规对象那样使用数组，这些就都不生效。</p><p>例如，从技术上，可以实现以下操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> fruits = [];    <span class="hljs-comment">// 创建一个数组</span><br><br>fruits[<span class="hljs-number">99999</span>] = <span class="hljs-number">5</span>;  <span class="hljs-comment">// 分配索引远大于数组长度的属性</span><br><br>fruits.<span class="hljs-property">age</span> = <span class="hljs-number">27</span>;    <span class="hljs-comment">// 创建一个具有任意名称的属性</span><br></code></pre></td></tr></table></figure><p>但 JS 会发现，若像使用常规对象一样使用数组，那么针对数组的优化就不再适用，然后对应的优化就会关闭。</p><p>数组误用的几种方式：</p><ul><li>添加一个非数字的属性；如：<code>arr.test = 5</code>；    </li><li>制造空洞；如：添加 <code>arr[0]</code>，然后添加 <code>arr[1000]</code>，但中间什么都没有；</li><li>以倒序填充数组；如 <code>arr[1000]</code>，<code>arr[999]</code> 等。</li></ul><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p><code>push/pop</code> 方法运行的比较快，而 <code>shift/unshift</code> 比较慢。</p><p><img src="/../image/%E9%94%AE%E5%80%BC%E5%AF%B9%E6%AF%94%E5%96%BB%E5%9B%BE12.png" alt="键值对比喻图"></p><p>为什么作用于数组的末端会比首端快？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">fruits.<span class="hljs-title function_">shift</span>();         <span class="hljs-comment">// 从首端取出一个元素</span><br></code></pre></td></tr></table></figure><p>只获取并移除索引 <code>0</code> 对应的元素不够，其他元素也需要被重新编号。</p><p><code>shift</code> 操作必须做三件事：</p><ol><li>移除索引为 <code>0</code> 的元素；</li><li>把所有的元素向左移动，把索引 <code>1</code> 改为 <code>0</code>，<code>2</code> 改为 <code>1</code>，以此类推，对齐重新编号；</li><li>更新 <code>length</code> 属性。</li></ol><p>数组里的元素越多，移动它们就需要花费更多的时间，也就意味着越多的内存操作。</p><p><code>unshift</code> 也是一样：为了在数组的首端添加元素，首先需要将现有的元素向右移动，增加它们的索引值。</p><p><code>push/pop</code> 则不需要移动任何东西。若从末端移除一个元素，<code>pop</code> 方法只需要清理索引值并缩短 <code>length</code> 就行。</p><p>pop 操作的行为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">fruits.<span class="hljs-title function_">pop</span>();       <span class="hljs-comment">// 从末端取走一个元素</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E9%94%AE%E5%80%BC%E5%AF%B9%E6%AF%94%E5%96%BB%E5%9B%BE14.png" alt="键值对比喻图"></p><p><code>pop</code> <strong>方法不需要移动任何东西，因此其他元素都保留了各自的索引</strong>，这就是为什么 <code>pop</code> 会特别快。<code>push</code> 方法也是一样。</p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>遍历数组最古老的方式就是 for 循环。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Pear&quot;</span>]<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-title function_">alert</span>( arr[i] );<br>&#125;<br></code></pre></td></tr></table></figure><p>对于数组来说还有另一种循环方式，<code>for...of</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Plum&quot;</span>];<br><span class="hljs-comment">// 遍历数组元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> fruit <span class="hljs-keyword">of</span> fruits) &#123;<br>    <span class="hljs-title function_">alert</span>( fruit );<br>&#125;<br></code></pre></td></tr></table></figure><p><code>for...of</code> 不能获取当前元素的索引，只是获取元素值，但大多数情况是够用的，而且这样写更短。</p><h2 id="关于“length”"><a href="#关于“length”" class="headerlink" title="关于“length”"></a>关于“length”</h2><p>当修改数组时，<code>length</code> 属性会自动更新，准确的说，实际上不是数组里元素的个数，而是最大的数字索引值加一。</p><p>例如，一个数组只有一个元素，但这个元素的索引值很大，那么这个数组的 <code>length</code> 也会很大。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> fruits = [];<br>fruits[<span class="hljs-number">123</span>] = <span class="hljs-string">&quot;Apple&quot;</span>;<br><br><span class="hljs-title function_">alert</span>( fruits.<span class="hljs-property">length</span> );     <span class="hljs-comment">// 124</span><br></code></pre></td></tr></table></figure><p><code>length</code> 属性会可写，若手动增加，则不会发生任何有趣的事情，若想减少它，数组就会被截断，该过程不可逆。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>arr.<span class="hljs-property">length</span> = <span class="hljs-number">2</span>;             <span class="hljs-comment">// 截断到只剩 2 个元素</span><br><span class="hljs-title function_">alert</span>(arr);                 <span class="hljs-comment">// [1, 2]</span><br><br>arr.<span class="hljs-property">length</span> = <span class="hljs-number">5</span>;             <span class="hljs-comment">// 又把 length 加回来</span><br><span class="hljs-title function_">alert</span>( arr[<span class="hljs-number">3</span>] );            <span class="hljs-comment">// undefined：被截断的那些数值并没有回来</span><br></code></pre></td></tr></table></figure><p>清空数组最简单的方法：<code>arr.length = 0;</code></p><h2 id="new-Array"><a href="#new-Array" class="headerlink" title="new Array()"></a>new Array()</h2><p><code>new Array()</code> 是创建数组的另一种语法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Pear&quot;</span>, <span class="hljs-string">&quot;etc&quot;</span>);<br></code></pre></td></tr></table></figure><p>但这种方式很少被使用，因为方括号 [] 更短更简洁，而且还会有一个棘手的特性。若使用单个参数（即数字）调用 new Array，那么会创建一个<strong>指定了长度，却没有任何项</strong>的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">2</span>);     <span class="hljs-comment">// 会创建一个 [2] 的数组吗？</span><br><br><span class="hljs-title function_">alert</span>( arr[<span class="hljs-number">0</span>] );            <span class="hljs-comment">// undefined！没有元素。</span><br><br><span class="hljs-title function_">alert</span>( arr.<span class="hljs-property">length</span> );        <span class="hljs-comment">// length 2</span><br></code></pre></td></tr></table></figure><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>数组里的项也可以是数组。可以将其用于多维数组，例如存储矩阵。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> matrix = [<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>    [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>],<br>    [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br>];<br><br><span class="hljs-title function_">alert</span>( matrix[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] );  <span class="hljs-comment">// 最中间的那个数</span><br></code></pre></td></tr></table></figure><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><p>数组有自己的 <code>toString</code> 方法的实现，会返回以逗号隔开的元素列表。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-title function_">alert</span>( arr );<br><span class="hljs-title function_">alert</span>( <span class="hljs-title class_">String</span>(arr) === <span class="hljs-string">&#x27;1, 2, 3&#x27;</span> );     <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>( [] + <span class="hljs-number">1</span> );        <span class="hljs-comment">// &quot;1&quot;</span><br><span class="hljs-title function_">alert</span>( [<span class="hljs-number">1</span>] + <span class="hljs-number">1</span> );       <span class="hljs-comment">// &quot;11&quot;</span><br><span class="hljs-title function_">alert</span>( [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>] + <span class="hljs-number">1</span> );    <span class="hljs-comment">// &quot;1,21&quot;</span><br></code></pre></td></tr></table></figure><p>数组没有 <code>symbol.toPrimitive</code>，也没有 <code>valueOf</code>，它们只能执行 <code>toString</code> 进行转换，所以这里 <code>[]</code> 就变成一个空字符串，<code>[1]</code> 变成 <code>&quot;1&quot;</code>，<code>[1, 2]</code> 变成了 <code>&quot;1, 2&quot;</code>。</p><p>当 <code>&quot;+&quot;</code> 运算符把一些项加到字符串后面时，加号后面的项也会被转换为字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>( <span class="hljs-string">&quot;&quot;</span> + <span class="hljs-number">1</span> );        <span class="hljs-comment">// &quot;1&quot;</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-string">&quot;1&quot;</span> + <span class="hljs-number">1</span> );       <span class="hljs-comment">// &quot;11&quot;</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-string">&quot;1,2&quot;</span> + <span class="hljs-number">1</span> );     <span class="hljs-comment">// &quot;1,21&quot;</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>数组是一种特殊的对象，适用于存储和管理有序的数据项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 方括号 (常见用法)</span><br><span class="hljs-keyword">let</span> arr = [item1, item2...];<br><br><span class="hljs-comment">// new Array (极其少见)</span><br><span class="hljs-keyword">let</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(item1, item2...);<br></code></pre></td></tr></table></figure><p>调用 <code>new Array（number）</code> 会创建一个给定长度的数组，但不含有任何项。</p><ul><li><code>length</code> 属性是数组的长度，准确说，它是数组最后一个数字索引值加一，由数组方法自动调整；</li><li>若手动缩短 <code>length</code>，数组就会被截断。</li></ul><p>获取元素：</p><ul><li>通过元素的索引获取元素，如 <code>arr[0]</code>;</li><li>通过使用允许负索引的 <code>at(i)</code> 方法，对于负值的 i，会从数组的末尾往回数，若 <code>i &gt;= 0</code>，工作方式与 <code>arr[i]</code> 相同。</li></ul><p>通过下列操作以双端队列的方式使用数组：</p><ul><li><code>push(...items)</code> 在末端添加 <code>items</code> 项；</li><li><code>pop()</code> 从末端移除并返回该元素；</li><li><code>shift()</code> 从首端移除并返回该元素；</li><li><code>unshift(...items)</code> 从首端添加 <code>items</code> 项。</li></ul><p>遍历数组的元素：</p><ul><li><code>for (let i=0; i&lt;arr.length; i++)</code>  运行得最快</li><li><code>for (let item of arr)</code>             只能访问 items</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zh.javascript.info/array#duo-wei-shu-zu">https://zh.javascript.info/array#duo-wei-shu-zu</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>父子组件引用</title>
    <link href="/2023/04/24/%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E5%BC%95%E7%94%A8/"/>
    <url>/2023/04/24/%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E5%BC%95%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="问题来源"><a href="#问题来源" class="headerlink" title="问题来源"></a>问题来源</h2><p>进行项目开发时，根据角色登录信息的不同，显示页面略微会有差异，但显示页面中大部分内容都是相同的，因此想把差异化的部分抽象成组件，在共同页面中引用，利用传递的状态值，控制差异化部分的内容是否可见。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>这里以 Element 中 <a href="https://element.eleme.cn/2.0/#/zh-CN/component/transfer">Transfer 穿梭框</a> 为例进行差异化引用。</p><h3 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-transfer</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">filterable</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:titles</span>=<span class="hljs-string">&quot;[&#x27;Source&#x27;, &#x27;Target&#x27;]&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:button-texts</span>=<span class="hljs-string">&quot;[&#x27;向左去&#x27;, &#x27;向右去&#x27;]&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:props</span>=<span class="hljs-string">&quot;&#123;</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">            key: &#x27;id&#x27;,</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">            label: &#x27;name&#x27;</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">        &#125;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;data&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;transfer&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;handleChange&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;&#123; option &#125;&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float:left&quot;</span>&gt;</span>&#123;&#123; option.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float:left&quot;</span>&gt;</span>&#123;&#123; option.fileType &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-transfer</span>&gt;</span></span><br>&lt;/template&gt;<br>  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">data</span>: [],       <span class="hljs-comment">// 数据源</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">value</span>: [],      <span class="hljs-comment">// 页面显示右边已选择的数据</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">option</span>: <span class="hljs-string">&quot;&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">    created () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">load</span>()</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        handleChange () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;func&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;this.value&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        load () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;请求接口&#x27;</span>, &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">params</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-comment">/* 请求参数 */</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span> = <span class="hljs-comment">/* 请求回来的参数 */</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">    &#123;<span class="hljs-comment">/* 穿梭框外框的高宽度  */</span>&#125;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-selector-class">.el-transfer-panel</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span></span><br><span class="language-css"><span class="language-xml">    &#125;</span></span><br><span class="language-css"><span class="language-xml">    &#123;<span class="hljs-comment">/* 穿梭框内部展示列表的高宽度 */</span>&#125;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-selector-class">.el-transfer-panel__list</span><span class="hljs-selector-class">.is-filterable</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span></span><br><span class="language-css"><span class="language-xml">    &#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="子组件功能"><a href="#子组件功能" class="headerlink" title="子组件功能"></a>子组件功能</h4><p>子组件中常用的属性参数如下：</p><ul><li><code>data</code>：Transfer 的数据源；</li><li><code>filterable</code>：是否可以搜索；</li><li><code>titles</code>：自定义列表标题；</li><li><code>button-texts</code>：自定义按钮文案；</li><li><code>props</code>：数据源的字段别名；</li></ul><p>子组件中常用的时间参数如下：</p><ul><li><code>change</code>：右侧列表元素变化时触发；</li></ul><p>load 函数中 <code>this.request.get</code> 通过参数请求后端数据，并将后端数据给到 <code>this.data</code>，</p><p><code>handleChange</code> 函数中的 <code>this.$emit(&#39;func&#39;,this.value)</code> 可将 <code>this.value</code> 中的数据传递给父组件。</p><ul><li><code>func</code>: 是父组件指定的传数据绑定的函数；</li><li><code>this.value</code>：子组件给父组件传递的数据；</li></ul><h3 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h3><p>在前端页面中需要显示的位置上加入以下代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;div @change=handleTransfer&gt;&lt;/div&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;transferInfo&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 30px; margin-top: 50px;&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-weight: bold&quot;</span>&gt;</span>xxx列表<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 10px&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">transfer</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;true&quot;</span> @<span class="hljs-attr">func</span>=<span class="hljs-string">&quot;getMsgFormTransfer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transfer</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在脚本中引用需要配置好的组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;srcipt&gt;<br><span class="hljs-keyword">import</span> transfer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./transfer.vue&#x27;</span>;      <span class="hljs-comment">// 同文件夹下引用组件</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">components</span>: &#123;                           <span class="hljs-comment">// 组件中声明</span><br>        transfer,                             <br>    &#125;,<br>    data () &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">transferInfo</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-attr">transferMsg</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        &#125;<br>    &#125;,<br>    handleTransfer () &#123;<br>        <span class="hljs-keyword">let</span> reviewStatus = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>            <span class="hljs-comment">/* 判断每一次循环对象的值 */</span><br>            reviewStatus &amp;= <span class="hljs-comment">/* 对每一次循环的值做与运算 */</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (reviewStatus == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">transferInfo</span> = <span class="hljs-literal">true</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">transferInfo</span> = <span class="hljs-literal">false</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-comment">//------------------ 选择三级评审员 ----------------------</span><br>    <span class="hljs-title function_">getMsgFormTransfer</span>(<span class="hljs-params">data</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">transferMsg</span> = data<br>    &#125;,<br>&#125;,<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="/../image/transfer.png" alt="Transfer 穿梭框"></p><h4 id="父组件功能"><a href="#父组件功能" class="headerlink" title="父组件功能"></a>父组件功能</h4><p>在父组件中想要实现满足所有条件后显示子组件中的内容，所以使用 <code>v-if</code> 判断语句来实现。</p><ul><li><code>transferInfo</code>：先给定默认布尔值为 <code>false</code>，等到所有条件满足后，对结果赋值为 <code>true</code>；</li><li><code>handleTransfer</code>：处理判断的所有条件，并对所有条件的结果，赋对应布尔值；</li><li><code>getMsgFormTransfer</code>：定义变量，接收来自子组件传递的数据。</li></ul><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>Vue 使用 <code>import...from...</code> 来导入组件、库、变量等，<code>from</code> 后的来源可以是 js，vue，json。引入文件可以在<br><code>webpack.base.conf.js</code> 中设置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">resolve</span>: &#123;<br>        <span class="hljs-attr">extensions</span>: [<span class="hljs-string">&#x27;.js&#x27;</span>, <span class="hljs-string">&#x27;.vue&#x27;</span>, <span class="hljs-string">&#x27;.json&#x27;</span>],<br>        <span class="hljs-attr">alias</span>: &#123;<br>            <span class="hljs-string">&#x27;@&#x27;</span>: <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;src&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br>...<br></code></pre></td></tr></table></figure><h3 id="引用文件"><a href="#引用文件" class="headerlink" title="引用文件"></a>引用文件</h3><p>extensions 指定了 from 后可导入的文件类型。上面定义的 3 类文件，js 和 vue 可以省略后缀。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> test <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./test.vue&#x27;</span>   <span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">import</span> test <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./test&#x27;</span><br><br><span class="hljs-keyword">import</span> test <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./test.js&#x27;</span>    <span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">import</span> test <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./test&#x27;</span><br><br><span class="hljs-comment">// json不可以省略后缀</span><br><br><span class="hljs-keyword">import</span> test <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./test.json&#x27;</span><br></code></pre></td></tr></table></figure><p>若 <code>test.vue</code> 和 <code>test.js</code> 同时存在于同一个文件夹下，则 import 引入优先级为 <code>js &gt; vue</code>。</p><h3 id="引入文件夹"><a href="#引入文件夹" class="headerlink" title="引入文件夹"></a>引入文件夹</h3><p><code>import test from &#39;./components&#39;</code> 在该情况下的逻辑是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">if</span>(package.<span class="hljs-property">json</span> 存在 &amp;&amp; package.<span class="hljs-property">main</span> 字段存在 &amp;&amp; package.<span class="hljs-property">main</span> 指定的 js 存在) &#123;<br>    取 package.<span class="hljs-property">main</span> 指定的 js 作为 <span class="hljs-keyword">from</span> 的来源，即使该 js 可能格式或内容错误<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( index.<span class="hljs-property">js</span> 存在)&#123;<br>    取 index.<span class="hljs-property">js</span> 作为 <span class="hljs-keyword">from</span> 的来源<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    取 index.<span class="hljs-property">vue</span> 作为 <span class="hljs-keyword">from</span> 的来源<br>&#125;<br></code></pre></td></tr></table></figure><p>因此，若 from 的来源是文件夹，那么在 <code>package.json</code> 存在且设置正确的情况下，会默认加载 <code>package.json</code>；若不满足，则加载 <code>index.js</code>；若不满足，则加载 <code>index.vue</code>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/jin-zhe/p/9268602.html">https://www.cnblogs.com/jin-zhe/p/9268602.html</a></p><p><a href="https://blog.51cto.com/BADAOLIUMANGQZ/6116184">https://blog.51cto.com/BADAOLIUMANGQZ/6116184</a></p><p><a href="https://blog.csdn.net/fyyyr/article/details/83657828">https://blog.csdn.net/fyyyr/article/details/83657828</a></p><p><a href="https://v2.cn.vuejs.org/v2/guide/components-registration.html#%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F">https://v2.cn.vuejs.org/v2/guide/components-registration.html#%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F</a></p><p><a href="https://zh.javascript.info/import-export">https://zh.javascript.info/import-export</a></p><p><a href="https://blog.csdn.net/hongyuancao/article/details/88077749">https://blog.csdn.net/hongyuancao/article/details/88077749</a></p><p><a href="https://www.cainiaojc.com/note/qa36lm.html">https://www.cainiaojc.com/note/qa36lm.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ECharts X轴坐标文字显示不全</title>
    <link href="/2023/04/20/X%E8%BD%B4%E5%9D%90%E6%A0%87%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%85%A8/"/>
    <url>/2023/04/20/X%E8%BD%B4%E5%9D%90%E6%A0%87%E6%96%87%E5%AD%97%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在 ECharts 中应用柱状图或折线图时，当数据量过多时，X 轴坐标信息就会显示不全。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="旋转属性"><a href="#旋转属性" class="headerlink" title="旋转属性"></a>旋转属性</h3><p>ECharts 图表组件内部有一个机制，用于统计 xAxis 坐标刻度的个数和图表宽度，从而会自动调整刻度间隔个数以此达到刻度互相之间不至于很拥挤而影响图表欣赏性。</p><p><code> xAxis.axisLabel. interval</code>：坐标轴刻度标签的显示间隔</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">interval = <span class="hljs-string">&#x27;auto&#x27;</span>,  <span class="hljs-comment">// 采用标签不重叠的策略间隔显示标签</span><br>interval = <span class="hljs-number">0</span>,       <span class="hljs-comment">// 强制显示所有标签</span><br>interval = <span class="hljs-number">1</span>,       <span class="hljs-comment">// 隔一个标签显示一个标签</span><br>interval = <span class="hljs-number">2</span>,       <span class="hljs-comment">// 隔两个标签显示一个标签</span><br></code></pre></td></tr></table></figure><p><code>xAxis.axisLabel. rotate</code>：刻度标签旋转的角度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">rotate = <span class="hljs-number">30</span>,        <span class="hljs-comment">// 旋转角度从 -90° 到 90°</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-attr">xAxis</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span>,<br>    <span class="hljs-attr">axisTick</span>: &#123;<br>        <span class="hljs-attr">alignWithLabel</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-attr">data</span>: [],<br>    <span class="hljs-attr">axisLabel</span>: &#123;<br>        <span class="hljs-attr">interval</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">rotate</span>: <span class="hljs-number">0</span>,<br>    &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="dataZoom"><a href="#dataZoom" class="headerlink" title="dataZoom"></a>dataZoom</h3><p>dataZoom 组件用于区域缩放，从而能自由关注细节的数据信息，或者概览数据整体，或者去除离群点的影响。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-attr">dataZoom</span>: [&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;slider&#x27;</span>,<br>    <span class="hljs-attr">orient</span>: <span class="hljs-string">&quot;horizontal&quot;</span>,<br>    <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,     <span class="hljs-comment">// 控制滚动条显示隐藏</span><br>    <span class="hljs-attr">realtime</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 拖动滚动条时是否动态的更新图表数据</span><br>    <span class="hljs-attr">height</span>: <span class="hljs-number">20</span>,     <span class="hljs-comment">// 滚动条高度</span><br>    <span class="hljs-attr">startValue</span>: <span class="hljs-number">0</span>,  <span class="hljs-comment">// 数据窗口范围的起始数值</span><br>    <span class="hljs-attr">endValue</span>: <span class="hljs-number">6</span>,    <span class="hljs-comment">// 数据窗口范围的结束数值</span><br>    <span class="hljs-attr">bottom</span>: <span class="hljs-string">&#x27;3%&#x27;</span>,   <span class="hljs-comment">// 滚动条距边距离</span><br>    <span class="hljs-attr">zoomLock</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 控制面板是否进行缩放</span><br>&#125;],<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://echarts.apache.org/zh/option.html#xAxis.axisLabel.interval">https://echarts.apache.org/zh/option.html#xAxis.axisLabel.interval</a></p><p><a href="https://my.oschina.net/u/4307631/blog/4012684">https://my.oschina.net/u/4307631/blog/4012684</a></p>]]></content>
    
    
    <categories>
      
      <category>ECharts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈 OTP</title>
    <link href="/2023/04/18/OTP/"/>
    <url>/2023/04/18/OTP/</url>
    
    <content type="html"><![CDATA[<h2 id="OTP-定义"><a href="#OTP-定义" class="headerlink" title="OTP 定义"></a>OTP 定义</h2><p><a href="https://en.wikipedia.org/wiki/Programmable_ROM">OTP</a>（One Time Programmable）是一种非易失性存储器（<a href="https://en.wikipedia.org/wiki/Non-volatile_memory">NVM</a>），有两种不同的实现方式：基于熔丝（<a href="https://en.wikipedia.org/wiki/EFuse">eFuse</a>）实现方式和基于反熔丝（<a href="https://en.wikipedia.org/wiki/Antifuse">AntiFuse</a>）实现方式，两种方式均可以实现一次编程后无法修改数据的目的。</p><p>与 EEPROM 和 Flash Memory 等多次可编程存储器（MTP）相比，OTP 存储器优势在于面积更小，且无需额外的晶圆加工步骤。同时，随着各种安全芯片、安全 SOC 设计的提出，OTP 中能够储存公私钥、加解密等私密数据，一旦经过编程或熔断，内容将无法更改，断电后内容将保留，且支持在制造后进行编程。</p><h2 id="eFuse-和-AntiFuse-区别和联系"><a href="#eFuse-和-AntiFuse-区别和联系" class="headerlink" title="eFuse 和 AntiFuse 区别和联系"></a>eFuse 和 AntiFuse 区别和联系</h2><p>eFuse 和 AntiFuse 存在差异，主要为：编程机制、安全性和功耗等方面。</p><table><thead><tr><th></th><th align="left">Efuse</th><th align="left">AntiFuse</th></tr></thead><tbody><tr><td>熔丝构成</td><td align="left">多晶硅栅极&#x2F;金属栅</td><td align="left">两层金属电极和金属电极间的反熔丝介质层构成</td></tr><tr><td>编程原理</td><td align="left">I&#x2F;O电压施加高密度电流，Efuse<br/>中的低电阻金属由于高密度电流通过<br/>窄金属或多晶硅而被电迁移熔断</td><td align="left">薄栅氧施加高电压，使栅极氧化物击穿</td></tr><tr><td>读取特点</td><td align="left">可读次数较少</td><td align="left">可读次数较多</td></tr><tr><td>阻值变化</td><td align="left">阻值变大</td><td align="left">阻值变小</td></tr><tr><td>安全性</td><td align="left">易被破解，安全性较差，可靠性相对较低</td><td align="left">安全性较高，可靠性较高</td></tr><tr><td>功耗</td><td align="left">功耗较高</td><td align="left">功耗较低</td></tr><tr><td>初始值</td><td align="left">0</td><td align="left">1</td></tr><tr><td></td><td align="left"></td><td align="left"></td></tr></tbody></table><h3 id="编程机制"><a href="#编程机制" class="headerlink" title="编程机制"></a>编程机制</h3><ul><li><p>eFuse</p><p>  eFuse 通过使用 I&#x2F;O 电压以高密度电流流过电熔断金属条或多晶硅类进行编程。当高密度电流流过狭窄的金属或多晶硅时，eFuse 中的低电阻金属因电迁移而熔断。</p><p>  <img src="/../image/%E5%B7%B2%E7%BC%96%E7%A8%8B%E7%9A%84%E5%A4%9A%E6%99%B6%E7%A1%85%20eFuse.png" alt="已编程的多晶硅 eFuse，资料来源：MA-Tek"></p><p>  在烧写过程中，eFuse 两端宽度较大的区域比 eFuse 中间宽度较窄的区域散热效果更好，因此，eFuse 的熔断部分始终位于 eFuse 中间的窄宽度区域。此外，要对一个位（Bit）进行编程需要一对 eFuse 布局，其中一个用于编程，另一个用于差分感应放大器的参考电阻器。同样，eFuse 只能编程一次 “1”，如果编程后 eFuse 无法读取 “1”，则编程失败，这意味着良率损失。</p></li><li><p>AntiFuse</p><p>  AntiFuse 通过雪崩击穿晶体管的栅极和源极电短路进行编程。</p></li></ul><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><ul><li><p>eFuse</p><p>  传统的多晶硅栅极 CMOS 逻辑工艺中，多晶 eFuse 非常流行（如图 1 所示），且 EM 发生在硅化物层。为降低 MOSFET 漏电而开发的新一代高<br>  K 金属栅极（HKMG）CMOS 逻辑工艺中，没有多晶硅层用作 eFuse。因此，英特尔生产的一种不同类型的 eFuse 被实现为金属 1 迹线（如图 2 所示）。</p><p>  <img src="/../image/%E8%8B%B1%E7%89%B9%E5%B0%94%E7%94%9F%E4%BA%A7%E7%9A%84%20Westmere/Clarkdale%20%E5%A4%84%E7%90%86%E5%99%A8%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A8%8B%20eFuse.png" alt="英特尔生产的 Westmere/Clarkdale 处理器中的编程 eFuse。资料来源：[Intel Westmere Clarkdale 32nm 处理器中使用的 eFUSE 结构的自定义分析](https://www.techinsights.com/reports-and-subscriptions/open-market-reports/Report-Profile/?ReportKey=6907)，TechInsights"></p><p>  在图 2 中，金属 1 形成了四对 eFuse，有两个熔断的 eFuse 和六个完好无损的 eFuse，以及与底层驱动晶体管的互连。值得注意的是，eFuse 的熔断部分形状不规则很容易看到。</p><p>  <img src="/../image/TSMC%20eFuse%2020%20nm%20%E5%B9%B3%E9%9D%A2%20HKMG%20%E5%B7%A5%E8%89%BA%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A8%8B%20eFuse.png" alt="TSMC eFuse 20 nm 平面 HKMG 工艺中的编程 eFuse。资料来源：Qualcomm Gobi MDM9235 调制解调器 20 nm HKMG 逻辑详细结构分析，TechInsights。"></p><p>  如图 3 所示，金属 2 形成了四对 eFuse，有两个熔断的 eFuse。</p><p>  <img src="/../image/%E5%B7%B2%E7%BC%96%E7%A8%8B%E7%9A%84%20TSMC%20eFuse%20%E7%9A%84%E6%94%BE%E5%A4%A7%E5%9B%BE.png" alt="已编程的 TSMC eFuse 的放大图。资料来源：Qualcomm Gobi MDM9235 调制解调器 20 nm HKMG 逻辑详细结构分析，TechInsights。"></p><p>  如图 4 所示，显示了两个熔断的 eFuse。</p><p>  从上述图中可以看出，熔断（或编程后）的 eFuse 很容易被检测到。</p></li><li><p>AntiFuse</p><p>  <img src="/../image/eFuse.png" alt="反熔丝结构图"></p><p>  <img src="/../image/%E5%B7%B2%E7%BC%96%E7%A8%8B%E7%9A%84%E5%8F%8D%E7%86%94%E4%B8%9D.png" alt="已编程的反熔丝。资料来源：http://archive.eettaiwan.com/www.eettaiwan.com/emag/1302_15_DC.html，Kilopass。"></p><p>  如图 5 和 图 6 所示，已编程的反熔丝，其横截面或俯视图中没有熔断部分，电压对比 FIB 也没有热点，这能够保证未经授权的用户很难获得存储在反熔丝存储器中的数据内容。</p></li></ul><h3 id="功耗"><a href="#功耗" class="headerlink" title="功耗"></a>功耗</h3><ul><li><p>eFuse</p><p>  未编程的 eFuse 的典型电阻值约为 50 至 100 欧姆，而已编程的 eFuse 的典型电阻值约为 10K 欧姆 至 100K 欧姆。eFuse 中存储的 “0” 越多，消耗的电量就越多。此外，eFuse 的待机功率或泄漏比反熔丝高得多。</p></li><li><p>AntiFuse</p><p>  反熔丝在未编程状态下使用的功率更少，且反熔丝的电阻在未编程状态下更高。未编程位（Bit）的默认值为“0”，因此只需对为“1”的位进行编程。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>采用 AntiFuse 实现方式的 OTP 存储器具有更好的编程良率、更低的未编程位功耗以及总体上更出色的安全性。因此，具有 AntiFuse 的 OTP 存储器比具有 eFuse 的 OTP 存储器更适合移动支付、物联网 (IoT) 和其他应用。</p><h2 id="OTP-基本-Feature"><a href="#OTP-基本-Feature" class="headerlink" title="OTP 基本 Feature"></a>OTP 基本 Feature</h2><h3 id="读（Read）"><a href="#读（Read）" class="headerlink" title="读（Read）"></a>读（Read）</h3><p>支持重复读取 OTP Memory 内容。</p><h3 id="写（Program）"><a href="#写（Program）" class="headerlink" title="写（Program）"></a>写（Program）</h3><p>若对 OTP Memory 进行烧写，不支持对烧写后的位（Bit）再次烧写。支持一次烧写 1 Byte（8 Bit）数据。</p><h3 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h3><p>OTP Memory 可拓展支持 Lock 机制。</p><h3 id="写保护机制"><a href="#写保护机制" class="headerlink" title="写保护机制"></a>写保护机制</h3><p>Mask 和 Program 数据位一一对应。写完后将数据读出来，若两者一致，说明数据成功写入，若两者不一致，找到哪一个比特位写入失败，将其赋值给 Mask。Mask 与 Program 数据进行与运算，再对写失败的位（Bit）进行写入。</p><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul><li>OTP（One Time Programmable）：一次性可编程存储器</li><li>FTP（Few-Time Programmable）：有限次数的可编程储存器</li><li>MTP（Multi Time Programmable）：多次可编程存储器</li><li>eFuse（electronic fuse）：电子保险丝</li><li>NVM（Non-volatile memory）：非易失性存储器</li><li>EM (electro-migration)：电迁移</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://semiengineering.com/knowledge_centers/memory/one-time-programmable-memory/">https://semiengineering.com/knowledge_centers/memory/one-time-programmable-memory/</a></p><p><a href="https://zhuanlan.zhihu.com/p/354196694">https://zhuanlan.zhihu.com/p/354196694</a></p><p><a href="https://semiengineering.com/the-benefits-of-antifuse-otp/">https://semiengineering.com/the-benefits-of-antifuse-otp/</a></p><p><a href="https://zhuanlan.zhihu.com/p/354196694">https://zhuanlan.zhihu.com/p/354196694</a></p><p><a href="https://blog.csdn.net/impossible1224/article/details/122412789">https://blog.csdn.net/impossible1224/article/details/122412789</a></p>]]></content>
    
    
    <categories>
      
      <category>OTP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS 字符串</title>
    <link href="/2023/04/18/JS%20%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2023/04/18/JS%20%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>文本数据被以字符串形式存储，单个字符没有单独的类型。字符串的内部格式始终是 UTF-16，不依赖于页面编码。</p><h2 id="引号（Quotes）"><a href="#引号（Quotes）" class="headerlink" title="引号（Quotes）"></a>引号（Quotes）</h2><p>字符串可以包含在单引号、双引号或反引号中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> single = <span class="hljs-string">&#x27;single-quoted&#x27;</span><br><span class="hljs-keyword">let</span> double = <span class="hljs-string">&quot;double-quoted&quot;</span><br><br><span class="hljs-keyword">let</span> backticks = <span class="hljs-string">`backticks`</span><br></code></pre></td></tr></table></figure><p>单引号和双引号基本相同，但反引号允许通过 <code>$&#123;...&#125;</code> 将任何表达式嵌入到字符串中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-title function_">alert</span>(<span class="hljs-string">`1 + 2 = <span class="hljs-subst">$&#123;sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)&#125;</span>`</span>);  <span class="hljs-comment">// 1 + 2 = 3</span><br></code></pre></td></tr></table></figure><p>使用反引号的另一个优点：允许字符串跨行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> guestList = <span class="hljs-string">`Guests:</span><br><span class="hljs-string">    * A</span><br><span class="hljs-string">    * B</span><br><span class="hljs-string">    * C</span><br><span class="hljs-string">`</span>;<br><span class="hljs-title function_">alert</span>(guestList);   <span class="hljs-comment">// 客人清单，多行</span><br></code></pre></td></tr></table></figure><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>上述换行中，也可通过使用“换行符 <code>\n</code>”支持单引号和双引号来创建跨行字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> guestList = <span class="hljs-string">&quot;Guests:\n * A\n * B\n * C&quot;</span>;<br><span class="hljs-title function_">alert</span>(guestList);   <span class="hljs-comment">// 客人清单，多行</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> str1 = <span class="hljs-string">&quot;Hello\nWorld&quot;</span>;  <span class="hljs-comment">// 使用“换行符”创建的两行字符串</span><br><br><span class="hljs-comment">// 使用反引号和普通的换行创建的两行字符串</span><br><span class="hljs-keyword">let</span> str2 = <span class="hljs-string">`Hello           </span><br><span class="hljs-string">World`</span>;<br><br><span class="hljs-title function_">alert</span>(str1 == str2); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>不常见“特殊”字符表。</p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td><code>\n</code></td><td>换行</td></tr><tr><td><code>\r</code></td><td>在非 Windows OS 上，等同于 <code>\n</code></td></tr><tr><td><code>\&#39;</code>, <code>\&quot;</code></td><td>引号</td></tr><tr><td><code>\\</code></td><td>反斜线</td></tr><tr><td><code>\t</code></td><td>制表符</td></tr><tr><td><code>\xXX</code></td><td>具有给定十六进制 Unicode <code>xx</code> 的 Unicode 字符，例如：<code>\x7A</code> 和 <code>z</code> 相同</td></tr><tr><td><code>\uXXXX</code></td><td>以 UTF-16 编码的十六进制代码 <code>XXXX</code> 的 Unicode 字符，例如 <code>\u00A9</code> —— 是版权符号 © 的 Unicode。它必须正好是 4 个十六进制数字</td></tr><tr><td><code>\u&#123;X...XXXXXX&#125;</code>（1到6个十六进制字符）</td><td>具有给定 UTF-32 编码的 Unicode 符号。一些罕见的字符用两个 Unicode 符号编码，占用 4 个字节</td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>所有特殊符号都以反斜杠字符 <code>\</code> 开始。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;\u00A9&quot;</span>);        <span class="hljs-comment">// ©</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;\u&#123;20331&#125;&quot;</span>);     <span class="hljs-comment">// 佫，罕见的中国象形文字（长 Unicode）</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-string">&quot;\u&#123;1F60D&#125;&quot;</span> );   <span class="hljs-comment">// 😍，笑脸符号（另一个长 Unicode）</span><br></code></pre></td></tr></table></figure><p>如果想要在字符串中插入一个引号，用来表示引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;I\&#x27;m George!&#x27;</span>);  <span class="hljs-comment">// I&#x27;m George!</span><br></code></pre></td></tr></table></figure><p>上面单引号 <code>&#39;&#39;</code> 示例中必须要在内部引号前加上反斜杠 <code>\&#39;</code>，否则将表示字符串结束。</p><p>还可改用双引号或反引号来实现相同效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>( <span class="hljs-string">`I&#x27;m the George!`</span> ); <span class="hljs-comment">// I&#x27;m the George!</span><br></code></pre></td></tr></table></figure><p>如果要在字符串中显示一个实际的反斜杠 <code>\</code>，只需要书写两次 <code>\\</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>( <span class="hljs-string">`The Burberry: \\`</span> ); <span class="hljs-comment">// The Burberry: \</span><br></code></pre></td></tr></table></figure><h2 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h2><p><code>length</code> 表示字符串长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">` My\n`</span>.<span class="hljs-property">length</span>);  <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p>注：<code>\n</code> 是一个单独的“特殊”字符，长度确实是 3。</p><blockquote><p><code>length</code> 是一个属性。</p><p><code>str.length</code> 是一个数字属性，而不是函数，后面不需要添加括号。</p></blockquote><h2 id="访问字符"><a href="#访问字符" class="headerlink" title="访问字符"></a>访问字符</h2><p>若要获取 <code>pos</code> 位置的一个字符，可以使用方括号 <code>[pos]</code> 或者调用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charAt">str.charAt(pos)</a> 方法。第一个字符从零位置开始：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;Hello&quot;</span>;<br><br><span class="hljs-comment">// 第一个字符</span><br><span class="hljs-title function_">alert</span>( str[<span class="hljs-number">0</span>] );        <span class="hljs-comment">// H</span><br><span class="hljs-title function_">alert</span>( str.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>) ); <span class="hljs-comment">// H</span><br><br><span class="hljs-comment">// 最后一个字符</span><br><span class="hljs-title function_">alert</span>( str[str.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>] );   <span class="hljs-comment">// o</span><br></code></pre></td></tr></table></figure><p><code>[]</code> 和 <code>charAt</code> 区别：</p><ul><li>方括号是获取字符的一种现代化方法；<code>charAt</code> 是历史原因才存在；</li><li>唯一区别在于，若没有找到字符，<code>[]</code> 返回 <code>undefined</code>，而 <code>charAt</code>返回一个空字符串。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">`Hello`</span>;<br><br><span class="hljs-title function_">alert</span>( str[<span class="hljs-number">1000</span>] );         <span class="hljs-comment">// undefined</span><br><span class="hljs-title function_">alert</span>( str.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">1000</span>) );  <span class="hljs-comment">// &#x27;&#x27;（空字符串）</span><br></code></pre></td></tr></table></figure><p>同样，可以使用 <code>for...of</code> 遍历字符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> char <span class="hljs-keyword">of</span> <span class="hljs-string">&quot;Hello&quot;</span>) &#123;<br>    <span class="hljs-title function_">alert</span>(char);            <span class="hljs-comment">// H,e,l,l,o（char 变成&quot;H&quot;，然后是&quot;e&quot;...）</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符串不可变"><a href="#字符串不可变" class="headerlink" title="字符串不可变"></a>字符串不可变</h2><p>在 JavaScript 中，字符串不可更改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;Hi&#x27;</span>;<br><br>str[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;h&#x27;</span>;       <span class="hljs-comment">// error</span><br><span class="hljs-title function_">alert</span>( str[<span class="hljs-number">0</span>] );    <span class="hljs-comment">// 无法运行</span><br></code></pre></td></tr></table></figure><p>常见的解决方法是创建一个新的字符串，并将其分配给 <code>str</code> 而不是以前的字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;Hi&#x27;</span>;<br><br>str = <span class="hljs-string">&#x27;h&#x27;</span> + str[<span class="hljs-number">1</span>]; <span class="hljs-comment">// 替换字符串</span><br><span class="hljs-title function_">alert</span>( str );       <span class="hljs-comment">// hi</span><br></code></pre></td></tr></table></figure><h2 id="改变大小写"><a href="#改变大小写" class="headerlink" title="改变大小写"></a>改变大小写</h2><h3 id="toLowerCase-和-toUpperCase"><a href="#toLowerCase-和-toUpperCase" class="headerlink" title="toLowerCase() 和 toUpperCase()"></a>toLowerCase() 和 toUpperCase()</h3><p>使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase">toLowerCase()</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase">toUpperCase()</a> 方法可以改变大小写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>( <span class="hljs-string">&#x27;Interface&#x27;</span>.<span class="hljs-title function_">toUpperCase</span>() ); <span class="hljs-comment">// INTERFACE</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-string">&#x27;Interface&#x27;</span>.<span class="hljs-title function_">toLowerCase</span>() ); <span class="hljs-comment">// interface</span><br></code></pre></td></tr></table></figure><p>也可使一个字符变成小写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>( <span class="hljs-string">&#x27;Interface&#x27;</span>[<span class="hljs-number">0</span>].<span class="hljs-title function_">toLowerCase</span>() );  <span class="hljs-comment">// i</span><br></code></pre></td></tr></table></figure><h2 id="查找子字符串"><a href="#查找子字符串" class="headerlink" title="查找子字符串"></a>查找子字符串</h2><p>在字符串中查找子字符串的方法。</p><h3 id="str-indexOf"><a href="#str-indexOf" class="headerlink" title="str.indexOf"></a>str.indexOf</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf">str.indexOf(substr, pos)</a> 从给定位置 <code>pos</code> 开始，在 <code>str</code> 中查找 <code>substr</code>，若没有找到，则返回 <code>-1</code>，否则返回匹配成功的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;Widget with id&#x27;</span>;<br><br><span class="hljs-title function_">alert</span>( str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;Widget&#x27;</span>) ); <span class="hljs-comment">// 0，因为 &#x27;Widget&#x27; 一开始就被找到</span><br><span class="hljs-title function_">alert</span>( str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;widget&#x27;</span>) ); <span class="hljs-comment">// -1，没有找到，检索是大小写敏感的</span><br><br><span class="hljs-title function_">alert</span>( str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;id&quot;</span>) );     <span class="hljs-comment">// 1，&quot;id&quot; 在位置 1 处（……idget 和 id）</span><br></code></pre></td></tr></table></figure><p>可选的第二个参数允许从一个给定的位置开始检索。例如，<code>id</code> 第一次出现的位置是 <code>1</code>，查询到下一个存在的位置时，从 2 开始检索。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;Widget with id&#x27;</span>;<br><br><span class="hljs-title function_">alert</span>( str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-number">2</span>) ) <span class="hljs-comment">// 12</span><br></code></pre></td></tr></table></figure><p>若对所有存在的位置都感兴趣，可以在一个循环中使用 <code>indexOf</code>。每一次新的调用都发生在上一匹配位置之后。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;As sly as a fox, as strong as an ox&#x27;</span>;<br><span class="hljs-keyword">let</span> target = <span class="hljs-string">&#x27;as&#x27;</span>;  <span class="hljs-comment">// 这是我们要查找的目标</span><br><br><span class="hljs-keyword">let</span> pos = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">let</span> foundPos = str.<span class="hljs-title function_">indexOf</span>(target, pos);<br>    <span class="hljs-keyword">if</span>(foundPos == -<span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>    <span class="hljs-title function_">alert</span>( <span class="hljs-string">`Found at <span class="hljs-subst">$&#123;foundPos&#125;</span>`</span> );<br>    pos = foundPos + <span class="hljs-number">1</span>; <span class="hljs-comment">// 继续从下一位置查找</span><br>&#125;<br>---------- 算法简写 ---------<br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;As sly as a fox, as strong as an ox&quot;</span>;<br><span class="hljs-keyword">let</span> target = <span class="hljs-string">&quot;as&quot;</span>;<br><br><span class="hljs-keyword">let</span> pos = -<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>((pos = str.<span class="hljs-title function_">indexOf</span>(target, pos + <span class="hljs-number">1</span>)) != -<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-title function_">alert</span>( pos );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="str-lastIndexOf-substr-pos"><a href="#str-lastIndexOf-substr-pos" class="headerlink" title="str.lastIndexOf(substr, pos)"></a>str.lastIndexOf(substr, pos)</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf">str.lastIndexOf(substr, position)</a>，它从字符串的末尾开始搜索到开头，将会以相反的顺序列出这些事件。</p><h2 id="按位（bitwise）NOT技巧"><a href="#按位（bitwise）NOT技巧" class="headerlink" title="按位（bitwise）NOT技巧"></a>按位（bitwise）NOT技巧</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT">bitwise NOT</a> <code>~</code> 运算符，能将数字转化为 32-bit 整数，（若存在小数部分，则删除小数部分），然后对其二进制表示形式中的所有位取反。</p><p>对于 32-bit 整数，<code>~n</code> 等于 <code>-(n+1)</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>( ~<span class="hljs-number">2</span> );    <span class="hljs-comment">// -3，和 -(2+1) 相同</span><br><span class="hljs-title function_">alert</span>( ~<span class="hljs-number">1</span> );    <span class="hljs-comment">// -2，和 -(1+1) 相同</span><br><span class="hljs-title function_">alert</span>( ~<span class="hljs-number">0</span> );    <span class="hljs-comment">// -1，和 -(0+1) 相同</span><br><span class="hljs-title function_">alert</span>( ~-<span class="hljs-number">1</span> );   <span class="hljs-comment">// 0，和 -(-1+1) 相同</span><br></code></pre></td></tr></table></figure><p>只有当 <code>n == -1</code> 时，<code>~n</code> 才为零。</p><h2 id="includes-startWith-endsWith"><a href="#includes-startWith-endsWith" class="headerlink" title="includes, startWith, endsWith"></a>includes, startWith, endsWith</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/includes">str.includes(substr, pos)</a>方法根据 <code>str</code> 中是否包含 <code>substr</code> 来返回 <code>true/false</code>。</p><p>如果需要检测匹配，则不需要第二个位置参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>( <span class="hljs-string">&quot;Widget with id&quot;</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;Widget&quot;</span>) );   <span class="hljs-comment">// true</span><br><br><span class="hljs-title function_">alert</span>( <span class="hljs-string">&quot;Hello&quot;</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;Bye&quot;</span>) );               <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p><code>str.includes</code> 的第二个可选参数是开始搜索的起始位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>( <span class="hljs-string">&quot;Widget&quot;</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;id&quot;</span>) );       <span class="hljs-comment">// true</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-string">&quot;Widget&quot;</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-number">3</span>) );    <span class="hljs-comment">// false, 从位置 3 开始没有 &quot;id&quot;</span><br></code></pre></td></tr></table></figure><p>方法 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith">str.startsWith</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith">str.endsWith</a> 的功能与其名称所表示的意思相同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>( <span class="hljs-string">&quot;Widget&quot;</span>.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;Wid&quot;</span>) );    <span class="hljs-comment">// true，&quot;Widget&quot; 以 &quot;Wid&quot; 开始</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-string">&quot;Widget&quot;</span>.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&quot;get&quot;</span>) );      <span class="hljs-comment">// true，&quot;Widget&quot; 以 &quot;get&quot; 结束</span><br></code></pre></td></tr></table></figure><h2 id="获取子字符串"><a href="#获取子字符串" class="headerlink" title="获取子字符串"></a>获取子字符串</h2><p>JavaScript 中有三种获取字符串的方法：<code>substring</code>、<code>substr</code>、<code>slice</code>。</p><h3 id="str-slice-start-end"><a href="#str-slice-start-end" class="headerlink" title="str.slice(start [, end])"></a>str.slice(start [, end])</h3><p><code>str.slice(start [, end])</code> 返回字符串从 <code>start</code> 到（但不包括） end 的部分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;stringify&quot;</span>;<br><span class="hljs-title function_">alert</span>( str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>) );   <span class="hljs-comment">// &#x27;strin&#x27;，从 0 到 5 的子字符串（不包括 5）</span><br><span class="hljs-title function_">alert</span>( str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>) );   <span class="hljs-comment">// &#x27;s&#x27;，从 0 到 1，但不包括 1，所以只有在 0 处的字符</span><br></code></pre></td></tr></table></figure><p>若没有第二个参数，slice 会一直运行到字符串末尾。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;stringify&quot;</span>;<br><span class="hljs-title function_">alert</span>( str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>) );      <span class="hljs-comment">// 从第二个位置直到结束</span><br></code></pre></td></tr></table></figure><p><code>start/end</code> 也有可能是负值，意思为起始位置从字符串结尾计算。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;stringify&quot;</span>;<br><br><span class="hljs-comment">// 从右边的第四个位置开始，在右边的第一个位置结束</span><br><span class="hljs-title function_">alert</span>( str.<span class="hljs-title function_">slice</span>(-<span class="hljs-number">4</span>, -<span class="hljs-number">1</span>) ); <span class="hljs-comment">// &#x27;gif&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="str-substring-start-end"><a href="#str-substring-start-end" class="headerlink" title="str.substring(start [, end])"></a>str.substring(start [, end])</h3><p><code>str.substring(start [, end])</code> 方法与 <code>slice</code> 几乎相同，但其允许 <code>start</code> 大于 <code>end</code>，将返回字符串从 <code>start</code> 到（但不包括）<code>end</code> 的部分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;stringify&quot;</span>;<br><br><span class="hljs-comment">// 这些对于 substring 是相同的</span><br><span class="hljs-title function_">alert</span>( str.<span class="hljs-title function_">substring</span>(<span class="hljs-number">2</span>, <span class="hljs-number">6</span>) );   <span class="hljs-comment">// &quot;ring&quot;</span><br><span class="hljs-title function_">alert</span>( str.<span class="hljs-title function_">substring</span>(<span class="hljs-number">6</span>, <span class="hljs-number">2</span>) );   <span class="hljs-comment">// &quot;ring&quot;</span><br><br><span class="hljs-comment">// ……但对 slice 是不同的：</span><br><span class="hljs-title function_">alert</span>( str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">6</span>) );       <span class="hljs-comment">// &quot;ring&quot;（一样）</span><br><span class="hljs-title function_">alert</span>( str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">6</span>, <span class="hljs-number">2</span>) );       <span class="hljs-comment">// &quot;&quot;（空字符串）</span><br></code></pre></td></tr></table></figure><h3 id="str-substr-start-length"><a href="#str-substr-start-length" class="headerlink" title="str.substr(start [, length])"></a>str.substr(start [, length])</h3><p><code>str.substr(start [, length])</code> 方法允许指定 length 而不是结束位置，返回字符串从 <code>start</code> 开始的给定 <code>length</code> 的部分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;stringify&quot;</span>;<br><span class="hljs-title function_">alert</span>( str.<span class="hljs-title function_">substr</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>) );  <span class="hljs-comment">// &#x27;ring&#x27;，从位置 2 开始，获取 4 个字符</span><br></code></pre></td></tr></table></figure><p>若第一个参数为负数，则从结尾算起。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;stringify&quot;</span>;<br><span class="hljs-title function_">alert</span>( str.<span class="hljs-title function_">substr</span>(-<span class="hljs-number">4</span>, <span class="hljs-number">2</span>) ); <span class="hljs-comment">// &#x27;gi&#x27;，从第 4 位获取 2 个字符</span><br></code></pre></td></tr></table></figure><h2 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h2><p>字符串按照字母顺序逐字比较，但总存在一些问题。</p><ol><li><p>小写字母总大于大写字母。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>( <span class="hljs-string">&#x27;a&#x27;</span> &gt; <span class="hljs-string">&#x27;Z&#x27;</span> ); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p>带变音符号的字母存在“乱序”的情况。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>( <span class="hljs-string">&#x27;Österreich&#x27;</span> &gt; <span class="hljs-string">&#x27;Zealand&#x27;</span> ); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li></ol><p>上述两种情况原因为，所有的字符串都使用 UTF-16 编码。即：每个字符都有对应的数字代码。有特殊的方法可以获取代码表示的字符，以及字符对应的代码。</p><h3 id="str-codePointAt-pos"><a href="#str-codePointAt-pos" class="headerlink" title="str.codePointAt(pos)"></a>str.codePointAt(pos)</h3><p><code>str.codePointAt(pos)</code> 方法返回在 <code>pos</code> 位置的字符代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 不同的字母有不同的代码</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-string">&quot;z&quot;</span>.<span class="hljs-title function_">codePointAt</span>(<span class="hljs-number">0</span>) );    <span class="hljs-comment">// 122</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-string">&quot;Z&quot;</span>.<span class="hljs-title function_">codePointAt</span>(<span class="hljs-number">0</span>) );    <span class="hljs-comment">// 90</span><br></code></pre></td></tr></table></figure><h3 id="String-fromCodePoint-code"><a href="#String-fromCodePoint-code" class="headerlink" title="String.fromCodePoint(code)"></a>String.fromCodePoint(code)</h3><p><code>String.fromCodePoint(code)</code> 方法通过数字 <code>code</code> 创建字符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>( <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCodePoint</span>(<span class="hljs-number">90</span>) );  <span class="hljs-comment">// Z</span><br></code></pre></td></tr></table></figure><p>还可以用 <code>\u</code> 后跟十六进制代码，通过这些代码添加 Unicode 字符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 在十六进制系统中 90 为 5a</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-string">&#x27;\u005a&#x27;</span> );  <span class="hljs-comment">// Z</span><br></code></pre></td></tr></table></figure><p>代码为 65..220 的字符（拉丁字母和一些额外的字符），方法是创建一个字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">65</span>; i &lt;= <span class="hljs-number">220</span>; i++) &#123;<br>  str += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCodePoint</span>(i);<br>&#125;<br><span class="hljs-title function_">alert</span>( str );<br><span class="hljs-comment">// ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz&#123;|&#125;~</span><br><span class="hljs-comment">// ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜ</span><br></code></pre></td></tr></table></figure><p>字符通过数字代码进行比较。越大的代码意味着字符越大。<code>a</code>（97）的代码大于 <code>Z</code>（90）的代码。</p><ul><li>所有小写字母追随在大写字母之后，因为它们的代码更大；</li><li>一些像 <code>Ö</code> 的字母与主要字母表不同。这里，它的代码比任何从 <code>a</code> 到 <code>z</code> 的代码都要大。</li></ul><h2 id="正确的比较"><a href="#正确的比较" class="headerlink" title="正确的比较"></a>正确的比较</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">String.prototype.localeCompare()</a> 方法会根据语言规则返回一个整数，这个整数能指示字符串 <code>str</code> 在排序顺序中排在字符串 <code>str2</code> 前面、后面、还是相同。</p><ul><li>如果 <code>str</code> 排在 <code>str2</code> 前面，则返回负数；</li><li>如果 <code>str</code> 排在 <code>str2</code> 后面，则返回正数；</li><li>如果他们在相同位置，则返回 <code>0</code>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>( <span class="hljs-string">&#x27;Österreich&#x27;</span>.<span class="hljs-title function_">localeCompare</span>(<span class="hljs-string">&#x27;Zealand&#x27;</span>) ); <span class="hljs-comment">// -1</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>有 3 种类型的引号。反引号允许字符串跨越多行并可以使用 <code>$&#123;…&#125;</code> 在字符串中嵌入表达式；</li><li>JavaScript 中的字符串使用的是 UTF-16 编码；</li><li>我们可以使用像 <code>\n</code> 这样的特殊字符或通过使用 <code>\u...</code> 来操作它们的 Unicode 进行字符插入；</li><li>获取字符时，使用 <code>[]</code>；</li><li>获取子字符串，使用 <code>slice</code> 或 <code>substring</code>；</li><li>字符串的大&#x2F;小写转换，使用：<code>toLowerCase/toUpperCase</code>；</li><li>查找子字符串时，使用 <code>indexOf</code> 或 <code>includes/startsWith/endsWith</code> 进行简单检查；</li><li>根据语言比较字符串时使用 <code>localeCompare</code>，否则将按字符代码进行比较。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zh.javascript.info/string">https://zh.javascript.info/string</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字类型</title>
    <link href="/2023/04/17/%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B/"/>
    <url>/2023/04/17/%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><p>JavaScript 中 数字（number）有两种类型：</p><ol><li>常规类型，常规数字以 64 位的格式存储，也被称为“双精度浮点数”；</li><li>特殊类型，<code>BigInt</code> 用于表示任意长度的整数。</li></ol><h2 id="编写数字的更多方法"><a href="#编写数字的更多方法" class="headerlink" title="编写数字的更多方法"></a>编写数字的更多方法</h2><p>例如，10 亿的常规表示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> billion = <span class="hljs-number">1000000000</span>;<br></code></pre></td></tr></table></figure><p>同样，也可使用下划线 <code>_</code> 作为分隔符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> billion = <span class="hljs-number">1_000_000_000</span>;<br></code></pre></td></tr></table></figure><p>下划线扮演“语法糖”的角色，使得数字具有更强的可读性。</p><p>同样，也可通过数字后面附加字母 <code>e</code> 并指定零的个数来缩短数字。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> billion = <span class="hljs-number">1e9</span>;  <span class="hljs-comment">// 1o亿，字面意思：数字 1 后面跟 9 个 0</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-number">7.3e9</span>);       <span class="hljs-comment">// 73亿，（与 7300000000 和 7_300_000_000 相同）</span><br>-----------------------<br><span class="hljs-number">1e3</span> === <span class="hljs-number">1</span> * <span class="hljs-number">1000</span>;   <span class="hljs-comment">// e3 表示 *1000</span><br><span class="hljs-number">1.23e6</span> === <span class="hljs-number">1.23</span> * <span class="hljs-number">1000000</span>;  <span class="hljs-comment">// e6 表示 *1000000</span><br>-----------------------<br><span class="hljs-keyword">let</span> mcs = <span class="hljs-number">0.000001</span>;<br><span class="hljs-keyword">let</span> mcs = <span class="hljs-number">1e-6</span>;     <span class="hljs-comment">// 1 的左边有 6 个 0</span><br>-----------------------<br><span class="hljs-number">1e-3</span> === <span class="hljs-number">1</span> / <span class="hljs-number">1000</span>;  <span class="hljs-comment">// 0.001</span><br><span class="hljs-number">1.23e-6</span> === <span class="hljs-number">1.23</span> / <span class="hljs-number">1000000</span>; <span class="hljs-comment">// 0.00000123</span><br><span class="hljs-number">1234e-2</span> === <span class="hljs-number">1234</span> / <span class="hljs-number">100</span>;     <span class="hljs-comment">// 12.34，小数点移动两次</span><br></code></pre></td></tr></table></figure><h2 id="十六进制、二进制和八进制"><a href="#十六进制、二进制和八进制" class="headerlink" title="十六进制、二进制和八进制"></a>十六进制、二进制和八进制</h2><ul><li>十六进制（0x）：常用于表示颜色、编码字符等；</li><li>八进制（0o）</li><li>二进制（0b）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>( <span class="hljs-number">0xff</span> );      <span class="hljs-comment">// 255</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-number">0xFF</span> );      <span class="hljs-comment">// 255（一样，大小写没影响）</span><br>-----------------------<br><span class="hljs-keyword">let</span> a = <span class="hljs-number">0b11111111</span>; <span class="hljs-comment">// 二进制形式的 255</span><br><span class="hljs-keyword">let</span> b = <span class="hljs-number">0o377</span>;      <span class="hljs-comment">// 八进制形式的 255</span><br><br><span class="hljs-title function_">alert</span>( a == b );    <span class="hljs-comment">// true，两边是相同的数字，都是 255</span><br></code></pre></td></tr></table></figure><h3 id="toString-base"><a href="#toString-base" class="headerlink" title="toString(base)"></a>toString(base)</h3><p>字符串方法 <code>num.toString(base)</code> 返回在给定 <code>base</code> 进制数字系统中 <code>num</code> 的字符串表示形式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> num = <span class="hljs-number">255</span>;<br><span class="hljs-title function_">alert</span>( num.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>) );  <span class="hljs-comment">// ff</span><br><span class="hljs-title function_">alert</span>( num.<span class="hljs-title function_">toString</span>(<span class="hljs-number">2</span>) );   <span class="hljs-comment">// 11111111</span><br></code></pre></td></tr></table></figure><p>base 的范围可以从 2 到 36，默认情况为 10.</p><ul><li>base&#x3D;16，用于十六进制颜色，字符编码等，数字可以是 0..9 或 A..F。</li><li>base&#x3D;2，主要用于调试按位操作，数字可以是 0 或 1。</li><li>base&#x3D;36，是最大进制，数字可以是 0..9 或 A..Z。所有拉丁字母都被用于了表示数字。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>( <span class="hljs-number">123456.</span>.<span class="hljs-title function_">toString</span>(<span class="hljs-number">36</span>) ); <span class="hljs-comment">// 2n9c</span><br></code></pre></td></tr></table></figure><h2 id="舍入"><a href="#舍入" class="headerlink" title="舍入"></a>舍入</h2><p>舍入（rounding）是使用数字时最常用的操作之一。</p><h3 id="Math-floor"><a href="#Math-floor" class="headerlink" title="Math.floor"></a>Math.floor</h3><p>向下舍入：<code>3.1</code> 变成 <code>3</code>，<code>-1.1</code> 变成 <code>-2</code>。</p><h3 id="Math-ceil"><a href="#Math-ceil" class="headerlink" title="Math.ceil"></a>Math.ceil</h3><p>向上舍入：<code>3.1</code> 变成 <code>4</code>，<code>-1.1</code> 变成 <code>-1</code>。</p><h3 id="Math-round"><a href="#Math-round" class="headerlink" title="Math.round"></a>Math.round</h3><p>向最近的整数舍入：<code>3.1</code> 变成 <code>3</code>，<code>3.6</code> 变成 <code>4</code>，中间值 <code>3.5</code> 变成 <code>4</code>。</p><h3 id="Math-trunc"><a href="#Math-trunc" class="headerlink" title="Math.trunc"></a>Math.trunc</h3><p>移除小数点后的所有内容而没有舍入：<code>3.1</code> 变成 <code>3</code>，<code>-1.1</code> 变成 <code>-1</code>。</p><h3 id="parseInt-和-parseFloat"><a href="#parseInt-和-parseFloat" class="headerlink" title="parseInt 和 parseFloat"></a>parseInt 和 parseFloat</h3><p><code>parseInt</code>、<code>parseFloat</code>： 从 <code>100px</code>、<code>19€</code> 带有单位的值中提取出一个数值，可以从字符串中“读取”数字，直到无法读取为止，若发生 error，则返回收集到的数字。</p><ul><li><code>parseInt</code>：返回一个整数；</li><li><code>parseFloat</code>：返回一个浮点数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>( <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;100px&#x27;</span>) );     <span class="hljs-comment">// 100</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&#x27;12.5em&#x27;</span>) );  <span class="hljs-comment">// 12.5</span><br><br><span class="hljs-title function_">alert</span>( <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;12.3&#x27;</span>) );      <span class="hljs-comment">// 12，只有整数部分被返回了</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&#x27;12.3.4&#x27;</span>) );  <span class="hljs-comment">// 12.3，在第二个点出停止了读取</span><br></code></pre></td></tr></table></figure><p>在某种情况下，当没有数据可读时，<code>parseInt/parseFloat</code> 会返回 <code>NaN</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>( <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;a123&#x27;</span>) );      <span class="hljs-comment">// NaN，第一个符号停止了读取</span><br></code></pre></td></tr></table></figure><p><strong>parseInt(str, radix) 的第二个参数</strong></p><p><code>parseInt()</code> 函数具有可选的第二个参数。它指定了数字系统的基数，因此 <code>parseInt</code> 还可以解析十六进制数字、二进制数字等的字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>( <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;0xff&#x27;</span>, <span class="hljs-number">16</span>) );  <span class="hljs-comment">// 255</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;ff&#x27;</span>, <span class="hljs-number">16</span>) );    <span class="hljs-comment">// 255，没有 0x 仍然有效</span><br><br><span class="hljs-title function_">alert</span>( <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;2n9c&#x27;</span>, <span class="hljs-number">36</span>) );  <span class="hljs-comment">// 123456</span><br></code></pre></td></tr></table></figure><h2 id="其他数学函数"><a href="#其他数学函数" class="headerlink" title="其他数学函数"></a>其他数学函数</h2><p>JavaScript 有一个内建的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math">Math</a> 对象，它包含了一个小型的数学函数和常量库。</p><h3 id="Math-random"><a href="#Math-random" class="headerlink" title="Math.random()"></a>Math.random()</h3><p>返回一个从 0 到 1 的随机数（不包括 1）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>( <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() );     <span class="hljs-comment">// 0.1234567894322</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() );     <span class="hljs-comment">// 0.5435252343232</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() );     <span class="hljs-comment">// ... (任何随机数)</span><br></code></pre></td></tr></table></figure><h3 id="Math-max-a-b-c…-和-Math-min-a-b-c…"><a href="#Math-max-a-b-c…-和-Math-min-a-b-c…" class="headerlink" title="Math.max(a, b, c…) 和 Math.min(a, b, c…)"></a>Math.max(a, b, c…) 和 Math.min(a, b, c…)</h3><p>从任意数量的参数中返回最大值和最小值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>( <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>) ); <span class="hljs-comment">// 5</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) );            <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h3 id="Math-pow-n-power"><a href="#Math-pow-n-power" class="headerlink" title="Math.pow(n, power)"></a>Math.pow(n, power)</h3><p>返回 n 的给定（power）次幂。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">alert</span>( <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">10</span>) );   <span class="hljs-comment">// 2 的 10 次幂 = 1024</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>带有很多零的数字</p><ul><li>将 “e” 和 0 的数量附加到数字后。就像：123e6 与 123 后面接 6 个 0 相同；</li><li>“e” 后面的负数将使数字除以 1 后面接着给定数量的零的数字。例如 123e-6 表示 0.000123（123 的百万分之一）。</li></ul><p>对于不同的数字系统：</p><ul><li>可以直接在十六进制（<code>0x</code>），八进制（<code>0o</code>）和二进制（<code>0b</code>）系统中写入数字；</li><li><code>parseInt(str, base)</code> 将字符串 <code>str</code> 解析为在给定的 base 数字系统中的整数，<code>2 ≤ base ≤ 36</code>；</li><li><code>num.toString(base)</code> 将数字转换为在给定的 base 数字系统中的字符串。</li></ul><p>小数：</p><ul><li>使用 <code>Math.floor</code>，<code>Math.ceil</code>，<code>Math.trunc</code>，<code>Math.round</code> 或 <code>num.toFixed(precision)</code> 进行舍入；</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zh.javascript.info/number">https://zh.javascript.info/number</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原始类型的方法</title>
    <link href="/2023/04/17/%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2023/04/17/%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="原始类型和对象区别"><a href="#原始类型和对象区别" class="headerlink" title="原始类型和对象区别"></a>原始类型和对象区别</h2><p>一个原始值：</p><ul><li>是原始类型中的一种值；</li><li>在 JavaScript 中有7中原始类型：<code>string</code>、<code>number</code>、<code>bigint</code>、<code>boolean</code>、<code>symbol</code>、<code>null</code> 和 <code>undefined</code>。</li></ul><p>一个对象：</p><ul><li>能够存储多个值作为属性；</li><li>可以使用大括号 <code>&#123;&#125;</code> 创建对象，例如：<code>&#123;name：&quot;John&quot;, age: 30&#125;</code>。函数也是对象。</li></ul><p>例如：将一个函数作为对象的属性存储到对象中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> john = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>    <span class="hljs-attr">syaHi</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br>    &#125;<br>&#125;;<br><br>john.<span class="hljs-title function_">sayHi</span>();   <span class="hljs-comment">// Hello World!</span><br></code></pre></td></tr></table></figure><p>上述创建了一个包含 <code>sayHi</code> 方法的对象 <code>john</code>，但对象比原始类型“更重”，需要额外的资源来支持运作。</p><h2 id="当做对象的原始类型"><a href="#当做对象的原始类型" class="headerlink" title="当做对象的原始类型"></a>当做对象的原始类型</h2><p>为解决如下两个问题：</p><ol><li>想对诸如字符串或数字之类的原始类型执行操作；</li><li>原始类型必须尽可能的简单轻量。</li></ol><p>提出如下的解决方法：</p><ol><li>原始类型仍然是原始的，与预期相同，提供单个值；</li><li>JavaScript 允许访问字符串、数字、布尔值和 symbol 的方法和属性；</li><li>为使它们起作用，创建了提供额外功能的特殊“对象包装器”，使用后即被销毁。</li></ol><p>“对象包装器”对于每种原始类型都是不同的，其被称为 <code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Symbol</code> 和 <code>Bigint</code>。因此提供了不同的方法。</p><h3 id="str-toUpperCase"><a href="#str-toUpperCase" class="headerlink" title="str.toUpperCase()"></a>str.toUpperCase()</h3><p>字符串方法 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase">str.toUpperCase()</a> 返回一个大写化处理的字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;Hello&quot;</span>;<br><span class="hljs-title function_">alert</span>(str.<span class="hljs-title function_">toUpperCase</span>());   <span class="hljs-comment">// HELLO</span><br></code></pre></td></tr></table></figure><p><code>toUpperCase()</code> 中实际发生的情况：</p><ol><li>字符串 str 是一个原始值。在访问其属性时，会创建一个包含字符串字面量的特殊对象，并且具有可用的方法，如 <code>toUpperCase()</code>；</li><li>该方法运行并返回一个新的字符串（由 <code>alert</code> 显示）；</li><li>特殊对象被销毁后，只留下原始值 <code>str</code>。</li></ol><p>所以原始类型可以提供方法，但他们依然是轻量级。</p><h3 id="toFixed-n"><a href="#toFixed-n" class="headerlink" title="toFixed(n)"></a>toFixed(n)</h3><p>数量方法，如 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed">toFixed(n)</a> 将数字舍入到给定的精度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> n = <span class="hljs-number">1.23456</span>;<br><br><span class="hljs-title function_">alert</span>(n.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>));    <span class="hljs-comment">// 1.23</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>除 null 和 undefined 以外的原始类型都提供了许多有用的方法；</li><li>从形式上看，这些方法通过临时对象工作，但 JavaScript 引擎可以很好的调整，以在内部对齐进行优化，因此调用并不需要太高的成本。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zh.javascript.info/primitives-methods">https://zh.javascript.info/primitives-methods</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构造器和操作符“new”</title>
    <link href="/2023/04/17/%E6%9E%84%E9%80%A0%E5%99%A8/"/>
    <url>/2023/04/17/%E6%9E%84%E9%80%A0%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>构造函数一般为常规函数，在构造时通常有以下两个约定：</p><ul><li>命名以答谢字母开始；</li><li>只能由 <code>new</code> 操作符来执行；</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">User</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">isAdmin</span> = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">let</span> user = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Jack&quot;</span>);<br><br><span class="hljs-title function_">alert</span>(user.<span class="hljs-property">name</span>);       <span class="hljs-comment">// Jack</span><br><span class="hljs-title function_">alert</span>(user.<span class="hljs-property">isAdmin</span>);    <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>当一个函数被使用 <code>new</code> 操作符执行时，会执行如下步骤：</p><ul><li>一个新的空对象会被创建并分配给 <code>this</code>；</li><li>函数体执行，通常会修改 <code>this</code>，为其添加新的属性；</li><li>返回 <code>this</code> 的值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">User</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-comment">// this = &#123;&#125;; 隐式创建</span><br><br>    <span class="hljs-comment">// 添加属性到 this</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">isAdmin</span> = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">// return this； 隐式返回</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>new User(&quot;Jack&quot;)</code> 的结果与上面为同样的对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> <span class="hljs-title class_">User</span> =  &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">isAdmin</span> = <span class="hljs-literal">false</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="构造器模式测试"><a href="#构造器模式测试" class="headerlink" title="构造器模式测试"></a>构造器模式测试</h2><p>在函数内部，可使用 <code>new.target</code> 属性来检查是否被 <code>new</code> 调用。对于常规调用，结果为 <code>undefined</code>，对于使用 <code>new</code> 的调用，则等于该函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span>  <span class="hljs-title function_">User</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-keyword">new</span>.<span class="hljs-property">target</span>);<br>&#125;<br><br><span class="hljs-comment">// 不带 new</span><br><span class="hljs-title class_">User</span>();     <span class="hljs-comment">// undefined</span><br><br><span class="hljs-comment">// 带 new</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(); <span class="hljs-comment">// function User &#123;...&#125;</span><br></code></pre></td></tr></table></figure><p><code>new.target</code> 属性可被用在函数内部，来判断该函数是被通过 <code>new</code> 调用的“构造器模式”，还是没被通过 <code>new</code> 调用的“常规模式”。</p><p>同时，也可让 new 调用和常规调用做相同的工作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">User</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">new</span>.<span class="hljs-property">target</span>) &#123;           <span class="hljs-comment">// 若没有通过 new 运行</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(name);  <span class="hljs-comment">// 将会添加 new</span><br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>&#125;<br><br><span class="hljs-keyword">let</span> john = <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;John&quot;</span>);    <span class="hljs-comment">// 将调用重定向到新用户</span><br><span class="hljs-title function_">alert</span>(john.<span class="hljs-property">name</span>);           <span class="hljs-comment">// John</span><br></code></pre></td></tr></table></figure><h2 id="构造器的-return"><a href="#构造器的-return" class="headerlink" title="构造器的 return"></a>构造器的 return</h2><p>通常，构造器没有 return 语句，其任务是将所有必要的东西写入 this，并自动转化为结果。</p><p>但如果这有一个 return 语句，规则就简单：</p><ul><li>若 return 返回值是一个对象，则返回这个对虾干，而不是 this；</li><li>若 return 返回的是一个原始类型，则忽略；</li></ul><p>换句话说，带有对象的 return 返回该对象，在所有其他情况下返回 this。</p><p>例如，<code>return</code> 通过返回一个对象覆盖 <code>this</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">BigUser</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;John&quot;</span>;<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;George&quot;</span>&#125;;    <span class="hljs-comment">// 返回这个对象</span><br>&#125;<br><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigUser</span>().<span class="hljs-property">name</span>);      <span class="hljs-comment">// George，得到那个对象</span><br></code></pre></td></tr></table></figure><p>例如，有一个 return 为空的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SmallUser</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;John&quot;</span>;<br>    <span class="hljs-keyword">return</span>;                     <span class="hljs-comment">// 返回 this</span><br>&#125;<br><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SmallUser</span>().<span class="hljs-property">name</span>);    <span class="hljs-comment">// John</span><br></code></pre></td></tr></table></figure><h2 id="构造器中的方法"><a href="#构造器中的方法" class="headerlink" title="构造器中的方法"></a>构造器中的方法</h2><p>使用构造函数来创建对象会带来很大的灵活性。既可以将属性添加到 this 中，还可以添加方法。</p><p>例如，下面的 <code>new User(name)</code> 用给定的 <code>name</code> 和方法 <code>sayHi</code> 创建了一个对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">User</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayHi</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;My name is:&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;;<br>&#125;<br><br><span class="hljs-keyword">let</span> john = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;John&quot;</span>);<br>john.<span class="hljs-title function_">sayHi</span>();   <span class="hljs-comment">// My name is: John</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>构造函数，简称构造器，就是常规函数；</li><li>构造函数只能使用 <code>new</code> 来调用，这样调用意味着在开始时创建了空的 <code>this</code>，并在最后返回填充了值得 <code>this</code>。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zh.javascript.info/constructor-new">https://zh.javascript.info/constructor-new</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对象方法</title>
    <link href="/2023/04/14/%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95/"/>
    <url>/2023/04/14/%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="对象方法，“this”"><a href="#对象方法，“this”" class="headerlink" title="对象方法，“this”"></a>对象方法，“this”</h2><p>在 JavaScript 中，行为（action）由属性中的函数来表示。行为可以理解为各种动作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">30</span><br>&#125;;<br><br>user.<span class="hljs-property">sayHi</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello!&quot;</span>)<br>&#125;;<br><br>user.<span class="hljs-title function_">sayHi</span>();   <span class="hljs-comment">// Hello!</span><br></code></pre></td></tr></table></figure><p>使用函数表达式创建了一个函数，并将其指定给对象的 <code>user.sayHi</code> 属性，随后使用 <code>user.say</code> 调用，这种作为对象属性的函数被称为 <strong>方法</strong>。</p><p>也可以使用预先声明的函数作为方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;;<br><span class="hljs-comment">// 首先，声明函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello!&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 然后，将其作为一个方法添加</span><br>user.<span class="hljs-property">sayHi</span> = sayHi;<br>user.<span class="hljs-title function_">sayHi</span>();   <span class="hljs-comment">// Hello!</span><br></code></pre></td></tr></table></figure><blockquote><p>OOP（Object-oriented programming）：<a href="https://en.wikipedia.org/wiki/Object-oriented_programming">面向对象编程</a>，指的是用对象表示实体。</p></blockquote><h2 id="方法简写"><a href="#方法简写" class="headerlink" title="方法简写"></a>方法简写</h2><p>在对象字面量中，有一种更短的（声明）方法的语法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">user = &#123;<br>    <span class="hljs-attr">sayHi</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello!&quot;</span>);<br>    &#125;<br>&#125;;<br>-----------------------------------<br><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;   <span class="hljs-comment">// 与 &quot;sayHi: function()&#123;...&#125;&quot; 一样</span><br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello!&quot;</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="方法中的”this”"><a href="#方法中的”this”" class="headerlink" title="方法中的”this”"></a>方法中的”this”</h2><p>对象方法需要访问对象中存储的信息才能完成其工作。如 <code>user.sayHi()</code> 中的代码可能需要用到 <code>user</code> 的 name 属性。</p><p><strong>为访问该对象，方法中可使用 <code>this</code> 关键字。</strong><code>this</code> 的值就是在点之前的这个对象，即调用该方法的对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,<br><br>    <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// this 指的是 “当前的对象”</span><br>        <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>&#125;；<br>user.<span class="hljs-title function_">sayHi</span>();   <span class="hljs-comment">// John</span><br>-----------------------------------<br><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,<br><br>    <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">alert</span>(user.<span class="hljs-property">name</span>); <span class="hljs-comment">// &quot;user&quot; 替代 &quot;this&quot;</span><br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="“this”不受限制"><a href="#“this”不受限制" class="headerlink" title="“this”不受限制"></a>“this”不受限制</h2><p><code>this</code> 可用于任何函数，即使它不是对象的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>( <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> ); <span class="hljs-comment">// 不会报错</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>this</code> 的值取决于代码上下文。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span> &#125;;<br><span class="hljs-keyword">let</span> admin = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Admin&quot;</span> &#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>( <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> );<br>&#125;<br><br><span class="hljs-comment">// 在两个对象中使用相同的函数</span><br>user.<span class="hljs-property">f</span> = sayHi;<br>admin.<span class="hljs-property">f</span> = sayHi;<br><br><span class="hljs-comment">// 这两个调用有不同的 this 值</span><br><span class="hljs-comment">// 函数内部的 &quot;this&quot; 是“点符号前面”的那个对象</span><br>user.<span class="hljs-title function_">f</span>();       <span class="hljs-comment">// John（this == user）</span><br>admin.<span class="hljs-title function_">f</span>();      <span class="hljs-comment">// Admin（this == admin）</span><br>admin[<span class="hljs-string">&#x27;f&#x27;</span>]();   <span class="hljs-comment">// Admin（使用点符号或方括号语法来访问这个方法，都没有关系。）</span><br></code></pre></td></tr></table></figure><p>在没有对象的情况下调用：<code>this == undefined</code>。</p><h2 id="箭头函数没有自己的”this”"><a href="#箭头函数没有自己的”this”" class="headerlink" title="箭头函数没有自己的”this”"></a>箭头函数没有自己的”this”</h2><p>箭头函数没有自己的 <code>this</code>，若在函数中引用 <code>this</code>，<code>this</code> 值取决于外部 “正常的” 函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&quot;Ilya&quot;</span>,<br>    <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-title function_">arrow</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span>);<br>        <span class="hljs-title function_">arrow</span>();<br>    &#125;<br>&#125;;<br><br>user.<span class="hljs-title function_">sayHi</span>();   <span class="hljs-comment">// Ilya</span><br><span class="hljs-comment">// arrow() 使用的 this 来自于外部的 user.sayHi() 方法</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>存储在对象属性中的函数被称为“方法”；</li><li>方法允许对象进行像 <code>object.doSomething()</code> 这样的“操作”；</li><li>方法可以将对象引用为 <code>this</code>。</li></ul><p><code>this</code> 的值是在程序运行时得到的。</p><ul><li>一个函数在声明时，可能就使用了 <code>this</code>，但是这个 <code>this</code> 只有在函数被调用时才会有值。</li><li>可以在对象之间复制函数。</li><li>以“方法”的语法调用函数时：<code>object.method()</code>，调用过程中的 <code>this</code> 值是 <code>object</code>。</li></ul><p>请注意箭头函数有些特别：它们没有 <code>this</code>。在箭头函数内部访问到的 <code>this</code> 都是从外部获取的。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSON Object 对象 &lt;二&gt;</title>
    <link href="/2023/04/13/JSON%20Object%20%E5%AF%B9%E8%B1%A1(2)/"/>
    <url>/2023/04/13/JSON%20Object%20%E5%AF%B9%E8%B1%A1(2)/</url>
    
    <content type="html"><![CDATA[<h2 id="对象引用和复制"><a href="#对象引用和复制" class="headerlink" title="对象引用和复制"></a>对象引用和复制</h2><p>对象与原始类型的根本区别之一是，对象是“通过引用”存储和复制的，而原始类型：字符串、数字、布尔值等是“作为一个整体复制”。</p><ul><li>原始类型复制值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> message = <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-keyword">let</span> phrase = message    <span class="hljs-comment">// 两个独立变量，每个中都存储着字符串 &quot;hello&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E9%94%AE%E5%80%BC%E5%AF%B9%E6%AF%94%E5%96%BB%E5%9B%BE7.png" alt="键值对比喻图"></p><ul><li>对象复制值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>赋值了对象的变量存储的不是对象本身，而是该对象“在内存中的地址”，就是对该对象的“引用”。</p><p><img src="/../image/%E9%94%AE%E5%80%BC%E5%AF%B9%E6%AF%94%E5%96%BB%E5%9B%BE8.png" alt="键值对比喻图"></p><p>上图表示该对象被存储在内存中的某个位置（在图片的右侧），而变量 <code>user</code> (在左侧)保存的是对其的“引用”。</p><p>可以将一个对象变量（如 <code>user</code> ）想象成一张写有对象的地址的纸，当对对象执行操作时，例如获取一个属性 <code>user.name</code>，JavaScript 引擎会查看该地址中的内容，并在实际对象上执行操作。</p><p><strong>当一个对象变量被复制，则引用被复制，而该对象本身并未被复制。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span> &#125;;<br><span class="hljs-keyword">let</span> admin = user;   <span class="hljs-comment">// 复制引用</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E9%94%AE%E5%80%BC%E5%AF%B9%E6%AF%94%E5%96%BB%E5%9B%BE9.png" alt="键值对比喻图"></p><p>变量 <code>user</code> 和 <code>admin</code> 都保存着对同一个对象的引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;John&#x27;</span> &#125;;<br><span class="hljs-keyword">let</span> admin = user;<br>admin.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Pete&#x27;</span>; <span class="hljs-comment">// 通过 &quot;admin&quot; 引用来修改</span><br><span class="hljs-title function_">alert</span>(user.<span class="hljs-property">name</span>); <span class="hljs-comment">// &#x27;Pete&#x27;，修改能通过 &quot;user&quot; 引用看到</span><br></code></pre></td></tr></table></figure><p>可以通过其中任意一个变量来访问该对象并修改它的内容。这就像有一个带有两把钥匙的柜子，使用其中一把钥匙（<code>admin</code>）打开柜子并更改了里面的东西。那么，如果我们稍后用另一把钥匙（<code>user</code>），我们仍然可以打开同一个柜子并且可以访问更改的内容。</p><h2 id="通过引用来比较"><a href="#通过引用来比较" class="headerlink" title="通过引用来比较"></a>通过引用来比较</h2><p>仅当两个对象为同一对象时，两者才相等。例如，这里的 <code>a</code> 和 <code>b</code> 两个变量都引用同一个对象，所以两者相等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> a = &#123;&#125;;<br><span class="hljs-keyword">let</span> b = a;      <span class="hljs-comment">// 复制引用</span><br><span class="hljs-title function_">alert</span>(a == b);  <span class="hljs-comment">// true，都引用同一对象</span><br><span class="hljs-title function_">alert</span>(a === b); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>但两个独立的对象并不相等，即使两者看起来很像（都为空）；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> a = &#123;&#125;;<br><span class="hljs-keyword">let</span> b = &#123;&#125;;         <span class="hljs-comment">// 两个独立的对象</span><br><span class="hljs-title function_">alert</span>( a == b );    <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h2 id="克隆与合并，Object-assign"><a href="#克隆与合并，Object-assign" class="headerlink" title="克隆与合并，Object.assign"></a>克隆与合并，Object.assign</h2><p>如上所述，复制一个对象变量会创建一个对相同对象的引用。若想要复制一个对象，需要如下做法。</p><p>创建一个新对象，通过遍历已有对象的属性，并在原始类性值的层面复制它们，以实现对已有对象结构的复制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;George&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">27</span><br>&#125;;<br><span class="hljs-keyword">let</span> clone = &#123;&#125;;             <span class="hljs-comment">// 创建一个新的空对象</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> user) &#123;     <span class="hljs-comment">// 将 user 中所有的属性拷贝到其中</span><br>    clone[key] = user[key];<br>&#125;<br><br><span class="hljs-comment">// 现在 clone 是带有相同内容的完全独立的对象</span><br>clone.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;Pete&quot;</span>; <span class="hljs-comment">// 改变了其中的数据</span><br><span class="hljs-title function_">alert</span>( user.<span class="hljs-property">name</span> ); <span class="hljs-comment">// 原来的对象中的 name 属性依然是 George</span><br></code></pre></td></tr></table></figure><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(dest, [src1, src2, src3...])<br></code></pre></td></tr></table></figure><ul><li>第一个参数 <code>dest</code> 是指目标对象；</li><li>后面的参数 <code>src1, ..., srcN</code> （可按需传递多个参数）是源对象；</li><li>该方法将所有源对象的属性拷贝到目标对象 <code>dest</code> 中。换句话说，从第二个开始的所有参数的属性都被拷贝到第一个参数的对象中；</li><li>调用结果返回 dest。</li></ul><p>使用 <code>Object.assign</code> 来合并多个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span> &#125;;<br><br><span class="hljs-keyword">let</span> permissions1 = &#123; <span class="hljs-attr">canView</span>: <span class="hljs-literal">true</span> &#125;;<br><span class="hljs-keyword">let</span> permissions2 = &#123; <span class="hljs-attr">canEdit</span>: <span class="hljs-literal">true</span> &#125;;<br><br><span class="hljs-comment">// 将 permission1 和 permission2 中的所有属性都拷贝到 user 中</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(user, permission1, permission2);<br><span class="hljs-comment">// 现在 user = &#123; name: &quot;John&quot;, canView: true, canEdit: true &#125;</span><br></code></pre></td></tr></table></figure><p>如果被拷贝的属性的属性名已经存在，那该属性名会被覆盖。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span> &#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(user, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Pete&quot;</span> &#125;);<br><span class="hljs-title function_">alert</span>(user.<span class="hljs-property">name</span>);   <span class="hljs-comment">// 现在 user = &#123; name: &quot;Pete&quot; &#125;</span><br></code></pre></td></tr></table></figure><p>也可使用 <code>Object.assign</code> 代替 <code>for..in</code> 循环来进行简单克隆。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">30</span><br>&#125;;<br><br><span class="hljs-keyword">let</span> clone = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, user);<br><span class="hljs-comment">// 将 user 中的所有属性拷贝到了一个空对象中，并返回这个新的对象。</span><br></code></pre></td></tr></table></figure><h2 id="深层克隆"><a href="#深层克隆" class="headerlink" title="深层克隆"></a>深层克隆</h2><p>上述例子中，均假设 <code>user</code> 的所有属性均为原始类型，但属性也可以是对其他对象的引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">30</span><br>&#125;;<br>------------------------------------------<br><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>    <span class="hljs-attr">sizes</span>: &#123;            <span class="hljs-comment">// 对其他对象的引用</span><br>        <span class="hljs-attr">height</span>: <span class="hljs-number">182</span>,<br>        <span class="hljs-attr">width</span>: <span class="hljs-number">50</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>    <span class="hljs-attr">sizes</span>: &#123;            <span class="hljs-comment">// 对其他对象的引用</span><br>        <span class="hljs-attr">height</span>: <span class="hljs-number">182</span>,<br>        <span class="hljs-attr">width</span>: <span class="hljs-number">50</span><br>    &#125;<br>&#125;;<br><span class="hljs-title function_">alert</span>( user.<span class="hljs-property">sizes</span>.<span class="hljs-property">height</span> ); <span class="hljs-comment">// 182</span><br><br><span class="hljs-keyword">let</span> clone = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, user);<br><span class="hljs-title function_">alert</span>( user.<span class="hljs-property">sizes</span> === clone.<span class="hljs-property">sizes</span> );    <span class="hljs-comment">// true,同为一个对象</span><br><br><span class="hljs-comment">// user 和 clone 分享同一个 sizes</span><br>user.<span class="hljs-property">sizes</span>.<span class="hljs-property">width</span>++;         <span class="hljs-comment">// 通过 user 改变属性值</span><br><span class="hljs-title function_">alert</span>(clone.<span class="hljs-property">sizes</span>.<span class="hljs-property">width</span>);   <span class="hljs-comment">// 51,能从clone中获取到变更后的结果</span><br></code></pre></td></tr></table></figure><p>深拷贝：为使 <code>user</code> 和 <code>clone</code> 成为两个真正独立的对象，可使用一个拷贝循环来检查 <code>user[key]</code> 的每个值，如果 <code>user[key]</code> 是一个对象，也复制其结构。</p><p>可使用递归来实现，或采用现有的实现，例如 <code>lodash</code> 库的 <code>_.cloneDeep(obj)</code>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对象通过引用被赋值和拷贝。一个变量存储的不是 “对象的值”，而是一个对值的 “引用”（内存地址），因此拷贝此类变量或将其作为函数参数传递时，所拷贝是引用，而不是对象本身。</p><p>所有通过被拷贝的引用的操作（如添加、删除属性）都作用在同一对象上。</p><p>创建 “真正的拷贝”（一个克隆），可使用 <code>Object.assign</code> 实现 “浅拷贝”（嵌套对象被通过引用进行拷贝），或使用 “深拷贝” 函数，如 <code>_.cloneDeep(obj)</code>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zh.javascript.info/object-copy">https://zh.javascript.info/object-copy</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSON Object 对象 &lt;一&gt;</title>
    <link href="/2023/04/11/JSON%20Object%20%E5%AF%B9%E8%B1%A1(1)/"/>
    <url>/2023/04/11/JSON%20Object%20%E5%AF%B9%E8%B1%A1(1)/</url>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>Object（对象）是用来存储键值对和更复杂的实体。通过使用带有可选 <strong>属性列表</strong> 的花括号 <code>&#123;...&#125;</code> 创建对象。一个属性就是一个键值对 （”key:value”），其中键（key）是一个字符串，值（value）可以是任何值。</p><p>可以把对象想象成一个带有签名文件的文件柜，每条数据都基于键（key）存储在文件中，这样可根据文件名（也就是“键”）添加&#x2F;删除&#x2F;查找文件。</p><p><img src="/../image/%E9%94%AE%E5%80%BC%E5%AF%B9%E6%AF%94%E5%96%BB%E5%9B%BE1.png" alt="键值对比喻图"></p><p>创建一个空的对象（“空柜子”）方法：构造函数或者字面量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> user = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();    <span class="hljs-comment">// &quot;构造函数&quot;</span><br><span class="hljs-keyword">let</span> user = &#123;&#125;;              <span class="hljs-comment">// &quot;字面量&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E9%94%AE%E5%80%BC%E5%AF%B9%E6%AF%94%E5%96%BB%E5%9B%BE2.png" alt="键值对比喻图"></p><h2 id="文本和属性"><a href="#文本和属性" class="headerlink" title="文本和属性"></a>文本和属性</h2><p>创建对象时，可以立即将一些属性以键值对的形式放入 <code>&#123;...&#125;</code> 中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> usr = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;George&quot;</span>,     <span class="hljs-comment">// 键 &quot;name&quot;，值 &quot;George&quot;</span><br>    <span class="hljs-attr">age</span>: <span class="hljs-number">27</span>             <span class="hljs-comment">// 键 &quot;age&quot;，值 27</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>user</code> 对象中，有两个属性：</p><ol><li>第一个的键是 <code>&quot;name&quot;</code>，值是 <code>&quot;George&quot;</code>;</li><li>第一个的键是 <code>&quot;age&quot;</code>，值是 <code>&quot;27&quot;</code>。</li></ol><p>生成的 <code>user</code> 对象可以被想象为一个放置着两个标记有 <code>“name”</code> 和 <code>“age”</code> 的文件的柜子，能够随时添加、删除和读取文件。</p><p><img src="/../image/%E9%94%AE%E5%80%BC%E5%AF%B9%E6%AF%94%E5%96%BB%E5%9B%BE3.png" alt="键值对比喻图"></p><ul><li><p>使用 <code>.</code> 点符号访问属性值；</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-title function_">alert</span>(user.<span class="hljs-property">name</span>);   <span class="hljs-comment">// George</span><br><span class="hljs-title function_">alert</span>(user.<span class="hljs-property">age</span>);    <span class="hljs-comment">// 27</span><br></code></pre></td></tr></table></figure><p>  属性值可以是任意类型。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javaScript">user.<span class="hljs-property">isAdmin</span> = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>  <img src="/../image/%E9%94%AE%E5%80%BC%E5%AF%B9%E6%AF%94%E5%96%BB%E5%9B%BE4.png" alt="键值对比喻图"></p></li><li><p>使用 <code>delete</code> 操作符移除属性；</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">delete</span> user.<span class="hljs-property">age</span><br></code></pre></td></tr></table></figure><p>  <img src="/../image/%E9%94%AE%E5%80%BC%E5%AF%B9%E6%AF%94%E5%96%BB%E5%9B%BE5.png" alt="键值对比喻图"></p></li><li><p>使用多字词语来作为属性名，但必须给它们加上引号；</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;George&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">27</span>,<br>    <span class="hljs-string">&quot;likes birds&quot;</span>: <span class="hljs-literal">true</span>  <span class="hljs-comment">// 多词属性名必须加引号</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>  <img src="/../image/%E9%94%AE%E5%80%BC%E5%AF%B9%E6%AF%94%E5%96%BB%E5%9B%BE6.png" alt="键值对比喻图">   </p></li><li><p>列表中最后一个属性应以逗号结尾；</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;George&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">27</span>,<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="点符号与方括号"><a href="#点符号与方括号" class="headerlink" title="点符号与方括号"></a>点符号与方括号</h2><p>点操作不能用于多次属性。</p><ul><li>点符号：要求 <code>key</code> 是有效的变量标识符，不能包含空格，不以数字开头，不包含特殊符号（允许使用 <code>$</code> 和 <code>_</code>）</li><li>方括号：可用于任何字符串，方括号中的字符串需要放在引号中，单&#x2F;双引号均可；</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javaScript">user.<span class="hljs-property">likes</span> birds = <span class="hljs-literal">true</span>     <span class="hljs-comment">// 误以为处理 user.likes，遇到 birds 时会报语法错误</span><br>-----------------------<br><span class="hljs-keyword">let</span> user = &#123;&#125;<br>user[<span class="hljs-string">&quot;likes birds&quot;</span>] = <span class="hljs-literal">true</span>  <span class="hljs-comment">// 设置</span><br><span class="hljs-title function_">alert</span>(user[<span class="hljs-string">&quot;likes birds&quot;</span>]); <span class="hljs-comment">// 读取，true</span><br><span class="hljs-keyword">delete</span> user[<span class="hljs-string">&quot;likes birds&quot;</span>]; <span class="hljs-comment">// 删除</span><br></code></pre></td></tr></table></figure><p>同时，方括号提供了一种可以通过任意表达式来获取属性名的方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> key = <span class="hljs-string">&quot;likes birds&quot;</span>;<br>user[key] = <span class="hljs-literal">true</span>;<br>-----------------------<br>user[<span class="hljs-string">&quot;likes birds&quot;</span>] = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 与上面等同</span><br></code></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>计算属性：当创建一个对象时，可以在对象字面量中使用方括号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> fruit = <span class="hljs-string">&#x27;apple&#x27;</span>;<br><span class="hljs-keyword">let</span> bag = &#123;<br>    [fruit]: <span class="hljs-number">5</span>,     <span class="hljs-comment">// 属性名从 fruit 变量中得到，此时 bag 变为 &#123;apple：5&#125;</span><br>&#125;<br><span class="hljs-title function_">alert</span>(bag.<span class="hljs-property">apple</span>);   <span class="hljs-comment">// 5</span><br>-----------------------<br><span class="hljs-keyword">let</span> fruit = <span class="hljs-string">&#x27;apple&#x27;</span>;<br><span class="hljs-keyword">let</span> bag = &#123;&#125;;<br>bag[fruit] = <span class="hljs-number">5</span>;     <span class="hljs-comment">// 与上面等同</span><br></code></pre></td></tr></table></figure><p>计算属性含义为：<code>[fruit]</code> 含义是属性名从 <code>fruit</code> 变量中获取。</p><p>方括号可用于更复杂的表达式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> fruit = <span class="hljs-string">&#x27;apple&#x27;</span>;<br><span class="hljs-keyword">let</span> bag = &#123;<br>    [fruit + <span class="hljs-string">&#x27;Computers&#x27;</span>]: <span class="hljs-number">5</span>    <span class="hljs-comment">// bag.appleComputers = 5</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="属性值简写"><a href="#属性值简写" class="headerlink" title="属性值简写"></a>属性值简写</h2><p>使用已经存在的变量当作属性名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">makeUser</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">name</span>: name,<br>        <span class="hljs-attr">age</span>: age,<br>        <span class="hljs-comment">// ……其他的属性</span><br>    &#125;;<br>&#125;<br><br><span class="hljs-keyword">let</span> user = <span class="hljs-title function_">makeUser</span>(<span class="hljs-string">&quot;George&quot;</span>, <span class="hljs-number">27</span>);<br><span class="hljs-title function_">alert</span>(user.<span class="hljs-property">name</span>);   <span class="hljs-comment">// George</span><br></code></pre></td></tr></table></figure><h2 id="属性名称限制"><a href="#属性名称限制" class="headerlink" title="属性名称限制"></a>属性名称限制</h2><p>变量名不能是某个保留字，如 <code>&quot;for&quot;</code>、<code>&quot;let&quot;</code>、<code>&quot;return&quot;</code>，但对象的属性名不受限制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">for</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">let</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">return</span>: <span class="hljs-number">3</span><br>&#125;;<br><span class="hljs-title function_">alert</span>( obj.<span class="hljs-property">for</span> + obj.<span class="hljs-property">let</span> + obj.<span class="hljs-property">return</span> );    <span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure><h2 id="for-in-循环"><a href="#for-in-循环" class="headerlink" title="for..in 循环"></a>for..in 循环</h2><p><code>for..in</code> 可以遍历一个对象中的所有键（key）.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">for</span>(key <span class="hljs-keyword">in</span> object)&#123;<br>    <span class="hljs-comment">// </span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;George&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">27</span>,<br>    <span class="hljs-attr">isAdmin</span>: <span class="hljs-literal">true</span><br>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> user)&#123;<br>    <span class="hljs-title function_">alert</span>(key);         <span class="hljs-comment">// name，age，isAdmin</span><br>    <span class="hljs-title function_">alert</span>(user[key]);   <span class="hljs-comment">// George，27，true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>所有 “for” 结构体都允许在循环体中定义变量，例如 <code>let key</code>；</li><li>可以使用其他属性名来替代 <code>key</code>，例如 <code>for(let prop in obj)</code>。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对象是具有一些特殊特性的关联数组，存储属性（键值对），其中：</p><p>属性的键必须是字符串或者 symbol（通常是字符串），值可以是任何类型。可以用下面的方法访问属性：</p><ul><li>点符号: obj.property；</li><li>方括号：obj[“property”]，方括号允许从变量中获取键，例如 obj[varWithKey]。</li></ul><p>其他操作：</p><ul><li>删除属性：delete obj.prop；</li><li>检查是否存在给定键的属性：”key” in obj；</li><li>遍历对象：for(let key in obj) 循环。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zh.javascript.info/object#shu-xing-cun-zai-xing-ce-shi-in-cao-zuo-fu">https://zh.javascript.info/object#shu-xing-cun-zai-xing-ce-shi-in-cao-zuo-fu</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端未响应</title>
    <link href="/2023/04/07/%E5%89%8D%E7%AB%AF%E6%9C%AA%E5%93%8D%E5%BA%94/"/>
    <url>/2023/04/07/%E5%89%8D%E7%AB%AF%E6%9C%AA%E5%93%8D%E5%BA%94/</url>
    
    <content type="html"><![CDATA[<h2 id="前端未响应"><a href="#前端未响应" class="headerlink" title="前端未响应"></a>前端未响应</h2><p>前端未响应，显示连接不上 <code>localhost:8092</code> (自己的端口号)，可以尝试使用以下命令解决：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsof -i:8092    // 查看占用的 pid，比如查出来是 1221<br><span class="hljs-built_in">kill</span> 1221<br>ctrl+<span class="hljs-built_in">shift</span>+p    // 输入 reloadwindow  重新加载vscode<br></code></pre></td></tr></table></figure><h2 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h2><p><a href="https://en.wikipedia.org/wiki/Lsof">lsof</a>（list open files）意为列出打开的文件，主要用作查看类 Unix 系统中所有打开的文件和打开它们进度的列表。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsof -i -n -P | grep sendmail<br>sendmail  31649    root    4u  IPv4 521738       TCP *:25 (LISTEN)<br></code></pre></td></tr></table></figure><p>从上面可以看出，“sendmail”正在监听其标准端口“25”。</p><ul><li><code>-i</code><br>  Lists IP sockets.</li><li><code>-n</code><br>  Do not resolve hostnames (no DNS).</li><li><code>-P</code><br>  Do not resolve port names (list port number instead of its name).</li></ul><pre><code class="hljs"></code></pre>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>element 日期选择器</title>
    <link href="/2023/04/07/element%E6%97%A5%E6%9C%9F%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <url>/2023/04/07/element%E6%97%A5%E6%9C%9F%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="日期范围选择器"><a href="#日期范围选择器" class="headerlink" title="日期范围选择器"></a>日期范围选择器</h2><p>日期范围选择器限制只选择今天及以前的日期。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-date-picker <br>    style=&quot;margin-left: 5px;&quot; <br>    v-model=&quot;valueTime&quot; <br>    type=&quot;daterange&quot; <br>    format=&quot;yyyy-MM-dd&quot; <br>    unlink-panels<br>    value-format=&quot;yyyy-MM-dd&quot;<br>    range-separator=&quot;至&quot;<br>    start-placeholder=&quot;开始日期&quot;<br>    end-placeholder=&quot;结束日期&quot;<br>    :picker-options=&quot;pickerOptions&quot;&gt;<br>&lt;/el-date-picker&gt;<br></code></pre></td></tr></table></figure><ul><li><code>unlink-panels</code>: 在范围选择器里取消两个日期面板之间的联动。</li></ul><p>在组件中需进行如下设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>    valueTime: &quot;&quot;,<br>    pickerOptions: &#123;<br>        disabledDate (time) &#123;<br>            return time.getTime() &gt; Date.now();<br>        &#125;<br>    &#125;,<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>实际效果如下：</p><p><img src="/../image/element%E6%97%A5%E6%9C%9F%E9%80%89%E6%8B%A9%E5%99%A8_1.1.png" alt="element日期选择器1"></p><p><img src="/../image/element%E6%97%A5%E6%9C%9F%E9%80%89%E6%8B%A9%E5%99%A8_1.2.png" alt="element日期选择器2"></p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>其他几种常见日期设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>    pickerOptions: &#123;<br>        disabledDate(time) &#123;<br>            // 设置选择今天以及今天之后的日期<br>            return time.getTime() &lt; Date.now() - 8.64e7<br>            // 设置选择今天以及今天以前的日期<br>            return time.getTime() &gt; Date.now();<br>            // 设置选择今天之后的日期（不能选择当天时间）<br>            return time.getTime() &lt; Date.now();        <br>            // 设置选择今天之前的日期（不能选择当天）<br>            return time.getTime() &gt; Date.now() - 8.64e7 <br>            // 设置当天23：59：59可选<br>            let currentTime = this.getNowMonthDay() + ` 23:59:59`<br>                return time.getTime() &gt; new Date(currentTime).getTime()<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://element.eleme.cn/2.0/#/zh-CN/component/date-picker">https://element.eleme.cn/2.0/#/zh-CN/component/date-picker</a></p><p><a href="https://segmentfault.com/q/1010000037421298">https://segmentfault.com/q/1010000037421298</a></p>]]></content>
    
    
    <categories>
      
      <category>Element</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2023/04/07/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2023/04/07/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><p><img src="/../image/404.jpg" alt="测试图片"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/07/hello-world/"/>
    <url>/2023/04/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
