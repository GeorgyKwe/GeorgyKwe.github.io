<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>原始类型的方法</title>
    <link href="/2023/04/17/%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2023/04/17/%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="原始类型和对象区别"><a href="#原始类型和对象区别" class="headerlink" title="原始类型和对象区别"></a>原始类型和对象区别</h2><p>一个原始值：</p><ul><li>是原始类型中的一种值；</li><li>在 JavaScript 中有7中原始类型：<code>string</code>、<code>number</code>、<code>bigint</code>、<code>boolean</code>、<code>symbol</code>、<code>null</code> 和 <code>undefined</code>。</li></ul><p>一个对象：</p><ul><li>能够存储多个值作为属性；</li><li>可以使用大括号 <code>&#123;&#125;</code> 创建对象，例如：<code>&#123;name：&quot;John&quot;, age: 30&#125;</code>。函数也是对象。</li></ul><p>例如：将一个函数作为对象的属性存储到对象中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> john = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>    <span class="hljs-attr">syaHi</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br>    &#125;<br>&#125;;<br><br>john.<span class="hljs-title function_">sayHi</span>();   <span class="hljs-comment">// Hello World!</span><br></code></pre></td></tr></table></figure><p>上述创建了一个包含 <code>sayHi</code> 方法的对象 <code>john</code>，但对象比原始类型“更重”，需要额外的资源来支持运作。</p><h2 id="当做对象的原始类型"><a href="#当做对象的原始类型" class="headerlink" title="当做对象的原始类型"></a>当做对象的原始类型</h2><p>为解决如下两个问题：</p><ol><li>想对诸如字符串或数字之类的原始类型执行操作；</li><li>原始类型必须尽可能的简单轻量。</li></ol><p>提出如下的解决方法：</p><ol><li>原始类型仍然是原始的，与预期相同，提供单个值；</li><li>JavaScript 允许访问字符串、数字、布尔值和 symbol 的方法和属性；</li><li>为使它们起作用，创建了提供额外功能的特殊“对象包装器”，使用后即被销毁。</li></ol><p>“对象包装器”对于每种原始类型都是不同的，其被称为 <code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Symbol</code> 和 <code>Bigint</code>。因此提供了不同的方法。</p><h3 id="str-toUpperCase"><a href="#str-toUpperCase" class="headerlink" title="str.toUpperCase()"></a>str.toUpperCase()</h3><p>字符串方法 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase">str.toUpperCase()</a> 返回一个大写化处理的字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;Hello&quot;</span>;<br><span class="hljs-title function_">alert</span>(str.<span class="hljs-title function_">toUpperCase</span>());   <span class="hljs-comment">// HELLO</span><br></code></pre></td></tr></table></figure><p><code>toUpperCase()</code> 中实际发生的情况：</p><ol><li>字符串 str 是一个原始值。在访问其属性时，会创建一个包含字符串字面量的特殊对象，并且具有可用的方法，如 <code>toUpperCase()</code>；</li><li>该方法运行并返回一个新的字符串（由 <code>alert</code> 显示）；</li><li>特殊对象被销毁后，只留下原始值 <code>str</code>。</li></ol><p>所以原始类型可以提供方法，但他们依然是轻量级。</p><h3 id="toFixed-n"><a href="#toFixed-n" class="headerlink" title="toFixed(n)"></a>toFixed(n)</h3><p>数量方法，如 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed">toFixed(n)</a> 将数字舍入到给定的精度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> n = <span class="hljs-number">1.23456</span>;<br><br><span class="hljs-title function_">alert</span>(n.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>));    <span class="hljs-comment">// 1.23</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>除 null 和 undefined 以外的原始类型都提供了许多有用的方法；</li><li>从形式上看，这些方法通过临时对象工作，但 JavaScript 引擎可以很好的调整，以在内部对齐进行优化，因此调用并不需要太高的成本。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zh.javascript.info/primitives-methods">https://zh.javascript.info/primitives-methods</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构造器和操作符“new”</title>
    <link href="/2023/04/17/%E6%9E%84%E9%80%A0%E5%99%A8/"/>
    <url>/2023/04/17/%E6%9E%84%E9%80%A0%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>构造函数一般为常规函数，在构造时通常有以下两个约定：</p><ul><li>命名以答谢字母开始；</li><li>只能由 <code>new</code> 操作符来执行；</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">User</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">isAdmin</span> = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">let</span> user = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Jack&quot;</span>);<br><br><span class="hljs-title function_">alert</span>(user.<span class="hljs-property">name</span>);       <span class="hljs-comment">// Jack</span><br><span class="hljs-title function_">alert</span>(user.<span class="hljs-property">isAdmin</span>);    <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>当一个函数被使用 <code>new</code> 操作符执行时，会执行如下步骤：</p><ul><li>一个新的空对象会被创建并分配给 <code>this</code>；</li><li>函数体执行，通常会修改 <code>this</code>，为其添加新的属性；</li><li>返回 <code>this</code> 的值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">User</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-comment">// this = &#123;&#125;; 隐式创建</span><br><br>    <span class="hljs-comment">// 添加属性到 this</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">isAdmin</span> = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">// return this； 隐式返回</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>new User(&quot;Jack&quot;)</code> 的结果与上面为同样的对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> <span class="hljs-title class_">User</span> =  &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">isAdmin</span> = <span class="hljs-literal">false</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="构造器模式测试"><a href="#构造器模式测试" class="headerlink" title="构造器模式测试"></a>构造器模式测试</h2><p>在函数内部，可使用 <code>new.target</code> 属性来检查是否被 <code>new</code> 调用。对于常规调用，结果为 <code>undefined</code>，对于使用 <code>new</code> 的调用，则等于该函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span>  <span class="hljs-title function_">User</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-keyword">new</span>.<span class="hljs-property">target</span>);<br>&#125;<br><br><span class="hljs-comment">// 不带 new</span><br><span class="hljs-title class_">User</span>();     <span class="hljs-comment">// undefined</span><br><br><span class="hljs-comment">// 带 new</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(); <span class="hljs-comment">// function User &#123;...&#125;</span><br></code></pre></td></tr></table></figure><p><code>new.target</code> 属性可被用在函数内部，来判断该函数是被通过 <code>new</code> 调用的“构造器模式”，还是没被通过 <code>new</code> 调用的“常规模式”。</p><p>同时，也可让 new 调用和常规调用做相同的工作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">User</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">new</span>.<span class="hljs-property">target</span>) &#123;           <span class="hljs-comment">// 若没有通过 new 运行</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(name);  <span class="hljs-comment">// 将会添加 new</span><br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>&#125;<br><br><span class="hljs-keyword">let</span> john = <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;John&quot;</span>);    <span class="hljs-comment">// 将调用重定向到新用户</span><br><span class="hljs-title function_">alert</span>(john.<span class="hljs-property">name</span>);           <span class="hljs-comment">// John</span><br></code></pre></td></tr></table></figure><h2 id="构造器的-return"><a href="#构造器的-return" class="headerlink" title="构造器的 return"></a>构造器的 return</h2><p>通常，构造器没有 return 语句，其任务是将所有必要的东西写入 this，并自动转化为结果。</p><p>但如果这有一个 return 语句，规则就简单：</p><ul><li>若 return 返回值是一个对象，则返回这个对虾干，而不是 this；</li><li>若 return 返回的是一个原始类型，则忽略；</li></ul><p>换句话说，带有对象的 return 返回该对象，在所有其他情况下返回 this。</p><p>例如，<code>return</code> 通过返回一个对象覆盖 <code>this</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">BigUser</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;John&quot;</span>;<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;George&quot;</span>&#125;;    <span class="hljs-comment">// 返回这个对象</span><br>&#125;<br><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigUser</span>().<span class="hljs-property">name</span>);      <span class="hljs-comment">// George，得到那个对象</span><br></code></pre></td></tr></table></figure><p>例如，有一个 return 为空的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SmallUser</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;John&quot;</span>;<br>    <span class="hljs-keyword">return</span>;                     <span class="hljs-comment">// 返回 this</span><br>&#125;<br><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SmallUser</span>().<span class="hljs-property">name</span>);    <span class="hljs-comment">// John</span><br></code></pre></td></tr></table></figure><h2 id="构造器中的方法"><a href="#构造器中的方法" class="headerlink" title="构造器中的方法"></a>构造器中的方法</h2><p>使用构造函数来创建对象会带来很大的灵活性。既可以将属性添加到 this 中，还可以添加方法。</p><p>例如，下面的 <code>new User(name)</code> 用给定的 <code>name</code> 和方法 <code>sayHi</code> 创建了一个对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">User</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayHi</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;My name is:&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;;<br>&#125;<br><br><span class="hljs-keyword">let</span> john = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;John&quot;</span>);<br>john.<span class="hljs-title function_">sayHi</span>();   <span class="hljs-comment">// My name is: John</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>构造函数，简称构造器，就是常规函数；</li><li>构造函数只能使用 <code>new</code> 来调用，这样调用意味着在开始时创建了空的 <code>this</code>，并在最后返回填充了值得 <code>this</code>。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zh.javascript.info/constructor-new">https://zh.javascript.info/constructor-new</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对象方法</title>
    <link href="/2023/04/14/%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95/"/>
    <url>/2023/04/14/%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="对象方法，“this”"><a href="#对象方法，“this”" class="headerlink" title="对象方法，“this”"></a>对象方法，“this”</h2><p>在 JavaScript 中，行为（action）由属性中的函数来表示。行为可以理解为各种动作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">30</span><br>&#125;;<br><br>user.<span class="hljs-property">sayHi</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello!&quot;</span>)<br>&#125;;<br><br>user.<span class="hljs-title function_">sayHi</span>();   <span class="hljs-comment">// Hello!</span><br></code></pre></td></tr></table></figure><p>使用函数表达式创建了一个函数，并将其指定给对象的 <code>user.sayHi</code> 属性，随后使用 <code>user.say</code> 调用，这种作为对象属性的函数被称为 <strong>方法</strong>。</p><p>也可以使用预先声明的函数作为方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;;<br><span class="hljs-comment">// 首先，声明函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello!&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 然后，将其作为一个方法添加</span><br>user.<span class="hljs-property">sayHi</span> = sayHi;<br>user.<span class="hljs-title function_">sayHi</span>();   <span class="hljs-comment">// Hello!</span><br></code></pre></td></tr></table></figure><blockquote><p>OOP（Object-oriented programming）：<a href="https://en.wikipedia.org/wiki/Object-oriented_programming">面向对象编程</a>，指的是用对象表示实体。</p></blockquote><h2 id="方法简写"><a href="#方法简写" class="headerlink" title="方法简写"></a>方法简写</h2><p>在对象字面量中，有一种更短的（声明）方法的语法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">user = &#123;<br>    <span class="hljs-attr">sayHi</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello!&quot;</span>);<br>    &#125;<br>&#125;;<br>-----------------------------------<br><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;   <span class="hljs-comment">// 与 &quot;sayHi: function()&#123;...&#125;&quot; 一样</span><br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello!&quot;</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="方法中的”this”"><a href="#方法中的”this”" class="headerlink" title="方法中的”this”"></a>方法中的”this”</h2><p>对象方法需要访问对象中存储的信息才能完成其工作。如 <code>user.sayHi()</code> 中的代码可能需要用到 <code>user</code> 的 name 属性。</p><p><strong>为访问该对象，方法中可使用 <code>this</code> 关键字。</strong><code>this</code> 的值就是在点之前的这个对象，即调用该方法的对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,<br><br>    <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// this 指的是 “当前的对象”</span><br>        <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>&#125;；<br>user.<span class="hljs-title function_">sayHi</span>();   <span class="hljs-comment">// John</span><br>-----------------------------------<br><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,<br><br>    <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">alert</span>(user.<span class="hljs-property">name</span>); <span class="hljs-comment">// &quot;user&quot; 替代 &quot;this&quot;</span><br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="“this”不受限制"><a href="#“this”不受限制" class="headerlink" title="“this”不受限制"></a>“this”不受限制</h2><p><code>this</code> 可用于任何函数，即使它不是对象的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>( <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> ); <span class="hljs-comment">// 不会报错</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>this</code> 的值取决于代码上下文。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span> &#125;;<br><span class="hljs-keyword">let</span> admin = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Admin&quot;</span> &#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>( <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> );<br>&#125;<br><br><span class="hljs-comment">// 在两个对象中使用相同的函数</span><br>user.<span class="hljs-property">f</span> = sayHi;<br>admin.<span class="hljs-property">f</span> = sayHi;<br><br><span class="hljs-comment">// 这两个调用有不同的 this 值</span><br><span class="hljs-comment">// 函数内部的 &quot;this&quot; 是“点符号前面”的那个对象</span><br>user.<span class="hljs-title function_">f</span>();       <span class="hljs-comment">// John（this == user）</span><br>admin.<span class="hljs-title function_">f</span>();      <span class="hljs-comment">// Admin（this == admin）</span><br>admin[<span class="hljs-string">&#x27;f&#x27;</span>]();   <span class="hljs-comment">// Admin（使用点符号或方括号语法来访问这个方法，都没有关系。）</span><br></code></pre></td></tr></table></figure><p>在没有对象的情况下调用：<code>this == undefined</code>。</p><h2 id="箭头函数没有自己的”this”"><a href="#箭头函数没有自己的”this”" class="headerlink" title="箭头函数没有自己的”this”"></a>箭头函数没有自己的”this”</h2><p>箭头函数没有自己的 <code>this</code>，若在函数中引用 <code>this</code>，<code>this</code> 值取决于外部 “正常的” 函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&quot;Ilya&quot;</span>,<br>    <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-title function_">arrow</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span>);<br>        <span class="hljs-title function_">arrow</span>();<br>    &#125;<br>&#125;;<br><br>user.<span class="hljs-title function_">sayHi</span>();   <span class="hljs-comment">// Ilya</span><br><span class="hljs-comment">// arrow() 使用的 this 来自于外部的 user.sayHi() 方法</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>存储在对象属性中的函数被称为“方法”；</li><li>方法允许对象进行像 <code>object.doSomething()</code> 这样的“操作”；</li><li>方法可以将对象引用为 <code>this</code>。</li></ul><p><code>this</code> 的值是在程序运行时得到的。</p><ul><li>一个函数在声明时，可能就使用了 <code>this</code>，但是这个 <code>this</code> 只有在函数被调用时才会有值。</li><li>可以在对象之间复制函数。</li><li>以“方法”的语法调用函数时：<code>object.method()</code>，调用过程中的 <code>this</code> 值是 <code>object</code>。</li></ul><p>请注意箭头函数有些特别：它们没有 <code>this</code>。在箭头函数内部访问到的 <code>this</code> 都是从外部获取的。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSON Object 对象 &lt;二&gt;</title>
    <link href="/2023/04/13/JSON%20Object%20%E5%AF%B9%E8%B1%A1(2)/"/>
    <url>/2023/04/13/JSON%20Object%20%E5%AF%B9%E8%B1%A1(2)/</url>
    
    <content type="html"><![CDATA[<h2 id="对象引用和复制"><a href="#对象引用和复制" class="headerlink" title="对象引用和复制"></a>对象引用和复制</h2><p>对象与原始类型的根本区别之一是，对象是“通过引用”存储和复制的，而原始类型：字符串、数字、布尔值等是“作为一个整体复制”。</p><ul><li>原始类型复制值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> message = <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-keyword">let</span> phrase = message    <span class="hljs-comment">// 两个独立变量，每个中都存储着字符串 &quot;hello&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E9%94%AE%E5%80%BC%E5%AF%B9%E6%AF%94%E5%96%BB%E5%9B%BE7.png" alt="键值对比喻图"></p><ul><li>对象复制值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>赋值了对象的变量存储的不是对象本身，而是该对象“在内存中的地址”，就是对该对象的“引用”。</p><p><img src="/../image/%E9%94%AE%E5%80%BC%E5%AF%B9%E6%AF%94%E5%96%BB%E5%9B%BE8.png" alt="键值对比喻图"></p><p>上图表示该对象被存储在内存中的某个位置（在图片的右侧），而变量 <code>user</code> (在左侧)保存的是对其的“引用”。</p><p>可以将一个对象变量（如 <code>user</code> ）想象成一张写有对象的地址的纸，当对对象执行操作时，例如获取一个属性 <code>user.name</code>，JavaScript 引擎会查看该地址中的内容，并在实际对象上执行操作。</p><p><strong>当一个对象变量被复制，则引用被复制，而该对象本身并未被复制。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span> &#125;;<br><span class="hljs-keyword">let</span> admin = user;   <span class="hljs-comment">// 复制引用</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E9%94%AE%E5%80%BC%E5%AF%B9%E6%AF%94%E5%96%BB%E5%9B%BE9.png" alt="键值对比喻图"></p><p>变量 <code>user</code> 和 <code>admin</code> 都保存着对同一个对象的引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;John&#x27;</span> &#125;;<br><span class="hljs-keyword">let</span> admin = user;<br>admin.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Pete&#x27;</span>; <span class="hljs-comment">// 通过 &quot;admin&quot; 引用来修改</span><br><span class="hljs-title function_">alert</span>(user.<span class="hljs-property">name</span>); <span class="hljs-comment">// &#x27;Pete&#x27;，修改能通过 &quot;user&quot; 引用看到</span><br></code></pre></td></tr></table></figure><p>可以通过其中任意一个变量来访问该对象并修改它的内容。这就像有一个带有两把钥匙的柜子，使用其中一把钥匙（<code>admin</code>）打开柜子并更改了里面的东西。那么，如果我们稍后用另一把钥匙（<code>user</code>），我们仍然可以打开同一个柜子并且可以访问更改的内容。</p><h2 id="通过引用来比较"><a href="#通过引用来比较" class="headerlink" title="通过引用来比较"></a>通过引用来比较</h2><p>仅当两个对象为同一对象时，两者才相等。例如，这里的 <code>a</code> 和 <code>b</code> 两个变量都引用同一个对象，所以两者相等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> a = &#123;&#125;;<br><span class="hljs-keyword">let</span> b = a;      <span class="hljs-comment">// 复制引用</span><br><span class="hljs-title function_">alert</span>(a == b);  <span class="hljs-comment">// true，都引用同一对象</span><br><span class="hljs-title function_">alert</span>(a === b); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>但两个独立的对象并不相等，即使两者看起来很像（都为空）；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> a = &#123;&#125;;<br><span class="hljs-keyword">let</span> b = &#123;&#125;;         <span class="hljs-comment">// 两个独立的对象</span><br><span class="hljs-title function_">alert</span>( a == b );    <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h2 id="克隆与合并，Object-assign"><a href="#克隆与合并，Object-assign" class="headerlink" title="克隆与合并，Object.assign"></a>克隆与合并，Object.assign</h2><p>如上所述，复制一个对象变量会创建一个对相同对象的引用。若想要复制一个对象，需要如下做法。</p><p>创建一个新对象，通过遍历已有对象的属性，并在原始类性值的层面复制它们，以实现对已有对象结构的复制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;George&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">27</span><br>&#125;;<br><span class="hljs-keyword">let</span> clone = &#123;&#125;;             <span class="hljs-comment">// 创建一个新的空对象</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> user) &#123;     <span class="hljs-comment">// 将 user 中所有的属性拷贝到其中</span><br>    clone[key] = user[key];<br>&#125;<br><br><span class="hljs-comment">// 现在 clone 是带有相同内容的完全独立的对象</span><br>clone.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;Pete&quot;</span>; <span class="hljs-comment">// 改变了其中的数据</span><br><span class="hljs-title function_">alert</span>( user.<span class="hljs-property">name</span> ); <span class="hljs-comment">// 原来的对象中的 name 属性依然是 George</span><br></code></pre></td></tr></table></figure><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(dest, [src1, src2, src3...])<br></code></pre></td></tr></table></figure><ul><li>第一个参数 <code>dest</code> 是指目标对象；</li><li>后面的参数 <code>src1, ..., srcN</code> （可按需传递多个参数）是源对象；</li><li>该方法将所有源对象的属性拷贝到目标对象 <code>dest</code> 中。换句话说，从第二个开始的所有参数的属性都被拷贝到第一个参数的对象中；</li><li>调用结果返回 dest。</li></ul><p>使用 <code>Object.assign</code> 来合并多个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span> &#125;;<br><br><span class="hljs-keyword">let</span> permissions1 = &#123; <span class="hljs-attr">canView</span>: <span class="hljs-literal">true</span> &#125;;<br><span class="hljs-keyword">let</span> permissions2 = &#123; <span class="hljs-attr">canEdit</span>: <span class="hljs-literal">true</span> &#125;;<br><br><span class="hljs-comment">// 将 permission1 和 permission2 中的所有属性都拷贝到 user 中</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(user, permission1, permission2);<br><span class="hljs-comment">// 现在 user = &#123; name: &quot;John&quot;, canView: true, canEdit: true &#125;</span><br></code></pre></td></tr></table></figure><p>如果被拷贝的属性的属性名已经存在，那该属性名会被覆盖。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span> &#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(user, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Pete&quot;</span> &#125;);<br><span class="hljs-title function_">alert</span>(user.<span class="hljs-property">name</span>);   <span class="hljs-comment">// 现在 user = &#123; name: &quot;Pete&quot; &#125;</span><br></code></pre></td></tr></table></figure><p>也可使用 <code>Object.assign</code> 代替 <code>for..in</code> 循环来进行简单克隆。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">30</span><br>&#125;;<br><br><span class="hljs-keyword">let</span> clone = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, user);<br><span class="hljs-comment">// 将 user 中的所有属性拷贝到了一个空对象中，并返回这个新的对象。</span><br></code></pre></td></tr></table></figure><h2 id="深层克隆"><a href="#深层克隆" class="headerlink" title="深层克隆"></a>深层克隆</h2><p>上述例子中，均假设 <code>user</code> 的所有属性均为原始类型，但属性也可以是对其他对象的引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">30</span><br>&#125;;<br>------------------------------------------<br><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>    <span class="hljs-attr">sizes</span>: &#123;            <span class="hljs-comment">// 对其他对象的引用</span><br>        <span class="hljs-attr">height</span>: <span class="hljs-number">182</span>,<br>        <span class="hljs-attr">width</span>: <span class="hljs-number">50</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>    <span class="hljs-attr">sizes</span>: &#123;            <span class="hljs-comment">// 对其他对象的引用</span><br>        <span class="hljs-attr">height</span>: <span class="hljs-number">182</span>,<br>        <span class="hljs-attr">width</span>: <span class="hljs-number">50</span><br>    &#125;<br>&#125;;<br><span class="hljs-title function_">alert</span>( user.<span class="hljs-property">sizes</span>.<span class="hljs-property">height</span> ); <span class="hljs-comment">// 182</span><br><br><span class="hljs-keyword">let</span> clone = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, user);<br><span class="hljs-title function_">alert</span>( user.<span class="hljs-property">sizes</span> === clone.<span class="hljs-property">sizes</span> );    <span class="hljs-comment">// true,同为一个对象</span><br><br><span class="hljs-comment">// user 和 clone 分享同一个 sizes</span><br>user.<span class="hljs-property">sizes</span>.<span class="hljs-property">width</span>++;         <span class="hljs-comment">// 通过 user 改变属性值</span><br><span class="hljs-title function_">alert</span>(clone.<span class="hljs-property">sizes</span>.<span class="hljs-property">width</span>);   <span class="hljs-comment">// 51,能从clone中获取到变更后的结果</span><br></code></pre></td></tr></table></figure><p>深拷贝：为使 <code>user</code> 和 <code>clone</code> 成为两个真正独立的对象，可使用一个拷贝循环来检查 <code>user[key]</code> 的每个值，如果 <code>user[key]</code> 是一个对象，也复制其结构。</p><p>可使用递归来实现，或采用现有的实现，例如 <code>lodash</code> 库的 <code>_.cloneDeep(obj)</code>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对象通过引用被赋值和拷贝。一个变量存储的不是 “对象的值”，而是一个对值的 “引用”（内存地址），因此拷贝此类变量或将其作为函数参数传递时，所拷贝是引用，而不是对象本身。</p><p>所有通过被拷贝的引用的操作（如添加、删除属性）都作用在同一对象上。</p><p>创建 “真正的拷贝”（一个克隆），可使用 <code>Object.assign</code> 实现 “浅拷贝”（嵌套对象被通过引用进行拷贝），或使用 “深拷贝” 函数，如 <code>_.cloneDeep(obj)</code>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zh.javascript.info/object-copy">https://zh.javascript.info/object-copy</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSON Object 对象 &lt;一&gt;</title>
    <link href="/2023/04/11/JSON%20Object%20%E5%AF%B9%E8%B1%A1(1)/"/>
    <url>/2023/04/11/JSON%20Object%20%E5%AF%B9%E8%B1%A1(1)/</url>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>Object（对象）是用来存储键值对和更复杂的实体。通过使用带有可选 <strong>属性列表</strong> 的花括号 <code>&#123;...&#125;</code> 创建对象。一个属性就是一个键值对 （”key:value”），其中键（key）是一个字符串，值（value）可以是任何值。</p><p>可以把对象想象成一个带有签名文件的文件柜，每条数据都基于键（key）存储在文件中，这样可根据文件名（也就是“键”）添加&#x2F;删除&#x2F;查找文件。</p><p><img src="/../image/%E9%94%AE%E5%80%BC%E5%AF%B9%E6%AF%94%E5%96%BB%E5%9B%BE1.png" alt="键值对比喻图"></p><p>创建一个空的对象（“空柜子”）方法：构造函数或者字面量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> user = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();    <span class="hljs-comment">// &quot;构造函数&quot;</span><br><span class="hljs-keyword">let</span> user = &#123;&#125;;              <span class="hljs-comment">// &quot;字面量&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E9%94%AE%E5%80%BC%E5%AF%B9%E6%AF%94%E5%96%BB%E5%9B%BE2.png" alt="键值对比喻图"></p><h2 id="文本和属性"><a href="#文本和属性" class="headerlink" title="文本和属性"></a>文本和属性</h2><p>创建对象时，可以立即将一些属性以键值对的形式放入 <code>&#123;...&#125;</code> 中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> usr = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;George&quot;</span>,     <span class="hljs-comment">// 键 &quot;name&quot;，值 &quot;George&quot;</span><br>    <span class="hljs-attr">age</span>: <span class="hljs-number">27</span>             <span class="hljs-comment">// 键 &quot;age&quot;，值 27</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>user</code> 对象中，有两个属性：</p><ol><li>第一个的键是 <code>&quot;name&quot;</code>，值是 <code>&quot;George&quot;</code>;</li><li>第一个的键是 <code>&quot;age&quot;</code>，值是 <code>&quot;27&quot;</code>。</li></ol><p>生成的 <code>user</code> 对象可以被想象为一个放置着两个标记有 <code>“name”</code> 和 <code>“age”</code> 的文件的柜子，能够随时添加、删除和读取文件。</p><p><img src="/../image/%E9%94%AE%E5%80%BC%E5%AF%B9%E6%AF%94%E5%96%BB%E5%9B%BE3.png" alt="键值对比喻图"></p><ul><li><p>使用 <code>.</code> 点符号访问属性值；</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-title function_">alert</span>(user.<span class="hljs-property">name</span>);   <span class="hljs-comment">// George</span><br><span class="hljs-title function_">alert</span>(user.<span class="hljs-property">age</span>);    <span class="hljs-comment">// 27</span><br></code></pre></td></tr></table></figure><p>  属性值可以是任意类型。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javaScript">user.<span class="hljs-property">isAdmin</span> = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>  <img src="/../image/%E9%94%AE%E5%80%BC%E5%AF%B9%E6%AF%94%E5%96%BB%E5%9B%BE4.png" alt="键值对比喻图"></p></li><li><p>使用 <code>delete</code> 操作符移除属性；</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">delete</span> user.<span class="hljs-property">age</span><br></code></pre></td></tr></table></figure><p>  <img src="/../image/%E9%94%AE%E5%80%BC%E5%AF%B9%E6%AF%94%E5%96%BB%E5%9B%BE5.png" alt="键值对比喻图"></p></li><li><p>使用多字词语来作为属性名，但必须给它们加上引号；</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;George&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">27</span>,<br>    <span class="hljs-string">&quot;likes birds&quot;</span>: <span class="hljs-literal">true</span>  <span class="hljs-comment">// 多词属性名必须加引号</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>  <img src="/../image/%E9%94%AE%E5%80%BC%E5%AF%B9%E6%AF%94%E5%96%BB%E5%9B%BE6.png" alt="键值对比喻图">   </p></li><li><p>列表中最后一个属性应以逗号结尾；</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;George&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">27</span>,<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="点符号与方括号"><a href="#点符号与方括号" class="headerlink" title="点符号与方括号"></a>点符号与方括号</h2><p>点操作不能用于多次属性。</p><ul><li>点符号：要求 <code>key</code> 是有效的变量标识符，不能包含空格，不以数字开头，不包含特殊符号（允许使用 <code>$</code> 和 <code>_</code>）</li><li>方括号：可用于任何字符串，方括号中的字符串需要放在引号中，单&#x2F;双引号均可；</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javaScript">user.<span class="hljs-property">likes</span> birds = <span class="hljs-literal">true</span>     <span class="hljs-comment">// 误以为处理 user.likes，遇到 birds 时会报语法错误</span><br>-----------------------<br><span class="hljs-keyword">let</span> user = &#123;&#125;<br>user[<span class="hljs-string">&quot;likes birds&quot;</span>] = <span class="hljs-literal">true</span>  <span class="hljs-comment">// 设置</span><br><span class="hljs-title function_">alert</span>(user[<span class="hljs-string">&quot;likes birds&quot;</span>]); <span class="hljs-comment">// 读取，true</span><br><span class="hljs-keyword">delete</span> user[<span class="hljs-string">&quot;likes birds&quot;</span>]; <span class="hljs-comment">// 删除</span><br></code></pre></td></tr></table></figure><p>同时，方括号提供了一种可以通过任意表达式来获取属性名的方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> key = <span class="hljs-string">&quot;likes birds&quot;</span>;<br>user[key] = <span class="hljs-literal">true</span>;<br>-----------------------<br>user[<span class="hljs-string">&quot;likes birds&quot;</span>] = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 与上面等同</span><br></code></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>计算属性：当创建一个对象时，可以在对象字面量中使用方括号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> fruit = <span class="hljs-string">&#x27;apple&#x27;</span>;<br><span class="hljs-keyword">let</span> bag = &#123;<br>    [fruit]: <span class="hljs-number">5</span>,     <span class="hljs-comment">// 属性名从 fruit 变量中得到，此时 bag 变为 &#123;apple：5&#125;</span><br>&#125;<br><span class="hljs-title function_">alert</span>(bag.<span class="hljs-property">apple</span>);   <span class="hljs-comment">// 5</span><br>-----------------------<br><span class="hljs-keyword">let</span> fruit = <span class="hljs-string">&#x27;apple&#x27;</span>;<br><span class="hljs-keyword">let</span> bag = &#123;&#125;;<br>bag[fruit] = <span class="hljs-number">5</span>;     <span class="hljs-comment">// 与上面等同</span><br></code></pre></td></tr></table></figure><p>计算属性含义为：<code>[fruit]</code> 含义是属性名从 <code>fruit</code> 变量中获取。</p><p>方括号可用于更复杂的表达式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> fruit = <span class="hljs-string">&#x27;apple&#x27;</span>;<br><span class="hljs-keyword">let</span> bag = &#123;<br>    [fruit + <span class="hljs-string">&#x27;Computers&#x27;</span>]: <span class="hljs-number">5</span>    <span class="hljs-comment">// bag.appleComputers = 5</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="属性值简写"><a href="#属性值简写" class="headerlink" title="属性值简写"></a>属性值简写</h2><p>使用已经存在的变量当作属性名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">makeUser</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">name</span>: name,<br>        <span class="hljs-attr">age</span>: age,<br>        <span class="hljs-comment">// ……其他的属性</span><br>    &#125;;<br>&#125;<br><br><span class="hljs-keyword">let</span> user = <span class="hljs-title function_">makeUser</span>(<span class="hljs-string">&quot;George&quot;</span>, <span class="hljs-number">27</span>);<br><span class="hljs-title function_">alert</span>(user.<span class="hljs-property">name</span>);   <span class="hljs-comment">// George</span><br></code></pre></td></tr></table></figure><h2 id="属性名称限制"><a href="#属性名称限制" class="headerlink" title="属性名称限制"></a>属性名称限制</h2><p>变量名不能是某个保留字，如 <code>&quot;for&quot;</code>、<code>&quot;let&quot;</code>、<code>&quot;return&quot;</code>，但对象的属性名不受限制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">for</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">let</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">return</span>: <span class="hljs-number">3</span><br>&#125;;<br><span class="hljs-title function_">alert</span>( obj.<span class="hljs-property">for</span> + obj.<span class="hljs-property">let</span> + obj.<span class="hljs-property">return</span> );    <span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure><h2 id="for-in-循环"><a href="#for-in-循环" class="headerlink" title="for..in 循环"></a>for..in 循环</h2><p><code>for..in</code> 可以遍历一个对象中的所有键（key）.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">for</span>(key <span class="hljs-keyword">in</span> object)&#123;<br>    <span class="hljs-comment">// </span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;George&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">27</span>,<br>    <span class="hljs-attr">isAdmin</span>: <span class="hljs-literal">true</span><br>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> user)&#123;<br>    <span class="hljs-title function_">alert</span>(key);         <span class="hljs-comment">// name，age，isAdmin</span><br>    <span class="hljs-title function_">alert</span>(user[key]);   <span class="hljs-comment">// George，27，true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>所有 “for” 结构体都允许在循环体中定义变量，例如 <code>let key</code>；</li><li>可以使用其他属性名来替代 <code>key</code>，例如 <code>for(let prop in obj)</code>。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对象是具有一些特殊特性的关联数组，存储属性（键值对），其中：</p><p>属性的键必须是字符串或者 symbol（通常是字符串），值可以是任何类型。可以用下面的方法访问属性：</p><ul><li>点符号: obj.property；</li><li>方括号：obj[“property”]，方括号允许从变量中获取键，例如 obj[varWithKey]。</li></ul><p>其他操作：</p><ul><li>删除属性：delete obj.prop；</li><li>检查是否存在给定键的属性：”key” in obj；</li><li>遍历对象：for(let key in obj) 循环。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zh.javascript.info/object#shu-xing-cun-zai-xing-ce-shi-in-cao-zuo-fu">https://zh.javascript.info/object#shu-xing-cun-zai-xing-ce-shi-in-cao-zuo-fu</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端未响应</title>
    <link href="/2023/04/07/%E5%89%8D%E7%AB%AF%E6%9C%AA%E5%93%8D%E5%BA%94/"/>
    <url>/2023/04/07/%E5%89%8D%E7%AB%AF%E6%9C%AA%E5%93%8D%E5%BA%94/</url>
    
    <content type="html"><![CDATA[<h2 id="前端未响应"><a href="#前端未响应" class="headerlink" title="前端未响应"></a>前端未响应</h2><p>前端未响应，显示连接不上 <code>localhost:8092</code> (自己的端口号)，可以尝试使用以下命令解决：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsof -i:8092    // 查看占用的 pid，比如查出来是 1221<br><span class="hljs-built_in">kill</span> 1221<br>ctrl+<span class="hljs-built_in">shift</span>+p    // 输入 reloadwindow  重新加载vscode<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>element 日期选择器</title>
    <link href="/2023/04/07/element%E6%97%A5%E6%9C%9F%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <url>/2023/04/07/element%E6%97%A5%E6%9C%9F%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="日期范围选择器"><a href="#日期范围选择器" class="headerlink" title="日期范围选择器"></a>日期范围选择器</h2><p>日期范围选择器限制只选择今天及以前的日期。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-date-picker <br>    style=&quot;margin-left: 5px;&quot; <br>    v-model=&quot;valueTime&quot; <br>    type=&quot;daterange&quot; <br>    format=&quot;yyyy-MM-dd&quot; <br>    unlink-panels<br>    value-format=&quot;yyyy-MM-dd&quot;<br>    range-separator=&quot;至&quot;<br>    start-placeholder=&quot;开始日期&quot;<br>    end-placeholder=&quot;结束日期&quot;<br>    :picker-options=&quot;pickerOptions&quot;&gt;<br>&lt;/el-date-picker&gt;<br></code></pre></td></tr></table></figure><ul><li><code>unlink-panels</code>: 在范围选择器里取消两个日期面板之间的联动。</li></ul><p>在组件中需进行如下设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>    valueTime: &quot;&quot;,<br>    pickerOptions: &#123;<br>        disabledDate (time) &#123;<br>            return time.getTime() &gt; Date.now();<br>        &#125;<br>    &#125;,<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>实际效果如下：</p><p><img src="/../image/element%E6%97%A5%E6%9C%9F%E9%80%89%E6%8B%A9%E5%99%A8_1.1.png" alt="element日期选择器1"></p><p><img src="/../image/element%E6%97%A5%E6%9C%9F%E9%80%89%E6%8B%A9%E5%99%A8_1.2.png" alt="element日期选择器2"></p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>其他几种常见日期设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>    pickerOptions: &#123;<br>        disabledDate(time) &#123;<br>            // 设置选择今天以及今天之后的日期<br>            return time.getTime() &lt; Date.now() - 8.64e7<br>            // 设置选择今天以及今天以前的日期<br>            return time.getTime() &gt; Date.now();<br>            // 设置选择今天之后的日期（不能选择当天时间）<br>            return time.getTime() &lt; Date.now();        <br>            // 设置选择今天之前的日期（不能选择当天）<br>            return time.getTime() &gt; Date.now() - 8.64e7 <br>            // 设置当天23：59：59可选<br>            let currentTime = this.getNowMonthDay() + ` 23:59:59`<br>                return time.getTime() &gt; new Date(currentTime).getTime()<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://element.eleme.cn/2.0/#/zh-CN/component/date-picker">https://element.eleme.cn/2.0/#/zh-CN/component/date-picker</a></p><p><a href="https://segmentfault.com/q/1010000037421298">https://segmentfault.com/q/1010000037421298</a></p>]]></content>
    
    
    <categories>
      
      <category>element</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2023/04/07/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2023/04/07/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><p><img src="/../image/404.jpg" alt="测试图片"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/07/hello-world/"/>
    <url>/2023/04/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
